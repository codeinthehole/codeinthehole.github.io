<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Commandlinefu on David Winterbottom</title>
    <link>http://codeinthehole.com/tags/commandlinefu/index.xml</link>
    <description>Recent content in Commandlinefu on David Winterbottom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://codeinthehole.com/tags/commandlinefu/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>commandlinefu.com is in new hands</title>
      <link>http://codeinthehole.com/news/commandlinefucom-is-in-new-hands/</link>
      <pubDate>Sat, 04 Apr 2015 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/news/commandlinefucom-is-in-new-hands/</guid>
      <description>&lt;p&gt;For the record, I no longer maintain
&lt;a href=&#34;http://www.commandlinefu.com/&#34;&gt;commandlinefu.com&lt;/a&gt;. I&amp;rsquo;ve handed over the
baton to notable Bay Area celebrity, Jon Hendren
(&lt;a href=&#34;https://twitter.com/fart&#34;&gt;@fart&lt;/a&gt;). This is a good thing for the site
and its users as I have been unable to do much maintenance in recent
times. I look forward to seeing how the site evolves.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linking to Github</title>
      <link>http://codeinthehole.com/tips/linking-to-github/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/linking-to-github/</guid>
      <description>&lt;p&gt;It was rightly &lt;a href=&#34;http://andrew.yurisich.com/work/2014/07/16/dont-link-that-line-number/&#34;&gt;pointed out
yesterday&lt;/a&gt;
that it&amp;rsquo;s dangerous to link to lines or blocks of code on Github without
explicitly specifying the commit hash in the URL. On this theme,
consider this git command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git browse -u -- commit/&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;git rev-parse HEAD&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
https://github.com/tangentlabs/django-oscar/commit/17851d4b66922f8d7e203e2b469040690c84a0db
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This emits the Github URL to the &lt;code&gt;HEAD&lt;/code&gt; commit on the current branch,
specifying the commit hash in the URL. Note that the &lt;code&gt;browse&lt;/code&gt; subcommand
is provided by the excellent &lt;a href=&#34;https://hub.github.com/&#34;&gt;hub&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;Pasting links to commits is common, both for mailing list posts and
within discussion on Github itself. Getting the correct URL quickly is
useful.&lt;/p&gt;

&lt;p&gt;We can streamline further using an alias:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# ~/.gitconfig&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;alias&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; !hub browse -u -- commit/&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;git rev-parse HEAD&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;so we can run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git url
https://github.com/tangentlabs/django-oscar/commit/17851d4b66922f8d7e203e2b469040690c84a0db
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to get the expanded &lt;code&gt;HEAD&lt;/code&gt; URL. Even better, we can parameterise:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# ~/.gitconfig&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;alias&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;!f() { sha=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;git rev-parse &lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;HEAD&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;; hub browse -u -- commit/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$sha&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;; }; f&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;so we can now specify a commit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git url
https://github.com/tangentlabs/django-oscar/commit/17851d4b66922f8d7e203e2b469040690c84a0db

$ git url head
https://github.com/tangentlabs/django-oscar/commit/17851d4b66922f8d7e203e2b469040690c84a0db

$ git url head^
https://github.com/tangentlabs/django-oscar/commit/f49d055befc90897c030e0447a98d512cca4265b
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Several times a day, I run one of the above, piping the output into the
clipboard for easy pasting:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git url &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; clipboard
https://github.com/tangentlabs/django-oscar/commit/17851d4b66922f8d7e203e2b469040690c84a0db
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# ~/.bashrc&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;clipboard&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;pbcopy&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color: #75715e&#34;&gt;# osx clipboard&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s a few more useful git aliases based on the &lt;code&gt;browse&lt;/code&gt; subcommand:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# ~/.gitconfig&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;alias&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;commits&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; !hub browse -- commits
&lt;span style=&#34;color: #f8f8f2&#34;&gt;issues&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; !hub browse -- issues
&lt;span style=&#34;color: #f8f8f2&#34;&gt;wiki&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; !hub browse -- wiki
&lt;span style=&#34;color: #f8f8f2&#34;&gt;settings&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; !hub browse -- settings
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Command-line tips for effective release announcements</title>
      <link>http://codeinthehole.com/tips/command-line-tips-for-effective-release-announcements/</link>
      <pubDate>Thu, 16 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/command-line-tips-for-effective-release-announcements/</guid>
      <description>

&lt;p&gt;We finally &lt;a href=&#34;http://django-oscar.readthedocs.org/en/latest/releases/v0.6.html&#34;&gt;released Oscar
0.6&lt;/a&gt;
last week. The process brought home the importance of writing your
release notes as you go rather than at the end. It&amp;rsquo;s a real pain to
extract the key changes from 1200 commits spread over the last 8 months.
Lesson learnt.&lt;/p&gt;

&lt;p&gt;This article is largely a note-to-self in case I have to repeat the
process. However, if you do find yourself in a similar position, here
are a few command-line tricks for analysing your git history.&lt;/p&gt;

&lt;h3 id=&#34;analysing-codebase-changes-since-a-tag&#34;&gt;Analysing codebase changes since a tag&lt;/h3&gt;

&lt;p&gt;Basics: browse commits since the last tagged release&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git log &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;--name-status&lt;/code&gt; option for &lt;code&gt;git diff&lt;/code&gt; is useful for analysing
codebase changes between two commits. For instance, you can view changes
to a particular directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git diff --name-status &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 oscar/apps/address
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which can be useful if thousands of files have changed and you want to
review each package individually.&lt;/p&gt;

&lt;p&gt;Extensions include finding deleted files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git diff --name-status &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;^D&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or all new migration files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git diff --name-status &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;^A.*migrations/[0-9]&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which is important for projects like Oscar which ship with database
migrations.&lt;/p&gt;

&lt;h3 id=&#34;determine-changes-template-block-names&#34;&gt;Determine changes template block names&lt;/h3&gt;

&lt;p&gt;Since Oscar allows customisation of templates and overriding template
blocks, we try and document any changes to template block names. The
process here is more involved and requires two temporary files generated
with this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ grep -or &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{% block .* %}&amp;quot;&lt;/span&gt; oscar/templates/oscar &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;BEGIN {FS=&amp;quot;:&amp;quot;} {split($2, parts, &amp;quot; &amp;quot;); print $1, parts[3]}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This writes out each pairs of filename and template block name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;oscar/templates/oscar/403.html title
oscar/templates/oscar/403.html error_heading
oscar/templates/oscar/403.html error_message
oscar/templates/oscar/404.html title
oscar/templates/oscar/404.html error_heading
oscar/templates/oscar/404.html error_message
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To compare the template blocks from each release, we create two
temporary files and analyse the diff:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git checkout &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5
$ grep -or &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{% block .* %}&amp;quot;&lt;/span&gt; oscar/templates/oscar &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;BEGIN {FS=&amp;quot;:&amp;quot;} {split($2, parts, &amp;quot; &amp;quot;); print $1, parts[3]}&amp;#39;&lt;/span&gt; &amp;gt;
    /tmp/templates-0.5.txt
$ git checkout &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.6
$ grep -or &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{% block .* %}&amp;quot;&lt;/span&gt; oscar/templates/oscar &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;BEGIN {FS=&amp;quot;:&amp;quot;} {split($2, parts, &amp;quot; &amp;quot;); print $1, parts[3]}&amp;#39;&lt;/span&gt; &amp;gt;
    /tmp/templates-0.6.txt
$ vimdiff /tmp/templates-0.&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;,6&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;.txt
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I imagine there&amp;rsquo;s a better way to do this but I couldn&amp;rsquo;t find one.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
    This is a Django specific technique, but the general approach is quite
    useful for analysing changes between two codebases.
&lt;/div&gt;

&lt;h3 id=&#34;updating-an-authors-files&#34;&gt;Updating an &lt;code&gt;AUTHORS&lt;/code&gt; files&lt;/h3&gt;

&lt;p&gt;Oscar&amp;rsquo;s &lt;code&gt;AUTHORS&lt;/code&gt; file contains all contributors with 15 or more commits
in the master branch. We generate this file automatically.&lt;/p&gt;

&lt;p&gt;You can sort authors by number of commits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git shortlog -sn master &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; head
  &lt;span style=&#34;color: #ae81ff&#34;&gt;2992&lt;/span&gt;  David Winterbottom
   &lt;span style=&#34;color: #ae81ff&#34;&gt;355&lt;/span&gt;  Maik Hoepfel
   &lt;span style=&#34;color: #ae81ff&#34;&gt;167&lt;/span&gt;  Sebastian Vetter
   &lt;span style=&#34;color: #ae81ff&#34;&gt;166&lt;/span&gt;  Jon Price
   &lt;span style=&#34;color: #ae81ff&#34;&gt;120&lt;/span&gt;  Andrew Ingram
    &lt;span style=&#34;color: #ae81ff&#34;&gt;73&lt;/span&gt;  Asia Biega
    &lt;span style=&#34;color: #ae81ff&#34;&gt;65&lt;/span&gt;  Oliver Randell
    &lt;span style=&#34;color: #ae81ff&#34;&gt;49&lt;/span&gt;  Eleni Lixourioti
  ...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and extend this to find authors with more than a certain number of
commits&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;THRESHOLD&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;
$ git shortlog -sn master &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;$1 &amp;gt;= $THRESHOLD {$1=&amp;quot;&amp;quot;;print $0}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; cut -d&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; -f2-
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note, &lt;code&gt;git shortlog&lt;/code&gt; uses a &lt;code&gt;.mailmap&lt;/code&gt; file to aggregate commits from
the same committer where their name or email were different in the
commit history.&lt;/p&gt;

&lt;p&gt;Using this command, we can create a new &lt;code&gt;AUTHORS&lt;/code&gt; file containing all
contributors with greater than 15 commits on the master branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git shortlog -ns master &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;$1 &amp;gt;= $THRESHOLD {$1=&amp;quot;&amp;quot;;print $0}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    cut -d&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; -f2- &amp;gt; AUTHORS
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;notifying-contributors&#34;&gt;Notifying contributors&lt;/h3&gt;

&lt;p&gt;If you have a patch accepted into a project, it&amp;rsquo;s useful to know when a
formal release has been cut that includes said patch. Before then, you
might be linking your project to a fork and maintaining a work-around
within your codebase.&lt;/p&gt;

&lt;p&gt;As the project maintainer, you might assume that such people are already
subscribed to your project mailing list, or following your project
Twitter stream. However, there&amp;rsquo;s a more thorough way to notify
contributors that their patch is in a release: you can email them.&lt;/p&gt;

&lt;p&gt;To do this, extract the email addresses of committers whose patches are
in the new release:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git log &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 --format&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;%aE&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; uniq
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and CC these addresses in your mailing list release announcement.&lt;/p&gt;

&lt;p&gt;Even better, you can only grab the addresses of &lt;em&gt;new&lt;/em&gt; contributors to
the project, where the release is the first to contain one of their
commits. We do this by extracting two lists of email addresses and
employing the lovely but neglected &lt;code&gt;comm&lt;/code&gt; command to pluck the email
addresses that only exist in the latest release:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ comm -13 &amp;lt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;git log &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5 --format&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;%aE&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; uniq&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    &amp;lt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;git log &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 --format&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;%aE&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; uniq&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the first input is all contributors up to release 0.5, while the
second is contibutors to the 0.6 release only.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;comm&lt;/code&gt; is an extremely useful command for selecting lines common between
two files, or exclusive to one. The &lt;code&gt;-13&lt;/code&gt; options indicate to exclude
lines exclusive to the first file (&lt;code&gt;-1&lt;/code&gt;) and lines common to both
(&lt;code&gt;-3&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;summarising-changes&#34;&gt;Summarising changes&lt;/h3&gt;

&lt;p&gt;If your release isn&amp;rsquo;t large, your release notes could include a summary
of the contained commits; this is useful for minor point releases. You
can use &lt;code&gt;git shortlog&lt;/code&gt; to do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git shortlog &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 --no-merges
David Winterbottom &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;661&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;:
      Add defaults to the counts on the product summary dashboard page
      Tidy up urls.py and settings.py
      Use mirrors when pip installing the demo site
      Install django-oscar-stores
      Add link to stores page in footer
...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can even use &lt;code&gt;--format&lt;/code&gt; to provide links to Github commits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git shortlog &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.3.4..0.4 --no-merges --format&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s (https://github.com/tangentlabs/django-oscar-stores/commit/%h)&amp;quot;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This won&amp;rsquo;t always be appropriate if your release if there are thousands
of commits.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Effective pull requests and other good practices for teams using github</title>
      <link>http://codeinthehole.com/tips/pull-requests-and-other-good-practices-for-teams-using-github/</link>
      <pubDate>Sat, 20 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/pull-requests-and-other-good-practices-for-teams-using-github/</guid>
      <description>

&lt;p&gt;I work at &lt;a href=&#34;http://www.tangentlabs.co.uk&#34;&gt;an agency&lt;/a&gt; where we pay $200 a
month to Github for their &lt;a href=&#34;https://github.com/plans&#34;&gt;platinum plan&lt;/a&gt;.
This article is a summary of an internal talk I gave on making the most
of our subscription.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s nothing original here: it&amp;rsquo;s just a collection of tips that I&amp;rsquo;ve
harvested over the last few years. I&amp;rsquo;m publishing this article mainly so
I have something to refer future employees to.&lt;/p&gt;

&lt;h2 id=&#34;use-pull-requests&#34;&gt;Use pull requests&lt;/h2&gt;

&lt;p&gt;Pull requests are an excellent tool for fostering code review. If you&amp;rsquo;re
using Github for team projects, you should be using these extensively.&lt;/p&gt;

&lt;p&gt;Many people don&amp;rsquo;t realise that you can make pull requests between two
branches of the same repository (the so-called &lt;a href=&#34;https://help.github.com/articles/using-pull-requests&#34;&gt;&amp;ldquo;shared repository
model&amp;rdquo;&lt;/a&gt;). For team
projects, this is preferable over the &amp;ldquo;fork and pull&amp;rdquo; model because it&amp;rsquo;s
simpler: there are less branches and remotes to keep track of.&lt;/p&gt;

&lt;p&gt;A good practice is for someone else to merge your code into the
mainline, ensuring 2 sets of eyeballs review each feature. This is
simple to organise when working in pairs, but in larger teams you may
need a system for determining who reviews what.&lt;/p&gt;

&lt;h3 id=&#34;sample-workflow&#34;&gt;Sample workflow&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s a sample workflow demonstrating the use of pull requests.&lt;/p&gt;

&lt;h4 id=&#34;work-on-a-story&#34;&gt;Work on a story&lt;/h4&gt;

&lt;p&gt;Create a new branch for the current story you are working on:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git checkout -b feature/masquerading
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s important to use a new branch for pull requests for several
reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It allows you to submit multiple pull requests without confusion.
The classical Github gotcha is to continue committing to a pull
request branch after making the initial request. When these commits
are pushed to the remote, they will become part of the original pull
request which often ends up conflating unrelated functionality.&lt;/li&gt;
&lt;li&gt;When your pull request is merged into the target branch, the
maintainer may decide to rebase your commits to avoid a merge
commit, or to squash the commits into a single coherent commit. If
your pull request was from your &amp;lsquo;master&amp;rsquo; branch, you will encounter
problems when merging the target branch back into your own &amp;lsquo;master&amp;rsquo;.
Using a temporary branch means it can be discarded once the pull
request is accepted and it doesn&amp;rsquo;t matter that your history was
rewritten.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make changes, run tests, commit etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ vim 
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git commit
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;ask-for-feedback&#34;&gt;Ask for feedback&lt;/h4&gt;

&lt;p&gt;If it&amp;rsquo;s a significant or difficult story, you may be unsure if you&amp;rsquo;re on
the right track. You could ask for some feedback now by pushing your
commits to the remote for others to review:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git push -u origin feature/masquerading
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;-u&lt;/code&gt; option adds an upstream tracking reference to your local
branch, meaning that you can run push subsequent commits using
&lt;code&gt;git push&lt;/code&gt; without having to specify the remote and branch names (and
run &lt;code&gt;git pull&lt;/code&gt; without additional arguments).&lt;/p&gt;

&lt;p&gt;Now ask for feedback on your project mailing list by circulating either
a link to the branch, or a compare view URL. You can use the excellent
&lt;a href=&#34;http://defunkt.io/hub/&#34;&gt;hub&lt;/a&gt; to easily generate compare URLs for
sharing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git compare master..feature/masquerading
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will open your default browser on the compare URL, which you can
then copy into an email.&lt;/p&gt;

&lt;p&gt;Your fellow developers can now comment either on your commits at
line-level, or make more general comments by replying to the mailing
list thread.&lt;/p&gt;

&lt;h4 id=&#34;submit-pull-request&#34;&gt;Submit pull request&lt;/h4&gt;

&lt;p&gt;After digesting your co-workers&amp;rsquo; comments, you adjust your approach and
make some further commits to your branch.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ vim 
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git commit
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the story is complete, push your new commits to the remote:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git push 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and use the Github site to create a pull request. A couple of things to
be aware of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure the destination branch is correct, it may not always be
&amp;lsquo;master&amp;rsquo;. If you&amp;rsquo;re using git-flow or similar, the appropriate
destination branch may be &amp;lsquo;develop&amp;rsquo; or a release branch.&lt;/li&gt;
&lt;li&gt;Use Github&amp;rsquo;s preview facilties to ensure the pull request is well
structured and clear. The description should explain what the pull
request contains as well as the thinking behind it. For reference,
have a look at this &lt;a href=&#34;https://github.com/bitly/dablooms/pull/19&#34;&gt;excellent pull
request&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the pull request is created, you should find someone on your team
to review it and send them a link to the request using the project
mailing list so anyone else with an interest can take a look.&lt;/p&gt;

&lt;h4 id=&#34;code-review&#34;&gt;Code review&lt;/h4&gt;

&lt;p&gt;Others can now review your branch, make comments on individual lines or
on the pull request as a whole: the same process as when you pushed some
commits for review earlier.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also possible for others to add commits to the pull request by
pushing to the same branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git fetch origin
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git checkout feature/masquerading
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ vim 
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git add .
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git commit
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git push origin feature/masquerading
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Iterate this way until the branch is ready to be merged.&lt;/p&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
    Github easter egg: add &lt;code&gt;?w=0&lt;/code&gt; to diff URLs (eg a commit, compare view or
    pull request) to ignore whitespace.
&lt;/div&gt;

&lt;h4 id=&#34;cleaning-your-history-optional&#34;&gt;Cleaning your history (optional)&lt;/h4&gt;

&lt;p&gt;When you&amp;rsquo;re ready to merge, you should first clean up the feature
branch.&lt;/p&gt;

&lt;p&gt;If there are any commits on the destination branch that aren&amp;rsquo;t on your
feature branch then you should rebase to avoid a merge commit. You can
check for such commits using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git log ..master
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This shows all commits on &amp;lsquo;master&amp;rsquo; that aren&amp;rsquo;t in your current branch
history. If you see any commits here, then rebase the feature branch
using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git rebase master
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This replays your commits on top of the new commits from the destination
branch so that the merge can be a &amp;lsquo;fast-forward&amp;rsquo;.&lt;/p&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
    Hang on! Aren&#39;t you rewriting history that has been pushed?

    Yes - that&#39;s true. However, when the remote branch is &lt;em&gt;temporary&lt;/em&gt; as for
    a pull request, this is ok (as far as I can tell). The pull request
    branch should be deleted once it has been merged and so it shouldn&#39;t
    matter that its history is being rewritten before merging.
&lt;/div&gt;

&lt;p&gt;Next, it may be desirable to squash your commits into larger cohesive
commits. You can do this using an &amp;lsquo;interactive&amp;rsquo; rebase:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git rebase -i master
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will open &lt;code&gt;$EDITOR&lt;/code&gt; with all commits since &amp;lsquo;master&amp;rsquo; listed. You can
then reorder and squash these commits, as well as rewording the commit
messages. Be careful, this can become quite addictive.&lt;/p&gt;

&lt;p&gt;One thing you can do is adjust the final commit message on your feature
branch to close the pull request automatically. Simply add &amp;lsquo;Fixes #123&amp;rsquo;
(using the ID from the pull request URL) at the bottom of the message.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git commit --amend
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/831-issues-2-0-the-next-generation&#34;&gt;Github issues 2.0: The Next
Generation&lt;/a&gt; -
An overview of Github issues with an explanation of how to close,
reopen and reference pull requests from within commit messages.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://learn.github.com/p/rebasing.html&#34;&gt;Github help: Rebasing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/interactive-rebase&#34;&gt;Github help: Interactive
rebasing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;merging&#34;&gt;Merging&lt;/h4&gt;

&lt;p&gt;Finally, you can merge your cleaned-up feature branch with a
fast-forward merge:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git checkout master
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git merge feature/masquerading
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, you can force a merge commit to keep track of which
commits came from the feature branch.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git checkout master
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git merge --no-ff feature/masquerading
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you view the your history as a graph, you will be able to tell
which commits were from the feature branch.&lt;/p&gt;

&lt;p&gt;Now delete the local and remote feature branches:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git branch -D feature/masquerading
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git push origin :feature/masquerading
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/using-pull-requests&#34;&gt;Using pull
requests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;other-good-practices&#34;&gt;Other good practices&lt;/h2&gt;

&lt;h3 id=&#34;care-about-your-history&#34;&gt;Care about your history&lt;/h3&gt;

&lt;p&gt;Strive for a clean, coherent history. Write &lt;a href=&#34;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&#34;&gt;good commit
messages&lt;/a&gt;,
adhering to the 50 char summary followed by a longer description. Avoid
unneccessary merge commits as they clutter up your history.&lt;/p&gt;

&lt;p&gt;As we saw above, if you haven&amp;rsquo;t pushed your branch to a stable remote
branch, you can rewrite it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;git rebase&lt;/code&gt; to rebase your feature branch against the branch
you intend to merge into. This means that when you merge, it will be
a so-called &amp;lsquo;fast forward&amp;rsquo; merge which avoids a merge commit.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git rebase -i&lt;/code&gt; to rewrite your branch history, squashing
related commits, rewording commit messages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;build-an-audit-trail&#34;&gt;Build an audit trail&lt;/h3&gt;

&lt;p&gt;Try and build a good audit trail - your future self will be grateful.
Where possible cross-reference other resources in your commit messages.
These could be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Github pull requests or issues (eg &amp;ldquo;Related to #123&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Mailing-list threads that discuss the work in question (try and use
mailing list software that lets you link to a discussion). If you
use Basecamp or something similar, link to the relevant discussion.&lt;/li&gt;
&lt;li&gt;Articles or blog posts relevant to your work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically anything that might be useful 12 months later when you&amp;rsquo;re
trying to work out the reasoning behind some component.&lt;/p&gt;

&lt;p&gt;One thing, I try to do with
&lt;a href=&#34;https://github.com/tangentlabs/django-oscar&#34;&gt;django-oscar&lt;/a&gt; (a project
of mine) is to maintain an audit trail from a commit all the way back to
the mailing list discussion that instigated it. This works as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you&amp;rsquo;re puzzled by a particular line within a file, use
&lt;code&gt;git blame&lt;/code&gt; to find the commit that introduced it.&lt;/li&gt;
&lt;li&gt;The commit message should explain the change that led to this line
and link back to a pull request.&lt;/li&gt;
&lt;li&gt;The pull request should be a set of related commits that together
implement a new feature. The pull request description should be a
functional spec for the feature in question, together with a link to
the mailing list thread where this feature was discussed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I haven&amp;rsquo;t been following this process for long, but it seems to work
well.&lt;/p&gt;

&lt;h3 id=&#34;use-your-prompt&#34;&gt;Use your prompt&lt;/h3&gt;

&lt;p&gt;Put relevant git information into your prompt - this will make your life
easier. Here&amp;rsquo;s a bash snippet for adding the current git branch to your
prompt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# ~/.bashrc&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; parse_git_branch &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    git branch --no-color &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&amp;gt; /dev/null &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sed -e &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/^[^*]/d&amp;#39;&lt;/span&gt; -e &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;s/* \(.*\)/(\1) /&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;PS1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\[\e[32m\]\$(parse_git_branch)\[\e[34m\]\h:\W \$ \[\e[m\]&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; PS1
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;use-aliases-for-speed&#34;&gt;Use aliases for speed&lt;/h3&gt;

&lt;p&gt;Strive to be as productive as possible at the commandline. For me, that
means minimising key strokes.&lt;/p&gt;

&lt;p&gt;With git, you can define both git- and bash-aliases to make your life
easier. I have lots (listed below). Two are worth highlighting:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I alias &lt;code&gt;git status -sb&lt;/code&gt; to &lt;code&gt;g&lt;/code&gt; so I can quickly check git status.
This is my most frequently typed command so it makes sense to make
it easy.&lt;/li&gt;
&lt;li&gt;Like many others, I use a customised version of &lt;code&gt;git log&lt;/code&gt; that lists
one commit per line, but annotated with other useful information
such as which commits other branches point to. See the definition of
&lt;code&gt;git hist&lt;/code&gt; below.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Selected aliases from &lt;code&gt;~/.gitconfig&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;[alias]&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;hist&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;log --color --pretty=format:\&amp;quot;%C(yellow)%h%C(reset) %s%C(bold red)%d%C(reset) %C(green)%ad%C(reset) %C(blue)[%an]%C(reset)\&amp;quot; --relative-date --decorate&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    unstage = reset HEAD --&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    restore = checkout --&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    cn = commit --no-verify&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    co = checkout&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    praise = blame&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    visualise = !gitk&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    graph = log --color --graph --pretty=format:\&amp;quot;%h | %ad | %an | %s%d\&amp;quot; --date=short&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And from &lt;code&gt;~/.bash_aliases&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;hub&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git status -sb&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gh&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git hist&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gp&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git pull&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gpr&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git pull --rebase&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gpp&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git pull --rebase &amp;amp;&amp;amp; git push&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gf&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git fetch&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gb&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git branch&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ga&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git add&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git commit&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gca&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git commit --amend&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gcv&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git commit --no-verify&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gd&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git diff --color-words&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gdc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git diff --cached -w&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gdw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git diff --no-ext-diff --word-diff&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gdv&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git diff&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gl&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git log --oneline --decorate&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git tag&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;grc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git rebase --continue&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;grs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git rebase --skip&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gsl&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git stash list&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gss&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git stash save&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>csvfilter - a Python command-line tool for manipulating CSV data</title>
      <link>http://codeinthehole.com/projects/csvfilter-a-python-command-line-tool-for-manipulating-csv-data/</link>
      <pubDate>Sun, 01 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/projects/csvfilter-a-python-command-line-tool-for-manipulating-csv-data/</guid>
      <description>

&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;You want a unix-like tool for manipulating CSV data from the
command-line.&lt;/p&gt;

&lt;p&gt;The standard tools &lt;code&gt;cut&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt; aren&amp;rsquo;t always suitable as they don&amp;rsquo;t
handle quoting and escaping which are common in CSVs.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Use the CSV manipulation function &lt;code&gt;csvfilter&lt;/code&gt;, a simple Python library
I&amp;rsquo;ve put together.&lt;/p&gt;

&lt;p&gt;Install with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;pip install csvfilter
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sample usage:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# Pluck columns 2, 5 and 6&lt;/span&gt;
cat in.csv &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; csvfilter -f &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;,5,6 &amp;gt; out.csv

&lt;span style=&#34;color: #75715e&#34;&gt;# Pluck all columns except 4&lt;/span&gt;
cat in.csv &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; csvfilter -f &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt; -i &amp;gt; out.csv

&lt;span style=&#34;color: #75715e&#34;&gt;# Skip header row&lt;/span&gt;
cat in.csv &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; csvfilter -s &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &amp;gt; out.csv

&lt;span style=&#34;color: #75715e&#34;&gt;# Work with pipe-separated data&lt;/span&gt;
cat in.csv &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; csvfilter -s &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;,3 --delimiter&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;|&amp;quot;&lt;/span&gt; &amp;gt; out.csv
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above examples show &lt;code&gt;csvfilter&lt;/code&gt; processing &lt;code&gt;sys.STDIN&lt;/code&gt; but it can
also act directly on a file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;csvfilter -f &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;,5,6 in.csv  &amp;gt; out.csv
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Help:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ csvfilter --help
Usage: csvfilter &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;options&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;

Options:
-h, --help            show this &lt;span style=&#34;color: #f8f8f2&#34;&gt;help&lt;/span&gt; message and &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt;
-f FIELDS, --fields&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;FIELDS
                        Specify which fields to pluck
-s SKIP, --skip&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;SKIP  Number of rows to skip
-d DELIMITER, --delimiter&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;DELIMITER
                        Delimiter of incoming CSV data
-i, --inverse         Invert the filter - ie drop the selected fields
--out-delimiter&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;OUT_DELIMITER
                        Delimiter to use &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; output
--out-quotechar&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;OUT_QUOTECHAR
                        Quote character to use &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; output
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is also a simple python API that allows you to add validators to
determine which rows are filtered out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;csvfilter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Processor&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;contains_cheese&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(row):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;cheese&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;row&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;processor&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Processor(fields&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;processor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;add_validator(contains_cheese)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;generator&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;processor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;process(sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cheesy_row&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;generator:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;do_something(cheesy_row)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s possible to do basic CSV manipulation from the command-line using
&lt;code&gt;cut&lt;/code&gt; or &lt;code&gt;awk&lt;/code&gt; - for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cat in.csv &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; cut -d &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; -f &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;,1,2 &amp;gt; out.csv
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or :&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cat in.csv &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;BEGIN {FS=&amp;quot;,&amp;quot;} {print $1,$2,$3}&amp;#39;&lt;/span&gt; &amp;gt; out.csv
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However neither &lt;code&gt;cut&lt;/code&gt; or &lt;code&gt;awk&lt;/code&gt; make it easy to handle CSVs with escaped
characters - hence the motivation for this tool.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not the first to write such a utility - there are several others out
there (although none had quite the API I was looking for):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/neilb/csvfix/src&#34;&gt;csvfix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pypi.python.org/pypi/dropcols&#34;&gt;dropcols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/onyxfish/csvkit&#34;&gt;csvkit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/codeinthehole/csvfilter&#34;&gt;Source available on Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Auto-setting terminal titles for python virtual environments</title>
      <link>http://codeinthehole.com/tips/auto-setting-terminal-titles-for-python-virtual-environments/</link>
      <pubDate>Mon, 23 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/auto-setting-terminal-titles-for-python-virtual-environments/</guid>
      <description>

&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;re a python hacker using virtualenv and virtualenvwrapper on a range
of projects. After a few hours in the office and much context switching,
your terminal emulator is bursting with open tabs with the unhelpful
title &amp;lsquo;bash&amp;rsquo; and it&amp;rsquo;s difficult to remember which tab is for which
project. This is making you unhappy.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Use your &lt;code&gt;postactivate&lt;/code&gt;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; script to set the terminal title when you
activate a virtual environment. Add something similar to the following
to your &lt;code&gt;postactivate&lt;/code&gt; script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;TITLE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;codeinthehole.com&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; -ne &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\033]0;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$TITLE&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;\007&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then whenever you start working on a project (using &lt;code&gt;workon&lt;/code&gt;), your tab
title will be labelled correctly.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;which will be somewhere like
&lt;code&gt;~/.virtualenvs/yourproject/bin/postactivate&lt;/code&gt;.&lt;/p&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Commandlinefu presentation at Confoo 2011</title>
      <link>http://codeinthehole.com/talks/commandlinefu-presentation-at-confoo-2011/</link>
      <pubDate>Sat, 12 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/talks/commandlinefu-presentation-at-confoo-2011/</guid>
      <description>&lt;p&gt;The presentation I gave at &lt;a href=&#34;http://confoo.ca/en&#34;&gt;Confoo 2011&lt;/a&gt; is now
&lt;a href=&#34;http://presentations.codeinthehole.com/confoo2011/&#34;&gt;available online&lt;/a&gt;,
there is feedback on &lt;a href=&#34;http://joind.in/talk/view/2896&#34;&gt;joind.in&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://codeinthehole.com/images/clf-presentation.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The slides are written in &lt;a href=&#34;http://meyerweb.com/eric/tools/s5/&#34;&gt;Eric Meyer&amp;rsquo;s
S5&lt;/a&gt;, which is a XHTML, CSS and
Javascript based slide show format. I enjoyed using this as it was easy
to port my styles across from the website CSS file, it also means the
presentation is viewable as a normal webpage (no flash required).
However, the downside is that it is not easy to submit the slides to
Slideshare which is the common thing to do. There are a few work-arounds
out there but nothing good enough that I could find.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mysqldump with wildcard table matching</title>
      <link>http://codeinthehole.com/tips/mysqldump-with-wildcard-table-matching/</link>
      <pubDate>Fri, 05 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/mysqldump-with-wildcard-table-matching/</guid>
      <description>&lt;p&gt;Ever wanted to use &lt;code&gt;mysqldump&lt;/code&gt; to dump tables that match a wildcard
pattern? I have. It&amp;rsquo;s not currently supported as an option but can be
achieved with a little bash magic. Here&amp;rsquo;s how:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/bin/bash&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$#&lt;/span&gt; -lt &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;then&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Usage: `basename &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$0&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;` database wildcardpattern&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Eg: `basename &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$0&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;` mydatabase App_%&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;database&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$1&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;pattern&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$2&lt;/span&gt;
mysqldump &lt;span style=&#34;color: #f8f8f2&#34;&gt;$database&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;mysql -ND &lt;span style=&#34;color: #f8f8f2&#34;&gt;$database&lt;/span&gt; -e &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;SHOW TABLES LIKE &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$pattern&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;{printf $1&amp;quot; &amp;quot;}&amp;#39;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This uses a simple SQL query to extract all the table names that match
the pattern and concatenate them in the format that mysqldump expects.
Note that you&amp;rsquo;ll need your &lt;code&gt;~/.my.cnf&lt;/code&gt; set up correctly to allow the
connections to MySQL to happen without a authentication prompt.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Phing trick for avoiding deploying debug code</title>
      <link>http://codeinthehole.com/tips/phing-trick-for-avoiding-deploying-debug-code/</link>
      <pubDate>Sun, 22 Aug 2010 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/phing-trick-for-avoiding-deploying-debug-code/</guid>
      <description>&lt;p&gt;As the saying goes:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Fool me once, shame on you; fool me twice, shame on me&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Ensuring mistakes aren&amp;rsquo;t repeated is a commonplace activity for any
development team. This can manifest itself in many ways such as writing
regression tests, stepping up your code reviews, adding stories to a
testing plan or humiliating the developer in question through use of an
unusual (dunce&amp;rsquo;s) hat.&lt;/p&gt;

&lt;p&gt;We had an issue recently where some debugging code got committed and
wasn&amp;rsquo;t picked up during testing. Naturally, this code was picked up once
it hit the production environment, we put rapidly put a patch in place.
An embarrassing moment but the kind of thing that happens from time to
time down in the trenches.&lt;/p&gt;

&lt;p&gt;One possible remedy for this would be to add a new sniff to the in-house
coding standard (which is tested using the &lt;a href=&#34;http://pear.php.net/package/PHP_CodeSniffer/redirected&#34;&gt;PEAR code
sniffer&lt;/a&gt; on a
SVN pre-commit hook) to look for debugging code and block the commit if
any is found. However, a quicker solution was to modify our deployment
scripts to search the codebase and bail out if any debug code was found.
We use phing as our deployment tool -here&amp;rsquo;s the appropriate section from
our build file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;echo&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;msg=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Checking codebase for use of var_dump()&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;exec&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;command=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;[ `find ${folder.app.export}/classes -name &amp;#39;*.php&amp;#39; | xargs grep -nr &amp;#39;\(^\s*|\s\+\)var_dump(.*\?);&amp;#39; | wc -l` -eq 0 ]&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;dir=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;checkreturn=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;true&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The command here is grepping all PHP files within the SVN export for
occurrences of var_dump. If any such matching lines are found then a
non-zero exit will be returned and the build will fail. We haven&amp;rsquo;t had
such an issue since.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The most important command-line tip - incremental history searching with .inputrc</title>
      <link>http://codeinthehole.com/tips/the-most-important-command-line-tip-incremental-history-searching-with-inputrc/</link>
      <pubDate>Tue, 03 Feb 2009 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/the-most-important-command-line-tip-incremental-history-searching-with-inputrc/</guid>
      <description>&lt;p&gt;Getting www.commandlinefu.com off the ground has renewed my interest in
Bash, UNIX and all things command-line. Powerful one-liners are things
of beauty and are worth collecting; however what I consider to be the
most influential command-line tip I know covers four:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\e[A&amp;quot;&lt;/span&gt;: history-search-backward
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\e[B&amp;quot;&lt;/span&gt;: history-search-forward
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\e[C&amp;quot;&lt;/span&gt;: forward-char
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\e[D&amp;quot;&lt;/span&gt;: backward-char
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These lines need to be placed in your &lt;code&gt;~/.inputrc&lt;/code&gt; file, the start-up
script for the Readline utility used by Bash (as well as several other
applications) and others). The important commands here are the first
two, which bind your up and down cursor keys to incrementally search
your history. (The second two ensure that left and right continue to
work correctly).&lt;/p&gt;

&lt;p&gt;This is &lt;em&gt;incredibly useful&lt;/em&gt; for retrieving commands you&amp;rsquo;ve used
previously and makes a huge difference to your productivity. For
instance, to find a previous SSH command from a few days ago, simply
type &amp;ldquo;ss&amp;rdquo; and press up a few times. This will allow you to browse
through all your previous ssh… commands until you find the right one -
you never need to use more than 4 or 5 keystrokes to retrieve any
previous command. If your cycling through too many commands to find the
right one, type in a few more characters to refine the search.&lt;/p&gt;

&lt;p&gt;As indicated above, this functionality is available in all applications
that use Readline including MySQL, Python, IRB (interactive Ruby shell)
and others. Once you&amp;rsquo;re used to this feature, it&amp;rsquo;s hard to live without
- the first thing I do once I&amp;rsquo;ve been set up as a user on a new server
is update my .inputrc file to contain these settings. The one place
where I sorely wish this functionality existed is the Firebug Javascript
commandline in Firefox (a ticket already exists requesting a similar
feature).&lt;/p&gt;

&lt;p&gt;Another way of searching your history is to use CTRL+R, which
essentially performs a full-text search on your history (keep pressing
CTRL+R to cycle through results). In this case, searching for &amp;ldquo;ssh&amp;rdquo; will
locate all commands that feature this string anywhere in the command.
Although this is actually a more powerful feature than the incremental
history search described above, I don&amp;rsquo;t often use it as: (a) the
incremental search generally lets me jump to the desired command in
fewer key-presses and (b) I find &amp;ldquo;ssh&amp;rdquo;, CTRL+R, CTRL+R slightly awkward
to type and less intuitive than &amp;ldquo;ssh&amp;rdquo;, UP, UP. Horses for courses really
- you could probably be just as efficient with either one.&lt;/p&gt;

&lt;p&gt;» Hat-tip to the place where I first learnt this: &lt;a href=&#34;http://www.ukuug.org/events/linux2003/papers/bash_tips/&#34;&gt;Power Shell
Usage&lt;/a&gt; by Simon
Myers&lt;/p&gt;

&lt;p&gt;One extra thing: this functionality can be neatly complimented by some
choice history settings in your &lt;code&gt;~/.bashrc&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;HISTSIZE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1000000&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;HISTFILESIZE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1000000000&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These simply set your history to be very large so that you have a huge
bank of commands to search.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Current pet project: Command-Line-Fu</title>
      <link>http://codeinthehole.com/projects/current-pet-project-command-line-fu/</link>
      <pubDate>Thu, 22 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/projects/current-pet-project-command-line-fu/</guid>
      <description>&lt;p&gt;&lt;img src=&#34;http://codeinthehole.com/images/screenshots/tomboy-commands-small.jpg&#34; class=&#34;align-right&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re anything like me, you spend a lot of time at the UNIX
command-line manipulating the filesystem, configuring Linux, playing
with services and so forth. As any UNIX user knows, tremendous power can
be wielded through judicious function selection, piping and output
redirection. It&amp;rsquo;s often quite staggering what can be achieved in a
single line given a rudimentary knowledge of sed, grep, awk, cut…&lt;/p&gt;

&lt;p&gt;Indeed, when I stumble upon a line of particular elegance or usefulness,
I generally log them to a &lt;a href=&#34;http://projects.gnome.org/tomboy/&#34;&gt;Tomboy
note&lt;/a&gt; (fired up in a flash using
&lt;a href=&#34;http://do.davebsd.com/&#34;&gt;Gnome-do&lt;/a&gt;). This has proved extremely useful as
I am often returning to the list to recall how to, say, rsync a fileset
with an exclude list - it&amp;rsquo;s generally faster than Googling or going to
the man pages. As time has progressed though, this small repository has
grown into a sizable collection and finding a particular command quickly
is now a problem. Motivated by this problem and taking inspiration from
my daily reading (&lt;a href=&#34;http://news.ycombinator.com/&#34;&gt;Hacker News&lt;/a&gt;,
&lt;a href=&#34;http://www.reddit.com/r/programming/&#34;&gt;Programming Reddit&lt;/a&gt; and &lt;a href=&#34;http://stackoverflow.com/&#34;&gt;Stack
Overflow&lt;/a&gt;), I&amp;rsquo;m in the process of putting
together a lightweight web-app for cataloguing and ranking notable UNIX
one liners.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://codeinthehole.com/images/screenshots/clf-small.jpg&#34; class=&#34;align-right&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The basic idea is for users to be able to store their useful one liners
on the site for (a) retrieval in the future and (b) sharing with others
who undoubtedly will need to save the same problem. Once created, these
commands are parsed for the functions used and any relevant tags to
provide good navigational props. The individual commands also be
discussed and commented on. Further, users can vote on each others
commands allowing simple leaderboards to be constructed. After a few
months, it will be interesting to see what the top 10 most useful awk
commands are.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s only been a week (working piecemeal after dinner) but the site&amp;rsquo;s
nearly ready for a beta release. It&amp;rsquo;s constructed using a combination of
CodeIgniter and Zend Framework, making use of the fast and lightweight
nature of CodeIgniter coupled with the extensive range of components
that ZF provides. The site&amp;rsquo;s called &lt;a href=&#34;http://www.commandlinefu.com&#34;&gt;http://www.commandlinefu.com&lt;/a&gt; and
should be live in about a week assuming I find some spare time over the
weekend. Watch this space.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Checking all MySQL tables</title>
      <link>http://codeinthehole.com/tips/checking-all-mysql-tables/</link>
      <pubDate>Sun, 23 Nov 2008 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/checking-all-mysql-tables/</guid>
      <description>&lt;p&gt;It&amp;rsquo;s well known that MyISAM tables are prone to corruption and need to
be regularly checked and repaired. Moreover, in a production
environment, it can be beneficial to run a daily check of all tables and
mail news of any errors to an appropriate developer/DBA.&lt;/p&gt;

&lt;p&gt;There are two options for checking MySQL tables. The most effective
method is to run the &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.0/en/myisamchk.html&#34;&gt;myisamchk
utility&lt;/a&gt; directly
on the index files (&lt;code&gt;.MYI&lt;/code&gt;) of the tables in question (some simple shell
expansion makes this easy):&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;myisamchk --silent --fast /path/to/datadir/*/*.MYI
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However, this proses a problem in that you must ensure that no other
programs are accessing the tables while they are being checked. Hence
they must be locked, or better still, the MySQL daemon stopped before
running any checks. Perversely, if this is not done, the act of checking
the tables can corrupt them.&lt;/p&gt;

&lt;p&gt;Another option is to use the &lt;code&gt;CHECK TABLE&lt;/code&gt; syntax in SQL (which does not
pose a risk of corruption). There are various scripts (written in PHP
and bash) posted on the &lt;code&gt;CHECK TABLE&lt;/code&gt; &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.0/en/check-table.html&#34;&gt;manual
page&lt;/a&gt; but this
operation can be done easily through a single line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;mysql -p&amp;lt;password&amp;gt; -D&amp;lt;database&amp;gt; -B -e &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;SHOW TABLES&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;{print &amp;quot;CHECK TABLE &amp;quot;$1&amp;quot;;&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; mysql -p&amp;lt;password&amp;gt; -D&amp;lt;database&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This dynamically creates a list of &lt;code&gt;CHECK TABLE ...&lt;/code&gt; commands which is
piped into MySQL for execution.&lt;/p&gt;

&lt;p&gt;For checking a selection of tables rather than all, use the LIKE
operator when selecting the tables to check:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;mysql -p&amp;lt;password&amp;gt; -D&amp;lt;database&amp;gt; -B -e &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;SHOW TABLES LIKE &amp;#39;User%&amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;NR != 1 {print &amp;quot;CHECK TABLE &amp;quot;$1&amp;quot;;&amp;quot;}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; mysql -p&amp;lt;password&amp;gt; -D&amp;lt;database&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This only checks the tables that start &amp;lsquo;User&amp;rsquo;. Note that the awk program
has an extra clause to ensure that the first line of MySQL output is
skipped.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monitoring MySQL</title>
      <link>http://codeinthehole.com/tips/monitoring-mysql/</link>
      <pubDate>Sun, 26 Oct 2008 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/monitoring-mysql/</guid>
      <description>&lt;p&gt;Just a quick tip on monitoring the queries that mysql is handling on a
production site. You can use the mysqladmin tool to return a list of the
processes currently being handled. Combining this with the UNIX watch
command allows a real-time monitoring of what&amp;rsquo;s going on.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;watch -n &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; mysqladmin processlist
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;-n 1&lt;/code&gt; specifies that mysqladmin executes every second. Depending on
your set-up, you may need to specify a mysql user and password:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;watch -n &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; mysqladmin --user&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&amp;lt;user&amp;gt; --password&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&amp;lt;password&amp;gt; processlist
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>