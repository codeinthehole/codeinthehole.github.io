<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on David Winterbottom</title>
    <link>http://codeinthehole.com/tags/git/index.xml</link>
    <description>Recent content in Git on David Winterbottom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://codeinthehole.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>A useful template for commit messages</title>
      <link>http://codeinthehole.com/tips/a-useful-template-for-commit-messages/</link>
      <pubDate>Fri, 02 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/a-useful-template-for-commit-messages/</guid>
      <description>&lt;p&gt;Here&amp;rsquo;s a useful heuristic for writing better commit messages. Set your
commit message template to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;# If applied, this commit will...

# Explain why this change is being made

# Provide links to any relevant tickets, articles or other resources
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and you&amp;rsquo;ll be guided into writing concise commit subjects in the
imperative mood - a good practice. See rule 5 of Chris Beam&amp;rsquo;s &lt;a href=&#34;http://chris.beams.io/posts/git-commit/&#34;&gt;&amp;ldquo;How to
write a commit message&amp;rdquo;&lt;/a&gt; for
the inspiration of this tip and more reasoning on the use of the
imperative mood.&lt;/p&gt;

&lt;p&gt;To do this in Git, save the above content in a file (eg
&lt;code&gt;~/.git_commit_msg.txt&lt;/code&gt;) and run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git config --global commit.template ~/.git_commit_msg.txt
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s what this looks like in practice:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://codeinthehole.com/images/git-commit-snap.png&#34; width=&#34;800px&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Try it - it&amp;rsquo;s genuinely useful.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linking to Github</title>
      <link>http://codeinthehole.com/tips/linking-to-github/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/linking-to-github/</guid>
      <description>&lt;p&gt;It was rightly &lt;a href=&#34;http://andrew.yurisich.com/work/2014/07/16/dont-link-that-line-number/&#34;&gt;pointed out
yesterday&lt;/a&gt;
that it&amp;rsquo;s dangerous to link to lines or blocks of code on Github without
explicitly specifying the commit hash in the URL. On this theme,
consider this git command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git browse -u -- commit/&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;git rev-parse HEAD&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
https://github.com/tangentlabs/django-oscar/commit/17851d4b66922f8d7e203e2b469040690c84a0db
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This emits the Github URL to the &lt;code&gt;HEAD&lt;/code&gt; commit on the current branch,
specifying the commit hash in the URL. Note that the &lt;code&gt;browse&lt;/code&gt; subcommand
is provided by the excellent &lt;a href=&#34;https://hub.github.com/&#34;&gt;hub&lt;/a&gt; library.&lt;/p&gt;

&lt;p&gt;Pasting links to commits is common, both for mailing list posts and
within discussion on Github itself. Getting the correct URL quickly is
useful.&lt;/p&gt;

&lt;p&gt;We can streamline further using an alias:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# ~/.gitconfig&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;alias&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; !hub browse -u -- commit/&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;git rev-parse HEAD&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;so we can run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git url
https://github.com/tangentlabs/django-oscar/commit/17851d4b66922f8d7e203e2b469040690c84a0db
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to get the expanded &lt;code&gt;HEAD&lt;/code&gt; URL. Even better, we can parameterise:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# ~/.gitconfig&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;alias&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;!f() { sha=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;git rev-parse &lt;span style=&#34;color: #e6db74&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;:-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;HEAD&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;; hub browse -u -- commit/&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$sha&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;; }; f&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;so we can now specify a commit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git url
https://github.com/tangentlabs/django-oscar/commit/17851d4b66922f8d7e203e2b469040690c84a0db

$ git url head
https://github.com/tangentlabs/django-oscar/commit/17851d4b66922f8d7e203e2b469040690c84a0db

$ git url head^
https://github.com/tangentlabs/django-oscar/commit/f49d055befc90897c030e0447a98d512cca4265b
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Several times a day, I run one of the above, piping the output into the
clipboard for easy pasting:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git url &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; clipboard
https://github.com/tangentlabs/django-oscar/commit/17851d4b66922f8d7e203e2b469040690c84a0db
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# ~/.bashrc&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;clipboard&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;pbcopy&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color: #75715e&#34;&gt;# osx clipboard&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s a few more useful git aliases based on the &lt;code&gt;browse&lt;/code&gt; subcommand:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# ~/.gitconfig&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;alias&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;commits&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; !hub browse -- commits
&lt;span style=&#34;color: #f8f8f2&#34;&gt;issues&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; !hub browse -- issues
&lt;span style=&#34;color: #f8f8f2&#34;&gt;wiki&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; !hub browse -- wiki
&lt;span style=&#34;color: #f8f8f2&#34;&gt;settings&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; !hub browse -- settings
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Command-line tips for effective release announcements</title>
      <link>http://codeinthehole.com/tips/command-line-tips-for-effective-release-announcements/</link>
      <pubDate>Thu, 16 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/command-line-tips-for-effective-release-announcements/</guid>
      <description>

&lt;p&gt;We finally &lt;a href=&#34;http://django-oscar.readthedocs.org/en/latest/releases/v0.6.html&#34;&gt;released Oscar
0.6&lt;/a&gt;
last week. The process brought home the importance of writing your
release notes as you go rather than at the end. It&amp;rsquo;s a real pain to
extract the key changes from 1200 commits spread over the last 8 months.
Lesson learnt.&lt;/p&gt;

&lt;p&gt;This article is largely a note-to-self in case I have to repeat the
process. However, if you do find yourself in a similar position, here
are a few command-line tricks for analysing your git history.&lt;/p&gt;

&lt;h3 id=&#34;analysing-codebase-changes-since-a-tag&#34;&gt;Analysing codebase changes since a tag&lt;/h3&gt;

&lt;p&gt;Basics: browse commits since the last tagged release&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git log &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;--name-status&lt;/code&gt; option for &lt;code&gt;git diff&lt;/code&gt; is useful for analysing
codebase changes between two commits. For instance, you can view changes
to a particular directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git diff --name-status &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 oscar/apps/address
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which can be useful if thousands of files have changed and you want to
review each package individually.&lt;/p&gt;

&lt;p&gt;Extensions include finding deleted files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git diff --name-status &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;^D&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or all new migration files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git diff --name-status &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;^A.*migrations/[0-9]&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which is important for projects like Oscar which ship with database
migrations.&lt;/p&gt;

&lt;h3 id=&#34;determine-changes-template-block-names&#34;&gt;Determine changes template block names&lt;/h3&gt;

&lt;p&gt;Since Oscar allows customisation of templates and overriding template
blocks, we try and document any changes to template block names. The
process here is more involved and requires two temporary files generated
with this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ grep -or &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{% block .* %}&amp;quot;&lt;/span&gt; oscar/templates/oscar &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;BEGIN {FS=&amp;quot;:&amp;quot;} {split($2, parts, &amp;quot; &amp;quot;); print $1, parts[3]}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This writes out each pairs of filename and template block name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;oscar/templates/oscar/403.html title
oscar/templates/oscar/403.html error_heading
oscar/templates/oscar/403.html error_message
oscar/templates/oscar/404.html title
oscar/templates/oscar/404.html error_heading
oscar/templates/oscar/404.html error_message
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To compare the template blocks from each release, we create two
temporary files and analyse the diff:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git checkout &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5
$ grep -or &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{% block .* %}&amp;quot;&lt;/span&gt; oscar/templates/oscar &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;BEGIN {FS=&amp;quot;:&amp;quot;} {split($2, parts, &amp;quot; &amp;quot;); print $1, parts[3]}&amp;#39;&lt;/span&gt; &amp;gt;
    /tmp/templates-0.5.txt
$ git checkout &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.6
$ grep -or &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{% block .* %}&amp;quot;&lt;/span&gt; oscar/templates/oscar &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;BEGIN {FS=&amp;quot;:&amp;quot;} {split($2, parts, &amp;quot; &amp;quot;); print $1, parts[3]}&amp;#39;&lt;/span&gt; &amp;gt;
    /tmp/templates-0.6.txt
$ vimdiff /tmp/templates-0.&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;,6&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;.txt
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I imagine there&amp;rsquo;s a better way to do this but I couldn&amp;rsquo;t find one.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
    This is a Django specific technique, but the general approach is quite
    useful for analysing changes between two codebases.
&lt;/div&gt;

&lt;h3 id=&#34;updating-an-authors-files&#34;&gt;Updating an &lt;code&gt;AUTHORS&lt;/code&gt; files&lt;/h3&gt;

&lt;p&gt;Oscar&amp;rsquo;s &lt;code&gt;AUTHORS&lt;/code&gt; file contains all contributors with 15 or more commits
in the master branch. We generate this file automatically.&lt;/p&gt;

&lt;p&gt;You can sort authors by number of commits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git shortlog -sn master &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; head
  &lt;span style=&#34;color: #ae81ff&#34;&gt;2992&lt;/span&gt;  David Winterbottom
   &lt;span style=&#34;color: #ae81ff&#34;&gt;355&lt;/span&gt;  Maik Hoepfel
   &lt;span style=&#34;color: #ae81ff&#34;&gt;167&lt;/span&gt;  Sebastian Vetter
   &lt;span style=&#34;color: #ae81ff&#34;&gt;166&lt;/span&gt;  Jon Price
   &lt;span style=&#34;color: #ae81ff&#34;&gt;120&lt;/span&gt;  Andrew Ingram
    &lt;span style=&#34;color: #ae81ff&#34;&gt;73&lt;/span&gt;  Asia Biega
    &lt;span style=&#34;color: #ae81ff&#34;&gt;65&lt;/span&gt;  Oliver Randell
    &lt;span style=&#34;color: #ae81ff&#34;&gt;49&lt;/span&gt;  Eleni Lixourioti
  ...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and extend this to find authors with more than a certain number of
commits&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;THRESHOLD&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;
$ git shortlog -sn master &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;$1 &amp;gt;= $THRESHOLD {$1=&amp;quot;&amp;quot;;print $0}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; cut -d&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; -f2-
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note, &lt;code&gt;git shortlog&lt;/code&gt; uses a &lt;code&gt;.mailmap&lt;/code&gt; file to aggregate commits from
the same committer where their name or email were different in the
commit history.&lt;/p&gt;

&lt;p&gt;Using this command, we can create a new &lt;code&gt;AUTHORS&lt;/code&gt; file containing all
contributors with greater than 15 commits on the master branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git shortlog -ns master &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;$1 &amp;gt;= $THRESHOLD {$1=&amp;quot;&amp;quot;;print $0}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    cut -d&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; -f2- &amp;gt; AUTHORS
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;notifying-contributors&#34;&gt;Notifying contributors&lt;/h3&gt;

&lt;p&gt;If you have a patch accepted into a project, it&amp;rsquo;s useful to know when a
formal release has been cut that includes said patch. Before then, you
might be linking your project to a fork and maintaining a work-around
within your codebase.&lt;/p&gt;

&lt;p&gt;As the project maintainer, you might assume that such people are already
subscribed to your project mailing list, or following your project
Twitter stream. However, there&amp;rsquo;s a more thorough way to notify
contributors that their patch is in a release: you can email them.&lt;/p&gt;

&lt;p&gt;To do this, extract the email addresses of committers whose patches are
in the new release:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git log &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 --format&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;%aE&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; uniq
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and CC these addresses in your mailing list release announcement.&lt;/p&gt;

&lt;p&gt;Even better, you can only grab the addresses of &lt;em&gt;new&lt;/em&gt; contributors to
the project, where the release is the first to contain one of their
commits. We do this by extracting two lists of email addresses and
employing the lovely but neglected &lt;code&gt;comm&lt;/code&gt; command to pluck the email
addresses that only exist in the latest release:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ comm -13 &amp;lt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;git log &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5 --format&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;%aE&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; uniq&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    &amp;lt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;git log &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 --format&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;%aE&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; uniq&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the first input is all contributors up to release 0.5, while the
second is contibutors to the 0.6 release only.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;comm&lt;/code&gt; is an extremely useful command for selecting lines common between
two files, or exclusive to one. The &lt;code&gt;-13&lt;/code&gt; options indicate to exclude
lines exclusive to the first file (&lt;code&gt;-1&lt;/code&gt;) and lines common to both
(&lt;code&gt;-3&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;summarising-changes&#34;&gt;Summarising changes&lt;/h3&gt;

&lt;p&gt;If your release isn&amp;rsquo;t large, your release notes could include a summary
of the contained commits; this is useful for minor point releases. You
can use &lt;code&gt;git shortlog&lt;/code&gt; to do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git shortlog &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 --no-merges
David Winterbottom &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;661&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;:
      Add defaults to the counts on the product summary dashboard page
      Tidy up urls.py and settings.py
      Use mirrors when pip installing the demo site
      Install django-oscar-stores
      Add link to stores page in footer
...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can even use &lt;code&gt;--format&lt;/code&gt; to provide links to Github commits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git shortlog &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.3.4..0.4 --no-merges --format&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s (https://github.com/tangentlabs/django-oscar-stores/commit/%h)&amp;quot;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This won&amp;rsquo;t always be appropriate if your release if there are thousands
of commits.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Enhancing your git commit editor</title>
      <link>http://codeinthehole.com/tips/enhancing-your-git-commit-editor/</link>
      <pubDate>Thu, 08 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/enhancing-your-git-commit-editor/</guid>
      <description>&lt;p&gt;Confession: I am a pedant, especially around commit messages.&lt;/p&gt;

&lt;p&gt;I often find myself writing very similar commit messages (like &amp;ldquo;Bump
version to 0.4.3&amp;rdquo;) and want to ensure I use the same wording each time.
Thanks to &lt;a href=&#34;https://twitter.com/LuRsT&#34;&gt;@LuRsT&lt;/a&gt;, I learnt how to employ
git&amp;rsquo;s
&lt;a href=&#34;http://git-scm.com/book/en/Customizing-Git-Git-Hooks#Client-Side-Hooks&#34;&gt;prepare-commit-msg&lt;/a&gt;
hook to display the last 5 commit messages when I&amp;rsquo;m editing a commit
message.&lt;/p&gt;

&lt;p&gt;Use the following &lt;code&gt;.git/hooks/prepare-commit-msg&lt;/code&gt; hook:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/bin/sh&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;BRANCH_NAME&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;git branch &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sed &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;s/* //&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$BRANCH_NAME&lt;/span&gt; !&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;(no branch)&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;then&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;#&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$1&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;# Last 5 commit messages&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$1&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;# ----------------------&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$1&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;COMMITS&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;git log --pretty&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;format:&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;# %h %s [%an]&amp;quot;&lt;/span&gt; -5&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;${&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;COMMITS&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;}&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$1&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;then your default commit template looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://codeinthehole.com/images/screenshots/git-commit-editor.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Note, using &lt;code&gt;echo &amp;quot;${COMMITS}&amp;quot;&lt;/code&gt; (instead of &lt;code&gt;echo $COMMITS&lt;/code&gt;) ensures
newlines are preserved (which I learnt in &lt;a href=&#34;http://stackoverflow.com/questions/754395/losing-newline-after-assigning-grep-result-to-a-shell-variable&#34;&gt;this Stack Overflow
answer&lt;/a&gt;).
Also we don&amp;rsquo;t echo commit messages while rebasing as it has &lt;a href=&#34;http://gmurphey.com/2013/02/02/ignoring-git-hooks-when-rebasing.html&#34;&gt;strange
side-effects&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A useful Git post-checkout hook for Python repos</title>
      <link>http://codeinthehole.com/tips/a-useful-git-post-checkout-hook-for-python-repos/</link>
      <pubDate>Tue, 23 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/a-useful-git-post-checkout-hook-for-python-repos/</guid>
      <description>&lt;p&gt;Every now and again, an innocent python developer checks out a new Git
branch then proceeds to bang their head against a bug caused by an
orphaned &lt;code&gt;.pyc&lt;/code&gt; file from the previous branch. Since &lt;code&gt;*.pyc&lt;/code&gt; files are
typically in the repo&amp;rsquo;s &lt;code&gt;.gitignore&lt;/code&gt; file, they are not removed when
switching branches and can cause issues if the corresponding &lt;code&gt;.py&lt;/code&gt; is
removed.&lt;/p&gt;

&lt;p&gt;This can be neatly addressed through a &amp;lsquo;post checkout&amp;rsquo; hook which
deletes all such files. Here is such a script, which also removes empty
folders and prints a summary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Delete .pyc files and empty directories from root of project&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; ./&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;git rev-parse --show-cdup&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Clean-up&lt;/span&gt;
find . -name &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.DS_Store&amp;quot;&lt;/span&gt; -delete

&lt;span style=&#34;color: #f8f8f2&#34;&gt;NUM_PYC_FILES&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt; find . -name &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;*.pyc&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; wc -l &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; tr -d &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$NUM_PYC_FILES&lt;/span&gt; -gt &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;then&lt;/span&gt;
    find . -name &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;*.pyc&amp;quot;&lt;/span&gt; -delete
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\e[00;31mDeleted &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$NUM_PYC_FILES&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt; .pyc files\e[00m\n&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;NUM_EMPTY_DIRS&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt; find . -type d -empty &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; wc -l &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; tr -d &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$NUM_EMPTY_DIRS&lt;/span&gt; -gt &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;then&lt;/span&gt;
    find . -type d -empty -delete
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\e[00;31mDeleted &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$NUM_EMPTY_DIRS&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt; empty directories\e[00m\n&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sample output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://codeinthehole.com/images/screenshots/post-checkout.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Inspiration:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p&gt;Finally automated. Stop being bitten by
residual .pyc files when switching branches in git. &lt;a
href=&#34;http://t.co/JWZOst25Jy&#34;
title=&#34;http://stackoverflow.com/questions/1504724/a-git-hook-for-whenever-i-change-branches&#34;&gt;stackoverflow.com/questions/1504…&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Maik Hoepfel (@maikhoepfel) &lt;a
href=&#34;https://twitter.com/maikhoepfel/status/318437021221806080&#34;&gt;March 31,
2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
The above version is a extension of the snippets in the referenced
&lt;a href=&#34;http://stackoverflow.com/questions/1504724/a-git-hook-for-whenever-i-change-branches&#34;&gt;Stack Overflow
question&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Converting Github issues into pull requests</title>
      <link>http://codeinthehole.com/tips/converting-github-issues-into-pull-requests/</link>
      <pubDate>Mon, 04 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/converting-github-issues-into-pull-requests/</guid>
      <description>

&lt;p&gt;Using the &lt;a href=&#34;http://defunkt.io/hub/&#34;&gt;Hub&lt;/a&gt; library, it&amp;rsquo;s possible to
convert Github issues into pull requests. This gives rise to a useful
Github workflow which this article describes.&lt;/p&gt;

&lt;p&gt;This is nothing new; it&amp;rsquo;s been &lt;a href=&#34;http://www.topbug.net/blog/2012/03/25/attach-a-pull-request-to-an-existing-github-issue/&#34;&gt;written about
before&lt;/a&gt;.
However, this is something I do all the time whilst developing
&lt;a href=&#34;https://github.com/tangentlabs/django-oscar&#34;&gt;Oscar&lt;/a&gt; and I&amp;rsquo;m fed up with
explaining it. This article is a reference I can point people at.&lt;/p&gt;

&lt;h3 id=&#34;workflow&#34;&gt;Workflow&lt;/h3&gt;

&lt;h4 id=&#34;discuss&#34;&gt;Discuss&lt;/h4&gt;

&lt;p&gt;Discuss an idea for a new feature on the project mailing list. Agree on
what needs to be done.&lt;/p&gt;

&lt;h4 id=&#34;specify&#34;&gt;Specify&lt;/h4&gt;

&lt;p&gt;Create a Github issue for the feature.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s often useful to write the ticket as a brief functional spec,
documenting the requirements as user stories. Github&amp;rsquo;s &lt;a href=&#34;https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments&#34;&gt;support for
checkboxes in
markdown&lt;/a&gt;
is useful here:&lt;/p&gt;

&lt;h4 id=&#34;work&#34;&gt;Work&lt;/h4&gt;

&lt;p&gt;Create a feature branch to work on this issue:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git checkout -b issue/472/django1.5
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I find it helpful to include the issue number in the branch name but
that might not be to your taste.&lt;/p&gt;

&lt;p&gt;Work and commit onto your branch as normal.&lt;/p&gt;

&lt;h4 id=&#34;review&#34;&gt;Review&lt;/h4&gt;

&lt;p&gt;Now push to the remote:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;issue/472/django1.5&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git push -u origin issue/472/django1.5
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and attach your commits to the original issue, thereby converting it
into a pull request.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;issue/472/django1.5&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ hub pull-request -i &lt;span style=&#34;color: #ae81ff&#34;&gt;472&lt;/span&gt; -h tangentlabs:issue/472/django1.5
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code&gt;tangentlabs&lt;/code&gt; is the Github username of the owner of the &lt;code&gt;origin&lt;/code&gt;
remote.&lt;/p&gt;

&lt;p&gt;Note the issue branch was pushed to the &lt;code&gt;origin&lt;/code&gt; remote rather than a
fork. This is convenient as it lets other developers add commits to the
pull request.&lt;/p&gt;

&lt;h4 id=&#34;iterate&#34;&gt;Iterate&lt;/h4&gt;

&lt;p&gt;The pull request can now be code-reviewed and further commits added.
This process continues until the issue is resolved and can be merged
into &lt;code&gt;master&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;notes&#34;&gt;Notes&lt;/h3&gt;

&lt;p&gt;Hub&amp;rsquo;s &lt;code&gt;pull-request&lt;/code&gt; command is useful yet relatively unknown. The &lt;code&gt;-i&lt;/code&gt;
flag indicates the Github issue number while &lt;code&gt;-h&lt;/code&gt; specifies the source
branch for the pull request. Here&amp;rsquo;s the relevant help snippet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull-request [-f] [TITLE|-i ISSUE|ISSUE-URL] [-b BASE] [-h HEAD]
       Opens a pull request on GitHub for the project that the &amp;quot;origin&amp;quot;
       remote points to. The default head of the pull  request  is  the
       current  branch.  Both  base and head of the pull request can be
       explicitly given in one  of  the  following  formats:  &amp;quot;branch&amp;quot;,
       &amp;quot;owner:branch&amp;quot;,  &amp;quot;owner/repo:branch&amp;quot;.  This  command  will abort
       operation if it detects that the current topic branch has  local
       commits  that  are  not yet pushed to its upstream branch on the
       remote. To skip this check, use -f.

       If TITLE is omitted, a text editor will open in which title  and
       body  of  the  pull request can be entered in the same manner as
       git commit message.

       If instead of normal TITLE an issue number is given with -i, the
       pull  request  will  be  attached  to  an existing GitHub issue.
       Alternatively, instead of title you can paste a full URL  to  an
       issue on GitHub.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without this command, you would end up creating a separate pull-request
and issue for the same piece of work.&lt;/p&gt;

&lt;p&gt;You can see this workflow in action via &lt;a href=&#34;https://github.com/tangentlabs/django-oscar/pulls&#34;&gt;Oscar&amp;rsquo;s pull
requests&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Effective pull requests and other good practices for teams using github</title>
      <link>http://codeinthehole.com/tips/pull-requests-and-other-good-practices-for-teams-using-github/</link>
      <pubDate>Sat, 20 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/pull-requests-and-other-good-practices-for-teams-using-github/</guid>
      <description>

&lt;p&gt;I work at &lt;a href=&#34;http://www.tangentlabs.co.uk&#34;&gt;an agency&lt;/a&gt; where we pay $200 a
month to Github for their &lt;a href=&#34;https://github.com/plans&#34;&gt;platinum plan&lt;/a&gt;.
This article is a summary of an internal talk I gave on making the most
of our subscription.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s nothing original here: it&amp;rsquo;s just a collection of tips that I&amp;rsquo;ve
harvested over the last few years. I&amp;rsquo;m publishing this article mainly so
I have something to refer future employees to.&lt;/p&gt;

&lt;h2 id=&#34;use-pull-requests&#34;&gt;Use pull requests&lt;/h2&gt;

&lt;p&gt;Pull requests are an excellent tool for fostering code review. If you&amp;rsquo;re
using Github for team projects, you should be using these extensively.&lt;/p&gt;

&lt;p&gt;Many people don&amp;rsquo;t realise that you can make pull requests between two
branches of the same repository (the so-called &lt;a href=&#34;https://help.github.com/articles/using-pull-requests&#34;&gt;&amp;ldquo;shared repository
model&amp;rdquo;&lt;/a&gt;). For team
projects, this is preferable over the &amp;ldquo;fork and pull&amp;rdquo; model because it&amp;rsquo;s
simpler: there are less branches and remotes to keep track of.&lt;/p&gt;

&lt;p&gt;A good practice is for someone else to merge your code into the
mainline, ensuring 2 sets of eyeballs review each feature. This is
simple to organise when working in pairs, but in larger teams you may
need a system for determining who reviews what.&lt;/p&gt;

&lt;h3 id=&#34;sample-workflow&#34;&gt;Sample workflow&lt;/h3&gt;

&lt;p&gt;Here&amp;rsquo;s a sample workflow demonstrating the use of pull requests.&lt;/p&gt;

&lt;h4 id=&#34;work-on-a-story&#34;&gt;Work on a story&lt;/h4&gt;

&lt;p&gt;Create a new branch for the current story you are working on:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git checkout -b feature/masquerading
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s important to use a new branch for pull requests for several
reasons:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It allows you to submit multiple pull requests without confusion.
The classical Github gotcha is to continue committing to a pull
request branch after making the initial request. When these commits
are pushed to the remote, they will become part of the original pull
request which often ends up conflating unrelated functionality.&lt;/li&gt;
&lt;li&gt;When your pull request is merged into the target branch, the
maintainer may decide to rebase your commits to avoid a merge
commit, or to squash the commits into a single coherent commit. If
your pull request was from your &amp;lsquo;master&amp;rsquo; branch, you will encounter
problems when merging the target branch back into your own &amp;lsquo;master&amp;rsquo;.
Using a temporary branch means it can be discarded once the pull
request is accepted and it doesn&amp;rsquo;t matter that your history was
rewritten.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Make changes, run tests, commit etc.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ vim 
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git commit
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;ask-for-feedback&#34;&gt;Ask for feedback&lt;/h4&gt;

&lt;p&gt;If it&amp;rsquo;s a significant or difficult story, you may be unsure if you&amp;rsquo;re on
the right track. You could ask for some feedback now by pushing your
commits to the remote for others to review:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git push -u origin feature/masquerading
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;-u&lt;/code&gt; option adds an upstream tracking reference to your local
branch, meaning that you can run push subsequent commits using
&lt;code&gt;git push&lt;/code&gt; without having to specify the remote and branch names (and
run &lt;code&gt;git pull&lt;/code&gt; without additional arguments).&lt;/p&gt;

&lt;p&gt;Now ask for feedback on your project mailing list by circulating either
a link to the branch, or a compare view URL. You can use the excellent
&lt;a href=&#34;http://defunkt.io/hub/&#34;&gt;hub&lt;/a&gt; to easily generate compare URLs for
sharing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git compare master..feature/masquerading
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will open your default browser on the compare URL, which you can
then copy into an email.&lt;/p&gt;

&lt;p&gt;Your fellow developers can now comment either on your commits at
line-level, or make more general comments by replying to the mailing
list thread.&lt;/p&gt;

&lt;h4 id=&#34;submit-pull-request&#34;&gt;Submit pull request&lt;/h4&gt;

&lt;p&gt;After digesting your co-workers&amp;rsquo; comments, you adjust your approach and
make some further commits to your branch.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ vim 
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git commit
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the story is complete, push your new commits to the remote:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git push 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and use the Github site to create a pull request. A couple of things to
be aware of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Make sure the destination branch is correct, it may not always be
&amp;lsquo;master&amp;rsquo;. If you&amp;rsquo;re using git-flow or similar, the appropriate
destination branch may be &amp;lsquo;develop&amp;rsquo; or a release branch.&lt;/li&gt;
&lt;li&gt;Use Github&amp;rsquo;s preview facilties to ensure the pull request is well
structured and clear. The description should explain what the pull
request contains as well as the thinking behind it. For reference,
have a look at this &lt;a href=&#34;https://github.com/bitly/dablooms/pull/19&#34;&gt;excellent pull
request&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Once the pull request is created, you should find someone on your team
to review it and send them a link to the request using the project
mailing list so anyone else with an interest can take a look.&lt;/p&gt;

&lt;h4 id=&#34;code-review&#34;&gt;Code review&lt;/h4&gt;

&lt;p&gt;Others can now review your branch, make comments on individual lines or
on the pull request as a whole: the same process as when you pushed some
commits for review earlier.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s also possible for others to add commits to the pull request by
pushing to the same branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git fetch origin
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git checkout feature/masquerading
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ vim 
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git add .
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git commit
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git push origin feature/masquerading
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Iterate this way until the branch is ready to be merged.&lt;/p&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
    Github easter egg: add &lt;code&gt;?w=0&lt;/code&gt; to diff URLs (eg a commit, compare view or
    pull request) to ignore whitespace.
&lt;/div&gt;

&lt;h4 id=&#34;cleaning-your-history-optional&#34;&gt;Cleaning your history (optional)&lt;/h4&gt;

&lt;p&gt;When you&amp;rsquo;re ready to merge, you should first clean up the feature
branch.&lt;/p&gt;

&lt;p&gt;If there are any commits on the destination branch that aren&amp;rsquo;t on your
feature branch then you should rebase to avoid a merge commit. You can
check for such commits using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git log ..master
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This shows all commits on &amp;lsquo;master&amp;rsquo; that aren&amp;rsquo;t in your current branch
history. If you see any commits here, then rebase the feature branch
using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git rebase master
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This replays your commits on top of the new commits from the destination
branch so that the merge can be a &amp;lsquo;fast-forward&amp;rsquo;.&lt;/p&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
    Hang on! Aren&#39;t you rewriting history that has been pushed?

    Yes - that&#39;s true. However, when the remote branch is &lt;em&gt;temporary&lt;/em&gt; as for
    a pull request, this is ok (as far as I can tell). The pull request
    branch should be deleted once it has been merged and so it shouldn&#39;t
    matter that its history is being rewritten before merging.
&lt;/div&gt;

&lt;p&gt;Next, it may be desirable to squash your commits into larger cohesive
commits. You can do this using an &amp;lsquo;interactive&amp;rsquo; rebase:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git rebase -i master
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will open &lt;code&gt;$EDITOR&lt;/code&gt; with all commits since &amp;lsquo;master&amp;rsquo; listed. You can
then reorder and squash these commits, as well as rewording the commit
messages. Be careful, this can become quite addictive.&lt;/p&gt;

&lt;p&gt;One thing you can do is adjust the final commit message on your feature
branch to close the pull request automatically. Simply add &amp;lsquo;Fixes #123&amp;rsquo;
(using the ID from the pull request URL) at the bottom of the message.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git commit --amend
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/blog/831-issues-2-0-the-next-generation&#34;&gt;Github issues 2.0: The Next
Generation&lt;/a&gt; -
An overview of Github issues with an explanation of how to close,
reopen and reference pull requests from within commit messages.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://learn.github.com/p/rebasing.html&#34;&gt;Github help: Rebasing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/interactive-rebase&#34;&gt;Github help: Interactive
rebasing&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;merging&#34;&gt;Merging&lt;/h4&gt;

&lt;p&gt;Finally, you can merge your cleaned-up feature branch with a
fast-forward merge:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git checkout master
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git merge feature/masquerading
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, you can force a merge commit to keep track of which
commits came from the feature branch.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;feature/masquerading&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git checkout master
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git merge --no-ff feature/masquerading
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When you view the your history as a graph, you will be able to tell
which commits were from the feature branch.&lt;/p&gt;

&lt;p&gt;Now delete the local and remote feature branches:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git branch -D feature/masquerading
&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;master&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; $ git push origin :feature/masquerading
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Further reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://help.github.com/articles/using-pull-requests&#34;&gt;Using pull
requests&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;other-good-practices&#34;&gt;Other good practices&lt;/h2&gt;

&lt;h3 id=&#34;care-about-your-history&#34;&gt;Care about your history&lt;/h3&gt;

&lt;p&gt;Strive for a clean, coherent history. Write &lt;a href=&#34;http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html&#34;&gt;good commit
messages&lt;/a&gt;,
adhering to the 50 char summary followed by a longer description. Avoid
unneccessary merge commits as they clutter up your history.&lt;/p&gt;

&lt;p&gt;As we saw above, if you haven&amp;rsquo;t pushed your branch to a stable remote
branch, you can rewrite it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use &lt;code&gt;git rebase&lt;/code&gt; to rebase your feature branch against the branch
you intend to merge into. This means that when you merge, it will be
a so-called &amp;lsquo;fast forward&amp;rsquo; merge which avoids a merge commit.&lt;/li&gt;
&lt;li&gt;Use &lt;code&gt;git rebase -i&lt;/code&gt; to rewrite your branch history, squashing
related commits, rewording commit messages.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;build-an-audit-trail&#34;&gt;Build an audit trail&lt;/h3&gt;

&lt;p&gt;Try and build a good audit trail - your future self will be grateful.
Where possible cross-reference other resources in your commit messages.
These could be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Github pull requests or issues (eg &amp;ldquo;Related to #123&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Mailing-list threads that discuss the work in question (try and use
mailing list software that lets you link to a discussion). If you
use Basecamp or something similar, link to the relevant discussion.&lt;/li&gt;
&lt;li&gt;Articles or blog posts relevant to your work&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Basically anything that might be useful 12 months later when you&amp;rsquo;re
trying to work out the reasoning behind some component.&lt;/p&gt;

&lt;p&gt;One thing, I try to do with
&lt;a href=&#34;https://github.com/tangentlabs/django-oscar&#34;&gt;django-oscar&lt;/a&gt; (a project
of mine) is to maintain an audit trail from a commit all the way back to
the mailing list discussion that instigated it. This works as follows:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;If you&amp;rsquo;re puzzled by a particular line within a file, use
&lt;code&gt;git blame&lt;/code&gt; to find the commit that introduced it.&lt;/li&gt;
&lt;li&gt;The commit message should explain the change that led to this line
and link back to a pull request.&lt;/li&gt;
&lt;li&gt;The pull request should be a set of related commits that together
implement a new feature. The pull request description should be a
functional spec for the feature in question, together with a link to
the mailing list thread where this feature was discussed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I haven&amp;rsquo;t been following this process for long, but it seems to work
well.&lt;/p&gt;

&lt;h3 id=&#34;use-your-prompt&#34;&gt;Use your prompt&lt;/h3&gt;

&lt;p&gt;Put relevant git information into your prompt - this will make your life
easier. Here&amp;rsquo;s a bash snippet for adding the current git branch to your
prompt:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# ~/.bashrc&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; parse_git_branch &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    git branch --no-color &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&amp;gt; /dev/null &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sed -e &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/^[^*]/d&amp;#39;&lt;/span&gt; -e &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;s/* \(.*\)/(\1) /&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;PS1&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\[\e[32m\]\$(parse_git_branch)\[\e[34m\]\h:\W \$ \[\e[m\]&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; PS1
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;use-aliases-for-speed&#34;&gt;Use aliases for speed&lt;/h3&gt;

&lt;p&gt;Strive to be as productive as possible at the commandline. For me, that
means minimising key strokes.&lt;/p&gt;

&lt;p&gt;With git, you can define both git- and bash-aliases to make your life
easier. I have lots (listed below). Two are worth highlighting:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I alias &lt;code&gt;git status -sb&lt;/code&gt; to &lt;code&gt;g&lt;/code&gt; so I can quickly check git status.
This is my most frequently typed command so it makes sense to make
it easy.&lt;/li&gt;
&lt;li&gt;Like many others, I use a customised version of &lt;code&gt;git log&lt;/code&gt; that lists
one commit per line, but annotated with other useful information
such as which commits other branches point to. See the definition of
&lt;code&gt;git hist&lt;/code&gt; below.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Selected aliases from &lt;code&gt;~/.gitconfig&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;[alias]&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;hist&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;log --color --pretty=format:\&amp;quot;%C(yellow)%h%C(reset) %s%C(bold red)%d%C(reset) %C(green)%ad%C(reset) %C(blue)[%an]%C(reset)\&amp;quot; --relative-date --decorate&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    unstage = reset HEAD --&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    restore = checkout --&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    cn = commit --no-verify&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    co = checkout&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    praise = blame&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    visualise = !gitk&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    graph = log --color --graph --pretty=format:\&amp;quot;%h | %ad | %an | %s%d\&amp;quot; --date=short&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And from &lt;code&gt;~/.bash_aliases&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;git&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;hub&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;g&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git status -sb&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gh&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git hist&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gp&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git pull&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gpr&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git pull --rebase&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gpp&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git pull --rebase &amp;amp;&amp;amp; git push&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gf&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git fetch&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gb&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git branch&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ga&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git add&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git commit&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gca&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git commit --amend&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gcv&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git commit --no-verify&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gd&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git diff --color-words&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gdc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git diff --cached -w&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gdw&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git diff --no-ext-diff --word-diff&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gdv&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git diff&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gl&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git log --oneline --decorate&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gt&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git tag&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;grc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git rebase --continue&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;grs&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git rebase --skip&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gsl&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git stash list&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gss&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git stash save&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Tips for using a git pre-commit hook</title>
      <link>http://codeinthehole.com/tips/tips-for-using-a-git-pre-commit-hook/</link>
      <pubDate>Mon, 05 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/tips-for-using-a-git-pre-commit-hook/</guid>
      <description>

&lt;p&gt;Here&amp;rsquo;s a few tips for using a &lt;a href=&#34;http://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&#34;&gt;Git pre-commit
hook&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;keep-your-hook-script-in-source-control&#34;&gt;Keep your hook script in source control&lt;/h3&gt;

&lt;p&gt;Commit your hook script (say &lt;code&gt;pre-commit.sh&lt;/code&gt;) at the root of your
project and include the installation instructions in your
README/documentation to encourage all developers use it.&lt;/p&gt;

&lt;p&gt;Installation is nothing more than:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;ln -s ../../pre-commit.sh .git/hooks/pre-commit
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then everyone benefits from running the same set of tests before
committing and updates are picked up automatically.&lt;/p&gt;

&lt;h3 id=&#34;stash-unstaged-changes-before-running-tests&#34;&gt;Stash unstaged changes before running tests&lt;/h3&gt;

&lt;p&gt;Ensure that code that isn&amp;rsquo;t part of the prospective commit isn&amp;rsquo;t tested
within your pre-commit script. This is missed by many sample pre-commit
scripts but is easily acheived with &lt;code&gt;git stash&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# pre-commit.sh&lt;/span&gt;
git stash -q --keep-index

&lt;span style=&#34;color: #75715e&#34;&gt;# Test prospective commit&lt;/span&gt;
...

git stash pop -q
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;-q&lt;/code&gt; flags specify quiet mode.&lt;/p&gt;

&lt;h3 id=&#34;run-your-test-suite-before-each-commit&#34;&gt;Run your test suite before each commit&lt;/h3&gt;

&lt;p&gt;Obviously.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s best to have a script (say &lt;code&gt;run_tests.sh&lt;/code&gt;) that encapsulates the
standard arguments to your test runner so your pre-commit script doesn&amp;rsquo;t
fall out of date. Something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# pre-commit.sh&lt;/span&gt;
git stash -q --keep-index
./run_tests.sh
&lt;span style=&#34;color: #f8f8f2&#34;&gt;RESULT&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$?&lt;/span&gt;
git stash pop -q
&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$RESULT&lt;/span&gt; -ne &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where a sample &lt;code&gt;run_tests.sh&lt;/code&gt; implementation for a Django project may
look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# run_tests.sh&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;./&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;manage&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;py&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;--&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;settings&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;settings_test&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;v&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;skip-the-pre-commit-hook-sometimes&#34;&gt;Skip the pre-commit hook sometimes&lt;/h3&gt;

&lt;p&gt;Be aware of the &lt;code&gt;--no-verify&lt;/code&gt; option to &lt;code&gt;git commit&lt;/code&gt;. This bypasses the
pre-commit hook when committing, which is useful if you have just
manually run your test suite and don&amp;rsquo;t need to see it run again when
committing.&lt;/p&gt;

&lt;p&gt;I use git aliases to make this easy:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# ~/.bash_aliases&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gc&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git commit&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;alias&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;gcv&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git commit --no-verify&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;search-yo-code-for-debugging-code&#34;&gt;Search yo.. code for debugging code&lt;/h3&gt;

&lt;p&gt;At some point, someone will try and commit a file containing&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;import pdb&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; pdb.set_trace&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or some other debugging code. This can be easily avoided using the
&lt;code&gt;pre-commit.sh&lt;/code&gt; file to grep the staged codebase and abort the commit if
forbidden strings are found.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s an example that looks for &lt;code&gt;console.log&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FILES_PATTERN&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;\.(js|coffee)(\..+)?$&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;FORBIDDEN&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;console.log&amp;#39;&lt;/span&gt;
git diff --cached --name-only &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    grep -E &lt;span style=&#34;color: #f8f8f2&#34;&gt;$FILES_PATTERN&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;GREP_COLOR&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;4;5;37;41&amp;#39;&lt;/span&gt; xargs grep --color --with-filename -n &lt;span style=&#34;color: #f8f8f2&#34;&gt;$FORBIDDEN&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;COMMIT REJECTED Found &amp;quot;$FORBIDDEN&amp;quot; references. Please remove them before commiting&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s straightforward to extend this code block to search for other
terms.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Fabric function for git tagging</title>
      <link>http://codeinthehole.com/tips/a-fabric-function-for-git-tagging/</link>
      <pubDate>Thu, 09 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/a-fabric-function-for-git-tagging/</guid>
      <description>

&lt;p&gt;Listed below is a &lt;a href=&#34;http://docs.fabfile.org/en/1.3.4/index.html&#34;&gt;Fabric&lt;/a&gt;
function for determining the appropriate git reference to deploy during
a deployment. It works well with projects run using the
&lt;a href=&#34;http://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;git-flow&lt;/a&gt;
development model.&lt;/p&gt;

&lt;h3 id=&#34;set-up&#34;&gt;Set-up&lt;/h3&gt;

&lt;p&gt;Assume there is a test environment where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the QA team to assess release candidates&lt;/li&gt;
&lt;li&gt;developers to run integration tests&lt;/li&gt;
&lt;li&gt;developers can deploy &amp;lsquo;debug&amp;rsquo; builds from a specific (untagged)
commit&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There will also be stage and production environments.&lt;/p&gt;

&lt;h3 id=&#34;fabric-function&#34;&gt;Fabric function&lt;/h3&gt;

&lt;p&gt;The following function can be used as part of Fabric build script. It&amp;rsquo;s
purpose is to determine the git reference to deploy from.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;determine_refspec_to_deploy_from&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(is_test&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;False)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;local(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git fetch --tags&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;is_test:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;create_tag&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;prompt(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Tag this release? [y/N] &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;create_tag&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;lower()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;notify(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Showing latest tags for reference&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;local(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git tag | sort -V | tail -5&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;refspec&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;prompt(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Tag name [in format x.x.x]? &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;local(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git tag %(ref)s -m &amp;quot;Tagging version %(ref)s in fabfile&amp;quot;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ref&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;refspec})&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;local(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git push --tags&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;use_commit&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;prompt(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Build from a specific commit? [y/N] &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;use_commit&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;lower()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;y&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;refspec&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;prompt(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Choose commit to build from: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;branch&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;local(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git branch | grep &amp;quot;^*&amp;quot; | cut -d&amp;quot; &amp;quot; -f2&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;capture&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;True)&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;refspec&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;local(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git describe %s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;branch,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;capture&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;True)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;strip()&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# An existing tag must be specified&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;local(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git tag | sort -V | tail -5&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;refspec&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;prompt(red(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Choose tag to build from: &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;# Check this is valid&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;local(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;git tag | grep &amp;quot;%s&amp;quot;&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;refspec)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;refspec&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;building-to-test&#34;&gt;Building to test&lt;/h3&gt;

&lt;p&gt;When building to test, the script allows you to:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tag a release. This is for creating release candidates for the QA
team.&lt;/li&gt;
&lt;li&gt;Build without tagging. In this case, we generate a build name using
&lt;code&gt;git describe&lt;/code&gt;. This is for developers who want to update the test
build to run integration tests.&lt;/li&gt;
&lt;li&gt;Build from a specific commit. This is mainly used to dig yourself
out of circular reference hell: when your test build emits spurious
error messages that can&amp;rsquo;t be re-created locally. A simple bisection
approach works well here, building from specific commits to find the
commit that broke the build.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;You can build to test from any branch which is often the case with
git-flow, where your next release candidate could come from &lt;code&gt;develop&lt;/code&gt; or
a release branch &lt;code&gt;releases/1.4&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;building-to-stage-and-production&#34;&gt;Building to stage and production&lt;/h3&gt;

&lt;p&gt;Nothing fancy - builds to stage and production must use an existing tag
to ensure they go through the QA process.&lt;/p&gt;

&lt;h3 id=&#34;interesting-bits&#34;&gt;Interesting bits&lt;/h3&gt;

&lt;h4 id=&#34;keeping-everyone-in-sync&#34;&gt;Keeping everyone in sync&lt;/h4&gt;

&lt;p&gt;The script fetches tags at the start and, if a new one is created,
pushes it back to the remote. This ensures that all users have access to
the tagged releases.&lt;/p&gt;

&lt;h4 id=&#34;what-s-the-next-tag&#34;&gt;What&amp;rsquo;s the next tag?&lt;/h4&gt;

&lt;p&gt;This snippet shows the latest 5 tags, making it easy to determine the
next tag to use:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;git tag &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sort -V &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; tail -5 
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;constructing-a-build-name&#34;&gt;Constructing a build name&lt;/h4&gt;

&lt;p&gt;For builds to test that aren&amp;rsquo;t tagged, it&amp;rsquo;s still useful to give them a
build number that indicates what the latest tagged release was. This can
be done with &lt;code&gt;git describe&lt;/code&gt;, which will output something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.1.3-149-g1a48a5a
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which indicates that the build came from the 149th commit after tag
&lt;code&gt;0.1.3&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>