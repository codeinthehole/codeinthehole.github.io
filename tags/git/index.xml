<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Git on David Winterbottom</title>
    <link>http://codeinthehole.com/tags/git/</link>
    <description>Recent content in Git on David Winterbottom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 06 Jun 2017 21:30:36 +0100</lastBuildDate>
    
	<atom:link href="http://codeinthehole.com/tags/git/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Git tips for working with pull requests</title>
      <link>http://codeinthehole.com/tips/open-github-pull-request-command/</link>
      <pubDate>Tue, 06 Jun 2017 21:30:36 +0100</pubDate>
      
      <guid>http://codeinthehole.com/tips/open-github-pull-request-command/</guid>
      <description>I spend at least 50% of each day reviewing, amended (and occasionally merging) pull requests, adding both commits and comments. As such I often want to quickly jump from a terminal window to the pull request detail page to check previous comments or add new.
Even with the excellent hub git wrapper, there&amp;rsquo;s no easy way to do this. I can jump to the pull request list page with:
$ git pulls where pulls is aliased in ~/.</description>
    </item>
    
    <item>
      <title>A useful template for commit messages</title>
      <link>http://codeinthehole.com/tips/a-useful-template-for-commit-messages/</link>
      <pubDate>Fri, 02 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/a-useful-template-for-commit-messages/</guid>
      <description>Here&amp;rsquo;s a useful heuristic for writing better commit messages. Set your commit message template to:
# If applied, this commit will... # Why is this change needed? Prior to this change, # How does it address the issue? This change # Provide links to any relevant tickets, articles or other resources and you&amp;rsquo;ll be guided into writing concise commit subjects in the imperative mood - a good practice. See rule 5 of Chris Beam&amp;rsquo;s &amp;ldquo;How to write a commit message&amp;rdquo; for the inspiration of this tip and more reasoning on the use of the imperative mood.</description>
    </item>
    
    <item>
      <title>Linking to Github</title>
      <link>http://codeinthehole.com/tips/linking-to-github/</link>
      <pubDate>Thu, 17 Jul 2014 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/linking-to-github/</guid>
      <description>It was rightly pointed out yesterday that it&amp;rsquo;s dangerous to link to lines or blocks of code on Github without explicitly specifying the commit hash in the URL. On this theme, consider this git command:
$ git browse -u -- commit/$(git rev-parse HEAD) https://github.com/tangentlabs/django-oscar/commit/17851d4b66922f8d7e203e2b469040690c84a0db This emits the Github URL to the HEAD commit on the current branch, specifying the commit hash in the URL. Note that the browse subcommand is provided by the excellent hub library.</description>
    </item>
    
    <item>
      <title>Command-line tips for effective release announcements</title>
      <link>http://codeinthehole.com/tips/command-line-tips-for-effective-release-announcements/</link>
      <pubDate>Thu, 16 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/command-line-tips-for-effective-release-announcements/</guid>
      <description>We finally released Oscar 0.6 last week. The process brought home the importance of writing your release notes as you go rather than at the end. It&amp;rsquo;s a real pain to extract the key changes from 1200 commits spread over the last 8 months. Lesson learnt.
This article is largely a note-to-self in case I have to repeat the process. However, if you do find yourself in a similar position, here are a few command-line tricks for analysing your git history.</description>
    </item>
    
    <item>
      <title>Enhancing your git commit editor</title>
      <link>http://codeinthehole.com/tips/enhancing-your-git-commit-editor/</link>
      <pubDate>Thu, 08 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/enhancing-your-git-commit-editor/</guid>
      <description>Confession: I am a pedant, especially around commit messages.
I often find myself writing very similar commit messages (like &amp;ldquo;Bump version to 0.4.3&amp;rdquo;) and want to ensure I use the same wording each time. Thanks to @LuRsT, I learnt how to employ git&amp;rsquo;s prepare-commit-msg hook to display the last 5 commit messages when I&amp;rsquo;m editing a commit message.
Use the following .git/hooks/prepare-commit-msg hook:
#!/bin/sh  BRANCH_NAME=$(git branch | grep &amp;#39;*&amp;#39; | sed &amp;#39;s/* //&amp;#39;) if [ $BRANCH_NAME !</description>
    </item>
    
    <item>
      <title>A useful Git post-checkout hook for Python repos</title>
      <link>http://codeinthehole.com/tips/a-useful-git-post-checkout-hook-for-python-repos/</link>
      <pubDate>Tue, 23 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/a-useful-git-post-checkout-hook-for-python-repos/</guid>
      <description>Every now and again, an innocent python developer checks out a new Git branch then proceeds to bang their head against a bug caused by an orphaned .pyc file from the previous branch. Since *.pyc files are typically in the repo&amp;rsquo;s .gitignore file, they are not removed when switching branches and can cause issues if the corresponding .py is removed.
This can be neatly addressed through a &amp;lsquo;post checkout&amp;rsquo; hook which deletes all such files.</description>
    </item>
    
    <item>
      <title>Converting Github issues into pull requests</title>
      <link>http://codeinthehole.com/tips/converting-github-issues-into-pull-requests/</link>
      <pubDate>Mon, 04 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/converting-github-issues-into-pull-requests/</guid>
      <description>Using the Hub library, it&amp;rsquo;s possible to convert Github issues into pull requests. This gives rise to a useful Github workflow which this article describes.
This is nothing new; it&amp;rsquo;s been written about before. However, this is something I do all the time whilst developing Oscar and I&amp;rsquo;m fed up with explaining it. This article is a reference I can point people at.
Workflow Discuss Discuss an idea for a new feature on the project mailing list.</description>
    </item>
    
    <item>
      <title>Effective pull requests and other good practices for teams using github</title>
      <link>http://codeinthehole.com/tips/pull-requests-and-other-good-practices-for-teams-using-github/</link>
      <pubDate>Sat, 20 Oct 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/pull-requests-and-other-good-practices-for-teams-using-github/</guid>
      <description>I work at an agency where we pay $200 a month to Github for their platinum plan. This article is a summary of an internal talk I gave on making the most of our subscription.
There&amp;rsquo;s nothing original here: it&amp;rsquo;s just a collection of tips that I&amp;rsquo;ve harvested over the last few years. I&amp;rsquo;m publishing this article mainly so I have something to refer future employees to.
Use pull requests Pull requests are an excellent tool for fostering code review.</description>
    </item>
    
    <item>
      <title>Tips for using a git pre-commit hook</title>
      <link>http://codeinthehole.com/tips/tips-for-using-a-git-pre-commit-hook/</link>
      <pubDate>Mon, 05 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/tips-for-using-a-git-pre-commit-hook/</guid>
      <description>Here&amp;rsquo;s a few tips for using a Git pre-commit hook.
Keep your hook script in source control Commit your hook script (say pre-commit.sh) at the root of your project and include the installation instructions in your README/documentation to encourage all developers use it.
Installation is nothing more than:
ln -s ../../pre-commit.sh .git/hooks/pre-commit Then everyone benefits from running the same set of tests before committing and updates are picked up automatically.</description>
    </item>
    
    <item>
      <title>A Fabric function for git tagging</title>
      <link>http://codeinthehole.com/tips/a-fabric-function-for-git-tagging/</link>
      <pubDate>Thu, 09 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/a-fabric-function-for-git-tagging/</guid>
      <description>Listed below is a Fabric function for determining the appropriate git reference to deploy during a deployment. It works well with projects run using the git-flow development model.
Set-up Assume there is a test environment where:
 the QA team to assess release candidates developers to run integration tests developers can deploy &amp;lsquo;debug&amp;rsquo; builds from a specific (untagged) commit  There will also be stage and production environments.
Fabric function The following function can be used as part of Fabric build script.</description>
    </item>
    
  </channel>
</rss>