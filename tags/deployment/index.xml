<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deployment on David Winterbottom</title>
    <link>https://codeinthehole.com/tags/deployment/</link>
    <description>Recent content in Deployment on David Winterbottom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 25 Feb 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://codeinthehole.com/tags/deployment/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Prefer data migrations to initial data</title>
      <link>https://codeinthehole.com/tips/prefer-data-migrations-to-initial-data/</link>
      <pubDate>Sat, 25 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/prefer-data-migrations-to-initial-data/</guid>
      <description>Django provides several mechanisms for loading initial data for models, such as leveraging JSON fixtures or files of raw SQL - James Bennett offers a good overview.
Each documented method involves initialising data as part of the syncdb event, either by loading a fixture file or by hooking into the syncdb signal. However, there is a serious pitfall with these techniques, as described in the Django docs:
 This is extremely convenient, but be careful: remember that the data will be refreshed every time you run syncdb.</description>
    </item>
    
    <item>
      <title>A Fabric function for git tagging</title>
      <link>https://codeinthehole.com/tips/a-fabric-function-for-git-tagging/</link>
      <pubDate>Thu, 09 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/a-fabric-function-for-git-tagging/</guid>
      <description>Listed below is a Fabric function for determining the appropriate git reference to deploy during a deployment. It works well with projects run using the git-flow development model.
Set-up Assume there is a test environment where:
 the QA team to assess release candidates developers to run integration tests developers can deploy &amp;lsquo;debug&amp;rsquo; builds from a specific (untagged) commit  There will also be stage and production environments.
Fabric function The following function can be used as part of Fabric build script.</description>
    </item>
    
    <item>
      <title>Deploying cron jobs using Phing</title>
      <link>https://codeinthehole.com/tips/deploying-cron-jobs-using-phing/</link>
      <pubDate>Sun, 31 May 2009 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/deploying-cron-jobs-using-phing/</guid>
      <description>Deploying applications that depend on cron-jobs can be a pain. However, Phing can be used to make such deployments easy - here&amp;rsquo;s how&amp;hellip;
Consider an application folder structure as follows:
/builds /development /test /stage /src /cron.d appname-__BUILD__-order-processing /scripts /order-processing handle-ready-to-ship-orders.php handle-cancellations.php ... /public /classes ... All development work takes place within the /src folder while the /builds/* folders are used as targets in deployment. This system allows multiple builds to happily co-exist on the same server and the whole application infrastructure to be moved between servers easily as the structure in source control mirrors that of the server.</description>
    </item>
    
    <item>
      <title>Phing task to update Twitter status</title>
      <link>https://codeinthehole.com/tips/phing-task-to-update-twitter-status/</link>
      <pubDate>Sat, 10 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/phing-task-to-update-twitter-status/</guid>
      <description>At Tangent Labs, we&amp;rsquo;re currently experimenting with integrating Twitter into our project workflow to provide a latest activity feed in a easily digestible format (for both developers and non-technical people). For a pilot project, we&amp;rsquo;ve created a Twitter account and added an SVN post-commit hook script that updates Twitter with the latest commit information (commit message, affected files, author). We&amp;rsquo;re going to integrate our bug-tracking software shortly too but that&amp;rsquo;s not the subject of this post.</description>
    </item>
    
    <item>
      <title>Deploying to a shared hosting environment using Phing</title>
      <link>https://codeinthehole.com/tips/deploying-to-a-shared-hosting-environment-using-phing/</link>
      <pubDate>Sun, 04 Jan 2009 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/deploying-to-a-shared-hosting-environment-using-phing/</guid>
      <description>Deploying applications to shared hosting environments can be a pain when no SSH access is provided. Consequently, it&amp;rsquo;s hard to avoid using FTP to deploy files from your development environment to a production server. In such trying circumstances, it&amp;rsquo;s easy to form self-destructive habits like using drag-and-drop FTP deployment - a very bad thing. Much better is to write an automated deployment script so that you can build to production in one clean step, a key tenet of The Joel Test for writing better code (highly recommended).</description>
    </item>
    
  </channel>
</rss>