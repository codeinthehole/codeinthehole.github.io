<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on David Winterbottom</title>
    <link>http://codeinthehole.com/tags/python/index.xml</link>
    <description>Recent content in Python on David Winterbottom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://codeinthehole.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Bootstrapped virtualenvs</title>
      <link>http://codeinthehole.com/tips/bootstrapped-virtualenvs/</link>
      <pubDate>Fri, 24 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/bootstrapped-virtualenvs/</guid>
      <description>&lt;p&gt;The excellent
&lt;a href=&#34;https://bitbucket.org/dhellmann/virtualenvwrapper..&#34;&gt;virtualenvwrapper&lt;/a&gt;
supports a &lt;code&gt;postmkvirtualenv&lt;/code&gt; script to bootstrap your virtual
environments. Here&amp;rsquo;s a useful implementation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Grab project name from virtualenv name&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;NAME&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;basename &lt;span style=&#34;color: #f8f8f2&#34;&gt;$VIRTUAL_ENV&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Set terminal title on postactivate&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;title &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$NAME&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt; &amp;gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$VIRTUAL_ENV&lt;/span&gt;/bin/postactivate

&lt;span style=&#34;color: #75715e&#34;&gt;# Change directory to root of project on postactivate. We assume the&lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# mkvirtualenv is being run from the root of the project. This line &lt;/span&gt;
&lt;span style=&#34;color: #75715e&#34;&gt;# will need to edited later if not.&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;cd &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$PWD&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt; &amp;gt;&amp;gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$VIRTUAL_ENV&lt;/span&gt;/bin/postactivate

&lt;span style=&#34;color: #75715e&#34;&gt;# Run postactivate now to get the title set&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;source&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$VIRTUAL_ENV&lt;/span&gt;/bin/postactivate
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This ensures that a new virtualenv has a &lt;code&gt;postactivate&lt;/code&gt; script which:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Sets the terminal title to that of the virtualenv&lt;/li&gt;
&lt;li&gt;Changes directory to the root of the project&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;By convention, such a script lives in &lt;code&gt;~/.virtualenvs/postmkvirtualenv&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Note that the &lt;code&gt;title&lt;/code&gt; function is defined in my &lt;code&gt;~/.bashrc&lt;/code&gt; as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;function&lt;/span&gt; title&lt;span style=&#34;color: #f92672&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; -ne &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\033]0;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$1&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;\007&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As someone who develops in iTerm and Terminal, automatically setting the
tab titles is a useful navigation aid.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://codeinthehole.com/images/screenshots/terminal-titles.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;There are more &lt;a href=&#34;http://virtualenvwrapper.readthedocs.org/en/latest/tips.html&#34;&gt;tips and
tricks&lt;/a&gt;
available in the virtualenvwrapper docs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to install PostGIS and GeoDjango on Ubuntu</title>
      <link>http://codeinthehole.com/tips/how-to-install-postgis-and-geodjango-on-ubuntu/</link>
      <pubDate>Fri, 04 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/how-to-install-postgis-and-geodjango-on-ubuntu/</guid>
      <description>

&lt;p&gt;Despite its &lt;a href=&#34;https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/&#34;&gt;extensive
documentation&lt;/a&gt;,
getting GeoDjango installed and configured can be a pain. Here are my
notes for future reference:&lt;/p&gt;

&lt;h3 id=&#34;installation-on-ubuntu-12-04&#34;&gt;Installation on Ubuntu 12.04&lt;/h3&gt;

&lt;p&gt;First, ensure your system locale is UTF8 as PostgreSQL uses it to
determine its default encoding during installation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LANGUAGE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LANG&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LC_ALL&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now install dependencies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get update
$ sudo apt-get install postgresql-server-dev-9.1 postgresql-9.1-postgis 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;PostgreSQL should now be installed and running with UTF8 encodings.
Verify this with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo -u postgres psql -l    
                                     List of databases
       Name       &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;  Owner   &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; Encoding &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;   Collate   &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;    Ctype    &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
------------------+----------+----------+-------------+-------------+-...
 postgres         &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; postgres &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; UTF8     &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; en_US.UTF-8 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; en_US.UTF-8 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
 template0        &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; postgres &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; UTF8     &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; en_US.UTF-8 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; en_US.UTF-8 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;          &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;          &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
 template1        &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; postgres &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; UTF8     &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; en_US.UTF-8 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; en_US.UTF-8 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;          &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;          &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now create a spatial database. The above commands will have installed
PostGIS 1.5.3 hence, &lt;a href=&#34;https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/postgis/#creating-a-spatial-database-template-for-earlier-versions&#34;&gt;according to Django&amp;rsquo;s
docs&lt;/a&gt;,
we need to download and install a shell script that executes the
appropriate commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ wget https://docs.djangoproject.com/en/dev/_downloads/create_template_postgis-1.5.sh
$ chmod +x create_template_postgis-1.5.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and run it as a privileged user:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo -u postgres ./create_template_postgis-1.5.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If this is successful, a deluge of SQL output will echo to the console.
This is normal. PostGIS is now correctly installed and we have a
template database we can use to create a database for our GeoDjango
project.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo -u postgres psql
psql &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;9&lt;/span&gt;.1.9&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
Type &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;help&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; help.

&lt;span style=&#34;color: #f8f8f2&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# CREATE ROLE sample_role WITH PASSWORD &amp;#39;sample_password&amp;#39; LOGIN;&lt;/span&gt;
CREATE ROLE
&lt;span style=&#34;color: #f8f8f2&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# CREATE DATABASE sample_db OWNER sample_role TEMPLATE template_postgis;&lt;/span&gt;
CREATE DATABASE
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the tricky bit over: you can now &lt;code&gt;pip install psycopg2&lt;/code&gt; and
you&amp;rsquo;re basically done. Remember to use the PostGIS database engine in
your &lt;code&gt;DATABASES&lt;/code&gt; setting:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DATABASES&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;django.contrib.gis.db.backends.postgis&amp;#39;&lt;/span&gt;,
        ...
    &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;,
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;common-errors&#34;&gt;Common errors&lt;/h4&gt;

&lt;p&gt;If your system locale is not UTF8 when attempting to create a spatial
database, you&amp;rsquo;ll see something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo -u postgres ./create_template_postgis-debian.sh
createdb: database creation failed: ERROR: encoding UTF8 does not match locale en_US
DETAIL:  The chosen LC_CTYPE setting requires encoding LATIN1 
FATAL:  database &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;template_postgis&amp;quot;&lt;/span&gt; does not exist
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If PostgreSQL is not installed when trying to install psycopg2, you see
something that ends with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;warning: manifest_maker: standard file &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt; not found

Error: pg_config executable not found.

Please add the directory containing pg_config to the PATH
or specify the full executable path with the option:

    python setup.py build_ext --pg-config /path/to/pg_config build ...

or with the pg_config option in &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;setup.cfg&amp;#39;&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;ll add more error symptoms when I see them in the wild.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>purl, URI templates and generated tests</title>
      <link>http://codeinthehole.com/projects/purl-uri-templates-and-generated-tests/</link>
      <pubDate>Tue, 09 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/projects/purl-uri-templates-and-generated-tests/</guid>
      <description>

&lt;p&gt;&lt;em&gt;TLDR&lt;/em&gt;: Parameterised tests are a useful testing technique. Both Nose
and py.test support them.&lt;/p&gt;

&lt;h3 id=&#34;uri-templates-in-purl&#34;&gt;URI templates in purl&lt;/h3&gt;

&lt;p&gt;The newly released &lt;a href=&#34;https://github.com/codeinthehole/purl&#34;&gt;purl 0.8&lt;/a&gt; (a
URL library of mine) supports URI templates as per &lt;a href=&#34;http://tools.ietf.org/html/rfc6570&#34;&gt;RFC
6570&lt;/a&gt;. These allow new URL instances
to be created by passing bindings to a template instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;purl&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tpl&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;purl&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Template(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;http://www.google.com{path}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tpl&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;expand({&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]})&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;as_string()&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;http://www.google.com/a/b/c&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Alternatively, you can expand template strings directly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;purl&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;expand(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;{?list*}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;list&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]})&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/a/b/c&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There&amp;rsquo;s a plethora of ways template URLs can be used - see the
&lt;a href=&#34;http://tools.ietf.org/html/rfc6570&#34;&gt;RFC&lt;/a&gt; for details.&lt;/p&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
    Note, there&#39;s 
    &lt;a href=&#34;https://github.com/uri-templates/uritemplate-py&#34;&gt;already a Python library that provides this functionality&lt;/a&gt;. I
    decided not to use that one with purl as I thought I could do better.
    Plus, it looked like fun and I wanted to learn more about Python&#39;s
    support for parameterised tests.

&lt;/div&gt;

&lt;h3 id=&#34;parameterised-tests&#34;&gt;Parameterised tests&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;d like to draw your attention to parameterised, or generated, tests
which were used to drive development of this feature.&lt;/p&gt;

&lt;h4 id=&#34;example&#34;&gt;Example&lt;/h4&gt;

&lt;p&gt;The RFC includes a range of example templates, bindings and expected
outputs:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://codeinthehole.com/images/screenshots/rfc6570.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;These are excellent material for driving a series of parametric tests
since each example comprises the inputs and expected output for a test.
The natural way to test such examples is using parameterised tests.&lt;/p&gt;

&lt;h4 id=&#34;phpunit&#34;&gt;PHPUnit&lt;/h4&gt;

&lt;p&gt;PHP&amp;rsquo;s dominant testing libary,
&lt;a href=&#34;http://phpunit.de/manual/current/en/index.html&#34;&gt;PHPUnit&lt;/a&gt;, support &lt;a href=&#34;http://phpunit.de/manual/current/en/writing-tests-for-phpunit.html#writing-tests-for-phpunit.data-providers&#34;&gt;data
providers&lt;/a&gt;
that can used to solve this problem (in a slightly clunky way).&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a Python port of this functionality in &lt;a href=&#34;https://github.com/tangentlabs/django-oscar/blob/master/oscar/test/decorators.py#L4-L27&#34;&gt;django-oscar&amp;rsquo;s testing
utilities&lt;/a&gt;
(and many other places no doubt) however there&amp;rsquo;s better way to write
parameterised tests in Python.&lt;/p&gt;

&lt;h4 id=&#34;nose&#34;&gt;Nose&lt;/h4&gt;

&lt;p&gt;I used &lt;a href=&#34;http://nose.readthedocs.org/en/latest/writing_tests.html#test-generators&#34;&gt;Nose&amp;rsquo;s test
generators&lt;/a&gt;
to drive TDD on purl.&lt;/p&gt;

&lt;p&gt;These allow tests to be generated by &lt;code&gt;yield&lt;/code&gt;ing a tuple
&lt;code&gt;(test_fn, *test_args)&lt;/code&gt; for each dataset. Here, &lt;code&gt;test_fn&lt;/code&gt; is a callable
that takes arguments &lt;code&gt;test_args&lt;/code&gt; and should raise an &lt;code&gt;AssertionError&lt;/code&gt; if
the test fails.&lt;/p&gt;

&lt;p&gt;Consider the above snippet from section 3.2.2 of the RFC: tests for this
section can be constructed as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;purl&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;nose.tools&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;eq_&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;level1_vars&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;var&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Tuples of (template, bindings, expected URI)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;test_data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;{var}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;level1_vars,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;{hello}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;level1_vars,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Hello%20World%21&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;assert_expansion&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(template,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fields,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;expected):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;eq_(purl&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;expand(template,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fields),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;expected)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_expansion&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;template,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fields,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;expected&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;test_data:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;assert_expansion,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;template,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fields,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;expected&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which executes each example as a single test:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ nosetests tests/expansion_tests.py
tests.expansion_tests.test_expansion&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;{var}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;var&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; ... ok
tests.expansion_tests.test_expansion&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;{hello}&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;var&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;value&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;hello&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Hello World!&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;, &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Hello%20World%21&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; ... ok

----------------------------------------------------------------------
Ran &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; tests in &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.001s

OK
&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;admonition note&#34;&gt;
    I have verbose output turned on by default since my &lt;code&gt;~/nose.cfg&lt;/code&gt; file
    contains the line &lt;code&gt;verbosity=2&lt;/code&gt;.
&lt;/div&gt;

&lt;p&gt;Here we construct a simple assertion function using the &lt;code&gt;eq_&lt;/code&gt; equality
check from Nose&amp;rsquo;s test tools.&lt;/p&gt;

&lt;p&gt;The default verbose output is a little too verbose for my tastes. It can
be cleaned up by providing a &lt;code&gt;description&lt;/code&gt; attribute on the yielded
callable:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_expansion&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;():&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;template,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fields,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;expected&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;test_data:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;assert_expansion&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;description&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s expands to %s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(template,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;expected)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;yield&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;assert_expansion,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;template,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fields,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;expected&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ nosetests tests/expansion_tests.py
&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;var&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt; expands to value ... ok
&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;hello&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt; expands to Hello%20World%21 ... ok

----------------------------------------------------------------------
Ran &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; tests in &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.001s

OK
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Much nicer.&lt;/p&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
    Updating the description suffers from a known bug where 
    &lt;a href=&#34;https://code.google.com/p/python-nose/issues/detail?id=244&#34;&gt;failure reports always use the last description assigned to callable&lt;/a&gt;.
    There are a few work-arounds detailed in the bug comments but none play
    nicely with Nose&#39;s multiprocess plugin.
&lt;/div&gt;

&lt;h4 id=&#34;py-test&#34;&gt;py.test&lt;/h4&gt;

&lt;p&gt;In researching this post, I discovered
&lt;a href=&#34;http://pytest.org/latest/&#34;&gt;py.test&lt;/a&gt; supports a &lt;a href=&#34;http://pytest.org/latest/example/parametrize.html&#34;&gt;rich array of
functionality&lt;/a&gt; for
creating parameterised or generated tests.&lt;/p&gt;

&lt;p&gt;Using py.test&amp;rsquo;s &lt;code&gt;@pytest.mark.parameterize&lt;/code&gt;
&lt;a href=&#34;http://pytest.org/latest/parametrize.html#pytest-mark-parametrize&#34;&gt;decorator&lt;/a&gt;,
we can rewrite the above example as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;pytest&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;@pytest.mark.parametrize&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;template&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;fields&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;expected&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_expand&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(template,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fields,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;expected):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;assert&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;expand(template,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fields)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt;  &lt;span style=&#34;color: #f8f8f2&#34;&gt;expected&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;with verbose output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ py.test -v tests/pytest_tests.py
platform darwin -- Python &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;.7.2 -- pytest-2.3.5 -- /Users/dwinterbottom/.virtualenvs/purl/bin/python
collected &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt; items

tests/pytest_tests.py:123: test_expand&lt;span style=&#34;color: #f92672&#34;&gt;[{&lt;/span&gt;var&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;-fields0-value&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; PASSED
tests/pytest_tests.py:123: test_expand&lt;span style=&#34;color: #f92672&#34;&gt;[{&lt;/span&gt;hello&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;-fields1-Hello%20World%21&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; PASSED
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have a feeling I will be switching to py.test shortly.&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Test generators are a useful addition to your testing toolkit.&lt;/p&gt;

&lt;p&gt;There&amp;rsquo;s a couple of things to be aware of when using Nose&amp;rsquo;s generated
tests:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s not possible to run just one of the examples from the
commandline.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s tempting to create the assertion function inline within the
&lt;code&gt;test_*&lt;/code&gt; function. However this doesn&amp;rsquo;t work if you run your tests
across multiple processes using Nose&amp;rsquo;s &lt;code&gt;--processes&lt;/code&gt; option.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here&amp;rsquo;s a few examples of using this functionality:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The &lt;a href=&#34;https://github.com/codeinthehole/purl/blob/master/tests/expansion_tests.py&#34;&gt;expanded version of the above example from the Purl
library&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tangentlabs/django-oscar/blob/master/tests/unit/payment/bankcard_tests.py#L26-52&#34;&gt;A set of tests from
django-oscar&lt;/a&gt;
for testing validation of the Luhn algorithm.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Related articles:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://swordstyle.com/func_test_tutorial/part_one/extra_generative_tests.html&#34;&gt;Introduction to Functional Web Testing with Twill and
Selenium&lt;/a&gt; -
Using test generators to drive functional tests.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://achinghead.com/nosetests-generators-descriptions.html&#34;&gt;Nosetests, Generators and
Descriptions&lt;/a&gt; -
A detailed description of the bug with using a custom description
for Nose&amp;rsquo;s generated tests.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>A deferred logging file handler for Django</title>
      <link>http://codeinthehole.com/tips/a-deferred-logging-file-handler-for-django/</link>
      <pubDate>Wed, 12 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/a-deferred-logging-file-handler-for-django/</guid>
      <description>

&lt;p&gt;At Tangent we handle environment-specific configuration of Django
projects using &lt;a href=&#34;http://justcramer.com/2011/01/13/settings-in-django/&#34;&gt;the method outlined by David
Cramer&lt;/a&gt;. This
involves distinguishing between core settings (which we keep in
&lt;code&gt;core/default.py&lt;/code&gt;) and environment specific settings (eg
&lt;code&gt;core/stage.py&lt;/code&gt;, &lt;code&gt;core/test.py&lt;/code&gt;). The standard &lt;code&gt;settings.py&lt;/code&gt; module
imports all defaults and then uses a enviromental shell variable to
determine which environment settings module to import.&lt;/p&gt;

&lt;h3 id=&#34;a-problem&#34;&gt;A problem&lt;/h3&gt;

&lt;p&gt;One tricky issue with this arrangement is logging to file. Ideally, we
want to define a single &lt;code&gt;LOGGING&lt;/code&gt; dict in the default settings but have
file logging use an environment-specific folder. For example, logging to
file in the test environment goes to &lt;code&gt;/var/log/project/test/&lt;/code&gt; while
stage goes to a file in &lt;code&gt;/var/log/project/stage&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;one-solution&#34;&gt;One solution&lt;/h3&gt;

&lt;p&gt;This can be solved by using a string template for the &lt;code&gt;filename&lt;/code&gt;
argument to each &lt;code&gt;FileHandler&lt;/code&gt; in the &lt;code&gt;LOGGING&lt;/code&gt; setting:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# conf/default.py&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;LOGGING&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;error_file&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;INFO&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;logging.FileHandler&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;{log_root}errors.log&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;formatter&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;verbose&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;loggers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;django.request&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;error_file&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ERROR&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;propagate&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;False,&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;then importing the default &lt;code&gt;LOGGING&lt;/code&gt; dict into your environment-specific
settings and formatting each filename with the correct path:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# conf/test.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;conf.default&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LOGGING&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;LOG_ROOT&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/var/log/project/test/&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LOGGING[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;values():&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;handler[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;logging.FileHandler&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;handler[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;handler[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format(log_root&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;LOG_ROOT)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This works but is rather clunky. For instance, the default &lt;code&gt;LOGGING&lt;/code&gt;
setting (without an environmental override) will lead to an error .&lt;/p&gt;

&lt;h3 id=&#34;another-solution&#34;&gt;Another solution&lt;/h3&gt;

&lt;p&gt;Another, possibly more elegant, solution is to use a specialisd logging
handler that defers evaluation of the filepath until it tries to log a
record.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;logging&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FileHandler&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseFileHandler&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;DeferredFileHandler&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(BaseFileHandler):&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;filename,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;kwargs):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;filename&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;kwargs[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;delay&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseFileHandler&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/dev/null&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;kwargs)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_open&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# We import settings here to avoid a circular reference as this module&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# will be imported when settings.py is executed.&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.conf&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;settings&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;baseFilename&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(settings&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;LOG_ROOT,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filename)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseFileHandler&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_open(self)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, all we need to do is use the new handler in our &lt;code&gt;LOGGING&lt;/code&gt; dict:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# conf/default.py&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;LOGGING&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;error_file&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;INFO&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;deferred_filelogger.DeferredFilehandler&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;errors.log&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;formatter&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;verbose&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;loggers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;django.request&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;error_file&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ERROR&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;propagate&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;False,&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and specify a &lt;code&gt;LOG_ROOT&lt;/code&gt; setting for each environment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# conf/test.py&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;LOG_ROOT&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/var/log/project/test/&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Such a logger is part of
&lt;a href=&#34;https://github.com/tangentlabs/django-oscar/blob/master/oscar/core/logging/handlers.py&#34;&gt;django-oscar&lt;/a&gt;,
but I&amp;rsquo;ve packaged it up separately so it can be used in non-Oscar
projects. The package is called
&lt;a href=&#34;https://github.com/codeinthehole/django-deferred-filelogger&#34;&gt;django-deferred-filelogger&lt;/a&gt;
and can be installed from PyPI using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ pip install django-deferred-filelogger
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Conditional logic in Django forms</title>
      <link>http://codeinthehole.com/tips/conditional-logic-in-django-forms/</link>
      <pubDate>Sat, 01 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/conditional-logic-in-django-forms/</guid>
      <description>

&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s common for UX professionals to design forms like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://codeinthehole.com/images/screenshots/radio-form-wire.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;where radio buttons are employed to split the form into sections, each
of which can have it&amp;rsquo;s own fields which are only mandatory if the parent
radio button is checked. Thus the validation logic is conditional on the
submitted form data.&lt;/p&gt;

&lt;p&gt;Such requirements are slightly tricky to capture in Django as they tread
slightly outside the normal path of form validation. Specifically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s not documented how to render radio buttons separately. The
default behaviour is to render an unordered list. The &lt;a href=&#34;https://docs.djangoproject.com/en/dev/ref/forms/widgets/#radioselect&#34;&gt;guidance on
fine-grained template
control&lt;/a&gt;
only covers looping over the choices.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not obvious how to change the validation properties of a form
field dynamically, depending on the submitted data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;a-solution&#34;&gt;A solution&lt;/h3&gt;

&lt;p&gt;Start with this form class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ScheduleForm&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Form):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;NOW,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LATER&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;now&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;later&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;SCHEDULE_CHOICES&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(NOW,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Send immediately&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(LATER,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Send later&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;schedule&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ChoiceField(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;choices&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SCHEDULE_CHOICES,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;widget&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;RadioSelect)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;send_date&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DateTimeField(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;label&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;required&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;False)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the &lt;code&gt;send_date&lt;/code&gt; field has &lt;code&gt;required=False&lt;/code&gt; as it is only mandatory
if the &amp;lsquo;Send later&amp;rsquo; radio button is selected. For simplicity, we are are
only using a single datetime field for the send date rather than the
split-widget field of the wire.&lt;/p&gt;

&lt;p&gt;We can render this as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    {% csrf_token %}
    {{ form.non_field_errors }}

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;Send schedule&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ form.schedule.errors }}

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;span4&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
        {{ form.schedule.0 }}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;br&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;help-text&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;(Once you&amp;#39;ve checked out)&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;span&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;span4&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
        {{ form.schedule.1 }}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;br&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt;
        {{ form.send_date }}
        {{ form.send_date.errors }}
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;Save&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;button&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Observe that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the radio buttons are rendered individually individually by
referring to the index of each option (this works in Django 1.4+).&lt;/li&gt;
&lt;li&gt;we don&amp;rsquo;t render the errors for the &lt;code&gt;schedule&lt;/code&gt; next to one particular
radio button, but above the container elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we add conditional validation to the form class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ScheduleForm&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Form):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;NOW,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LATER&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;now&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;later&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;SCHEDULE_CHOICES&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(NOW,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Send immediately&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(LATER,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Send later&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;schedule&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ChoiceField(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;choices&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SCHEDULE_CHOICES,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;widget&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;RadioSelect)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;send_date&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DateTimeField(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;label&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;required&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;False)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;None,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;kwargs):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;super(ScheduleForm,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(data,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;kwargs)&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;# If &amp;#39;later&amp;#39; is chosen, set send_date as required&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;schedule&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;LATER:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fields[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;send_date&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;required&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we override &lt;code&gt;__init__&lt;/code&gt; and inspect the raw submitted data so that
we can set &lt;code&gt;required=True&lt;/code&gt; on the &lt;code&gt;send_date&lt;/code&gt; field appropriately. This
is the conventional way of adding conditional logic to form validation,
although it&amp;rsquo;s more common to use an additional argument to &lt;code&gt;__init__&lt;/code&gt;
to determine the field adjustments.&lt;/p&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;This solution is not perfect. It&amp;rsquo;s a little odd to use the raw form data
to change validation rules. However, I&amp;rsquo;m not aware of a cleaner
alternative.&lt;/p&gt;

&lt;p&gt;Related links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/pydanny/advanced-django-forms-usage&#34;&gt;Advanced Django Form
Usage&lt;/a&gt; -
A decent overview of various issues around forms from
DjangoCon 2011.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>PyPI README badges</title>
      <link>http://codeinthehole.com/tips/pypi-readme-badges/</link>
      <pubDate>Fri, 03 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/pypi-readme-badges/</guid>
      <description>&lt;p&gt;Thanks to &lt;a href=&#34;https://twitter.com/kuramanga&#34;&gt;@kuramanga&lt;/a&gt;, it&amp;rsquo;s now possible
to add shiny PyPi badges to your Python project READMEs that indicate
the latest released version on PyPI and the total number of downloads.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tangentlabs/django-oscar&#34;&gt;&lt;img src=&#34;http://codeinthehole.com/images/screenshots/oscar-pypi-badges.png&#34; alt=&#34;django-oscar PyPi badges&#34; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This screenshot is taken from
&lt;a href=&#34;https://github.com/tangentlabs/django-oscar&#34;&gt;django-oscar&lt;/a&gt;&amp;rsquo;s README.&lt;/p&gt;

&lt;p&gt;Embed these badges in your own repo as Restructured text:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;::&lt;/span&gt; https://pypip.in/v/$REPO/badge.png
    &lt;span style=&#34;color: #a6e22e&#34;&gt;:target:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;https://crate.io/packages/$REPO/&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;:alt:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Latest PyPI version&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;..&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;image&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;::&lt;/span&gt; https://pypip.in/d/$REPO/badge.png
    &lt;span style=&#34;color: #a6e22e&#34;&gt;:target:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;https://crate.io/packages/$REPO/&lt;/span&gt;
    &lt;span style=&#34;color: #a6e22e&#34;&gt;:alt:&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Number of PyPI downloads&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or Markdown:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[![PyPi version](https://pypip.in/v/$REPO/badge.png)](https://crate.io/packages/$REPO/)
[![PyPi downloads](https://pypip.in/d/$REPO/badge.png)](https://crate.io/packages/$REPO/)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;a href=&#34;https://github.com/kura/pypipins&#34;&gt;code is available on Github&lt;/a&gt;, see
also Olivier Lacan&amp;rsquo;s &lt;a href=&#34;https://github.com/olivierlacan/shields&#34;&gt;shields&lt;/a&gt;
repo.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A useful Git post-checkout hook for Python repos</title>
      <link>http://codeinthehole.com/tips/a-useful-git-post-checkout-hook-for-python-repos/</link>
      <pubDate>Tue, 23 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/a-useful-git-post-checkout-hook-for-python-repos/</guid>
      <description>&lt;p&gt;Every now and again, an innocent python developer checks out a new Git
branch then proceeds to bang their head against a bug caused by an
orphaned &lt;code&gt;.pyc&lt;/code&gt; file from the previous branch. Since &lt;code&gt;*.pyc&lt;/code&gt; files are
typically in the repo&amp;rsquo;s &lt;code&gt;.gitignore&lt;/code&gt; file, they are not removed when
switching branches and can cause issues if the corresponding &lt;code&gt;.py&lt;/code&gt; is
removed.&lt;/p&gt;

&lt;p&gt;This can be neatly addressed through a &amp;lsquo;post checkout&amp;rsquo; hook which
deletes all such files. Here is such a script, which also removes empty
folders and prints a summary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;#!/usr/bin/env bash&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Delete .pyc files and empty directories from root of project&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; ./&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;git rev-parse --show-cdup&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Clean-up&lt;/span&gt;
find . -name &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.DS_Store&amp;quot;&lt;/span&gt; -delete

&lt;span style=&#34;color: #f8f8f2&#34;&gt;NUM_PYC_FILES&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt; find . -name &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;*.pyc&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; wc -l &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; tr -d &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$NUM_PYC_FILES&lt;/span&gt; -gt &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;then&lt;/span&gt;
    find . -name &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;*.pyc&amp;quot;&lt;/span&gt; -delete
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\e[00;31mDeleted &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$NUM_PYC_FILES&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt; .pyc files\e[00m\n&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;fi&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;NUM_EMPTY_DIRS&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt; find . -type d -empty &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; wc -l &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; tr -d &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39; &amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;$NUM_EMPTY_DIRS&lt;/span&gt; -gt &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;then&lt;/span&gt;
    find . -type d -empty -delete
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;printf&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;\e[00;31mDeleted &lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;$NUM_EMPTY_DIRS&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt; empty directories\e[00m\n&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;fi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sample output:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://codeinthehole.com/images/screenshots/post-checkout.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Inspiration:&lt;/p&gt;

&lt;p&gt;&lt;blockquote class=&#34;twitter-tweet&#34;&gt;&lt;p&gt;Finally automated. Stop being bitten by
residual .pyc files when switching branches in git. &lt;a
href=&#34;http://t.co/JWZOst25Jy&#34;
title=&#34;http://stackoverflow.com/questions/1504724/a-git-hook-for-whenever-i-change-branches&#34;&gt;stackoverflow.com/questions/1504…&lt;/a&gt;&lt;/p&gt;&amp;mdash;
Maik Hoepfel (@maikhoepfel) &lt;a
href=&#34;https://twitter.com/maikhoepfel/status/318437021221806080&#34;&gt;March 31,
2013&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;//platform.twitter.com/widgets.js&#34;
charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
The above version is a extension of the snippets in the referenced
&lt;a href=&#34;http://stackoverflow.com/questions/1504724/a-git-hook-for-whenever-i-change-branches&#34;&gt;Stack Overflow
question&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Disable database access when writing unit tests in Django</title>
      <link>http://codeinthehole.com/tips/disable-database-access-when-writing-unit-tests-in-django/</link>
      <pubDate>Mon, 22 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/disable-database-access-when-writing-unit-tests-in-django/</guid>
      <description>&lt;p&gt;Consider this curio:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mock&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.utils.functional&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;curry&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;no_database&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;curry(&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;mock&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;patch,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;django.db.backends.util.CursorWrapper&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;Mock(side_effect&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;RuntimeError&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Using the database is not permitted&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This snippet creates a decorator that can wrap a test case or method and
raises an exception if the database is accessed. This can be useful if
you&amp;rsquo;re a puritan about &lt;em&gt;true&lt;/em&gt; unit tests.&lt;/p&gt;

&lt;p&gt;Use by wrapping a &lt;code&gt;TestCase&lt;/code&gt; subclass:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.test&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TestCase&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;@no_database&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;UnitTestCase&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(TestCase):&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.test&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TestCase&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;UnitTestCase&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(TestCase):&lt;/span&gt;

    &lt;span style=&#34;color: #a6e22e&#34;&gt;@no_database&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_something&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This snippet is a reformulation of one from Carl Meyer&amp;rsquo;s excellent
&lt;a href=&#34;http://pyvideo.org/video/699/testing-and-django&#34;&gt;&amp;lsquo;Testing and Django&amp;rsquo;&lt;/a&gt;
(about 24 minutes in).&lt;/p&gt;

&lt;p&gt;Challenge: create a similar decorator that prevents all file-system
access in a test method.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to install PIL on 64-bit Ubuntu 12.04</title>
      <link>http://codeinthehole.com/tips/how-to-install-pil-on-64-bit-ubuntu-1204/</link>
      <pubDate>Thu, 18 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/how-to-install-pil-on-64-bit-ubuntu-1204/</guid>
      <description>

&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;You want to install PIL on 64-bit Ubuntu 12.04 (Precise Pangolin).&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;With pip already installed, install the required development packages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install python-dev libjpeg-dev libfreetype6-dev zlib1g-dev
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and symlink the three image libraries into &lt;code&gt;/usr/lib&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo ln -s /usr/lib/&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;uname -i&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;-linux-gnu/libfreetype.so /usr/lib/
$ sudo ln -s /usr/lib/&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;uname -i&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;-linux-gnu/libjpeg.so /usr/lib/
$ sudo ln -s /usr/lib/&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;uname -i&lt;span style=&#34;color: #e6db74&#34;&gt;`&lt;/span&gt;-linux-gnu/libz.so /usr/lib/
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;PIL should now install with support for JPEGs, PNGs and FreeType, as
indicated by the compilation output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;--------------------------------------------------------------------
PIL &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;.1.7 SETUP SUMMARY
--------------------------------------------------------------------
version       &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;.1.7
platform      linux2 &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;.7.3 &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;default, Apr &lt;span style=&#34;color: #ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2012&lt;/span&gt;, &lt;span style=&#34;color: #ae81ff&#34;&gt;22&lt;/span&gt;:39:59&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
              &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;GCC &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;.6.3&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
--------------------------------------------------------------------
*** TKINTER support not available
--- JPEG support available
--- ZLIB &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;PNG/ZIP&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; support available
--- FREETYPE2 support available
*** LITTLECMS support not available
--------------------------------------------------------------------
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;common-problems&#34;&gt;Common problems&lt;/h3&gt;

&lt;h4 id=&#34;missing-image-libraries&#34;&gt;Missing image libraries&lt;/h4&gt;

&lt;p&gt;If the image libraries are not installed and available in &lt;code&gt;/usr/lib&lt;/code&gt;,
you&amp;rsquo;ll see something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;--------------------------------------------------------------------
PIL &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;.1.7 SETUP SUMMARY
--------------------------------------------------------------------
version       &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;.1.7
platform      linux2 &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;.7.3 &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;default, Apr &lt;span style=&#34;color: #ae81ff&#34;&gt;20&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2012&lt;/span&gt;, &lt;span style=&#34;color: #ae81ff&#34;&gt;22&lt;/span&gt;:39:59&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
              &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;GCC &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;.6.3&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;
--------------------------------------------------------------------
*** TKINTER support not available
*** JPEG support not available
*** ZLIB &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;PNG/ZIP&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; support not available
*** FREETYPE2 support not available
*** LITTLECMS support not available
--------------------------------------------------------------------
To add a missing option, make sure you have the required
library, and &lt;span style=&#34;color: #f8f8f2&#34;&gt;set&lt;/span&gt; the corresponding ROOT variable in the
setup.py script.
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;missing-python-headers&#34;&gt;Missing python headers&lt;/h4&gt;

&lt;p&gt;Without &lt;code&gt;python-dev&lt;/code&gt;, you&amp;rsquo;ll see something that ends with the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;...

running build_ext

building &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;_imaging&amp;#39;&lt;/span&gt; extension

creating build/temp.linux-x86_64-2.7

creating build/temp.linux-x86_64-2.7/libImaging

gcc -pthread -fno-strict-aliasing -DNDEBUG -g -fwrapv -O2 -Wall -Wstrict-prototypes -fPIC -IlibImaging -I/usr/include -I/usr/local/include -I/usr/include/python2.7 -c _imaging.c -o build/temp.linux-x86_64-2.7/_imaging.o

_imaging.c:75:20: fatal error: Python.h: No such file or directory

compilation terminated.

error: &lt;span style=&#34;color: #f8f8f2&#34;&gt;command&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;gcc&amp;#39;&lt;/span&gt; failed with &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt; status &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;Yes, this has been written about before. This is just my note-to-self
that I can refer others to - I also wanted to include the common error
messages that people will search for.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.sandersnewmedia.com/why/2012/04/16/installing-pil-virtualenv-ubuntu-1204-precise-pangolin/&#34;&gt;Installing PIL in a virtualenv on Ubuntu 12.04 Precise
Pangolin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jj.isgeek.net/2011/09/install-pil-with-jpeg-support-on-ubuntu-oneiric-64bits/&#34;&gt;Install PIL with JPEG support on Ubuntu Oneric
64bit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.saltycrane.com/blog/2010/10/how-install-pil-ubuntu/&#34;&gt;How to install PIL on
Ubuntu&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Cacheback - asynchronous cache refreshing for Django</title>
      <link>http://codeinthehole.com/projects/cacheback-asynchronous-cache-refreshing-for-django/</link>
      <pubDate>Sun, 02 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/projects/cacheback-asynchronous-cache-refreshing-for-django/</guid>
      <description>

&lt;p&gt;Inspired by &lt;a href=&#34;http://jacobian.org/&#34;&gt;Jacob Kaplan-Moss&lt;/a&gt;&amp;rsquo;s excellent talk
&amp;ldquo;&lt;a href=&#34;http://www.oscon.com/oscon2012/public/schedule/detail/24030&#34;&gt;Django doesn&amp;rsquo;t scale&lt;/a&gt;&amp;rdquo; at
this year&amp;rsquo;s OSCon, I&amp;rsquo;ve put together a Django package for re-populating
caches asynchronously.&lt;/p&gt;

&lt;p&gt;It provides a simple API for wrapping expensive read operations that
caches results and uses &lt;a href=&#34;http://celeryproject.org/&#34;&gt;Celery&lt;/a&gt; to
repopulate items when they become stale. It can be used as a decorator
for simple cases but provides an extensible class for more fine-grained
control. It also provides helper classes for working with querysets.&lt;/p&gt;

&lt;p&gt;The package is MIT-licensed, published to
&lt;a href=&#34;http://pypi.python.org/pypi/django-cacheback&#34;&gt;PyPI&lt;/a&gt; and the source is
available on
&lt;a href=&#34;https://github.com/codeinthehole/django-cacheback&#34;&gt;Github&lt;/a&gt;. It&amp;rsquo;s best
explained with an &amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Consider a view that renders a user&amp;rsquo;s tweets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.shortcuts&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myproject.twitter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;show_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render(request,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; 
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets(username)})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This works fine but the &lt;code&gt;fetch_tweets&lt;/code&gt; function involves a HTTP
round-trip and is slow. Enter caching.&lt;/p&gt;

&lt;h4 id=&#34;basic-caching&#34;&gt;Basic caching&lt;/h4&gt;

&lt;p&gt;Performance can be improved using Django&amp;rsquo;s &lt;a href=&#34;https://docs.djangoproject.com/en/dev/topics/cache/?from=olddocs#the-low-level-cache-api&#34;&gt;low-level cache
API&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.shortcuts&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.cache&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myproject.twitter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;show_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render(request,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; 
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_cached_tweets(username)})&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;fetch_cached_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(username):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(username)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets(username)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;set(username,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now tweets are cached for 15 minutes after they are first fetched, using
the twitter username as a key. This is obviously a performance
improvement but the shortcomings of this approach are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For a cache miss, the tweets are fetched synchronously, blocking
code execution and leading to a slow response time.&lt;/li&gt;
&lt;li&gt;This in turn exposes exposes the view to a &amp;lsquo;&lt;a href=&#34;http://en.wikipedia.org/wiki/Cache_stampede&#34;&gt;cache
stampede&lt;/a&gt;&amp;rsquo; where
multiple expensive reads run simultaneously when the cached item
expires. Under heavy load, this can bring your site down.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;procrastinate-instead&#34;&gt;Procrastinate instead&lt;/h4&gt;

&lt;p&gt;For most applications, it&amp;rsquo;s not actually essential that the cache is
refreshed immediately - it&amp;rsquo;s acceptable to return stale results and
update the cache asynchronously (so-called &lt;a href=&#34;http://en.wikipedia.org/wiki/Eventual_consistency&#34;&gt;&amp;lsquo;Eventual
Consistency&amp;rsquo;&lt;/a&gt;). This
is desirable as it means all reads are fast and prevents cache
stampedes.&lt;/p&gt;

&lt;h4 id=&#34;using-celery&#34;&gt;Using Celery&lt;/h4&gt;

&lt;p&gt;Consider an alternative implementation that uses a Celery task to
repopulate the cache.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.shortcuts&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.cache&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myproject.tasks&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;update_tweets&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;show_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render(request,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; 
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_cached_tweets(username)})&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;fetch_cached_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(username,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lifetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(username)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# Scenario 1: Cache miss - return empty result set and trigger a refresh&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;update_tweets&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;delay(username,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lifetime)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;expiry&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;expiry&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;now():&lt;/span&gt;
            &lt;span style=&#34;color: #75715e&#34;&gt;# Scenario 2: Cached item is stale - return it but trigger a refresh&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;update_tweets&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;delay(username,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lifetime)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where the &lt;code&gt;myproject.tasks.update_tweets&lt;/code&gt; task is implemented as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;celery&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;task&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.cache&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myproject.twitter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;@task&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;update_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(username,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ttl):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets(username)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;now&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;now()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;set(username,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(tweets,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ttl),&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2592000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Items are stored in the cache as tuples &lt;code&gt;(data, expiry_timestamp)&lt;/code&gt;
using Memcache&amp;rsquo;s maximum expiry setting (2592000 seconds). By using
this value, we are effectively bypassing memcache&amp;rsquo;s replacement
policy in favour of our own.&lt;/li&gt;
&lt;li&gt;As the comments indicate, there are two replacements scenarios to
consider:

&lt;ol&gt;
&lt;li&gt;Cache miss. In this case, we don&amp;rsquo;t have any data (stale or
otherwise) to return. In the example above, we trigger an
asynchronous refresh and return an empty result set. In other
scenarios, it may make sense to perform a synchronous refresh.&lt;/li&gt;
&lt;li&gt;Cache hit but with stale data. Here we return the stale data but
trigger a Celery task to refresh the cached item.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This pattern of re-populating the cache asynchronously works well.
Indeed it is the basic of the Cacheback package.&lt;/p&gt;

&lt;h4 id=&#34;using-cacheback&#34;&gt;Using Cacheback&lt;/h4&gt;

&lt;p&gt;Here&amp;rsquo;s the same functionality implemented using the &lt;code&gt;cacheback&lt;/code&gt;
function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.shortcuts&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.cache&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myproject.twitter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cacheback.decorators&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cacheback&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;show_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_cached_tweets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cacheback(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_on_miss&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;False)(fetch_tweets)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render(request,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; 
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_cached_tweets(username)})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;cacheback&lt;/code&gt; function provides a wrapper function for the
&lt;code&gt;fetch_tweets&lt;/code&gt; function. When called, the wrapper will generate a cache
key based on the module path of the wrapped function and the passed args
and kwargs. It then checks the cache and if there isn&amp;rsquo;t a valid result
it will serialise the function and its args so it can be executed
asynchronously by a Celery task.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cacheback&lt;/code&gt; function can also be used as a decorator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cacheback.decorators&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cacheback&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;@cacheback&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;fetch_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(username):&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or for more fine-grained control: using a subclass of
&lt;code&gt;cacheback.base.Job&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.shortcuts&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.cache&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myproject.twitter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cacheback.base&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Job&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;show_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render(request,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; 
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FetchTweets()&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(username)})&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;FetchTweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(Job):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;expiry&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;fetch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username):&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets(username)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While only the &lt;code&gt;fetch&lt;/code&gt; method must be implemented, the &lt;code&gt;cacheback.Job&lt;/code&gt;
class provides several other overridable methods that provide
fine-grained control of the caching process.&lt;/p&gt;

&lt;h3 id=&#34;interested&#34;&gt;Interested?&lt;/h3&gt;

&lt;p&gt;Check-out the
&lt;a href=&#34;http://django-cacheback.readthedocs.org/en/latest/&#34;&gt;documentation&lt;/a&gt; for
more information. Comments and feedback welcome.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use models for uploads</title>
      <link>http://codeinthehole.com/tips/use-models-for-uploads/</link>
      <pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/use-models-for-uploads/</guid>
      <description>

&lt;p&gt;All Django developers will deal with file uploads at some point. I
contend that it&amp;rsquo;s a good practice to use models to capture the upload
metadata and to track processing status. This article explains how and
why.&lt;/p&gt;

&lt;h3 id=&#34;an-e-commerce-example&#34;&gt;An e-commerce example&lt;/h3&gt;

&lt;p&gt;Suppose your e-commerce application allows admins to upload CSV files to
update product stock levels (a common requirement). A typical file may
comprise a SKU and a stock level:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;9781231231999,0
9781231231999,4
9781231231999,2
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/dev/topics/http/file-uploads/?from=olddocs&#34;&gt;Django&amp;rsquo;s
docs&lt;/a&gt;
detail a common pattern for dealing with file uploads such as this. The
steps are generally:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Validate the form submission;&lt;/li&gt;
&lt;li&gt;Write upload data to permanent storage;&lt;/li&gt;
&lt;li&gt;Process the file;&lt;/li&gt;
&lt;li&gt;Delete the file (optional)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle_upload&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;method&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;UploadFileForm(request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;POST,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FILES)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;is_valid():&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;handle_uploaded_file(request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FILES[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;HttpResponseRedirect(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/success/url/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;UploadFileForm()&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render_to_response(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;upload.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;form})&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle_uploaded_file&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(f):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/tmp/somefile.txt&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(filepath,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;wb+&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dest:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chunk&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;chunks():&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;dest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(chunk)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;process_file(filepath)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;process_file&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(filepath):&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This works fine.&lt;/p&gt;

&lt;p&gt;However, it&amp;rsquo;s often desirable to collect audit information about which
files have been processed, how long processing took and who uploaded
them. Of course, this can be addressed by logging but a more elegant
solution to use a simple audit model as well. Consider an alternative
implementation of &lt;code&gt;handle_uploaded_file&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle_uploaded_file&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(user,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/tmp/somefile.txt&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(filepath,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;wb+&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dest:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chunk&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;chunks():&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;dest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(chunk)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StockUpload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;create(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath,&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;uploaded_by&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;process()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where we&amp;rsquo;re now passing the logged-in user too.&lt;/p&gt;

&lt;p&gt;The model definition for &lt;code&gt;StockUpload&lt;/code&gt; may look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.db&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.utils.translation&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ugettext_lazy&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;StockUpload&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Model):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;CharField(max_length&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# Upload audit information&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;uploaded_by&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ForeignKey(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;auth.User&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;date_uploaded&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DateTimeField(auto_now_add&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;True)&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# Processing audit information&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;PENDING,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PROCESSED,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FAILED&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Pending&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Processed&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Failed&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;STATUSES&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(PENDING,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_(PENDING)),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(PROCESSED,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_(PROCESSED)),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(FAILED,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_(FAILED)),&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;CharField(max_length&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;choices&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;STATUSES,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PENDING)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;processing_description&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;TextField(blank&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;True,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;True)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;num_records&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PositiveIntegerField()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;date_start_processing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DateTimeField(null&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;True)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;date_end_processing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DateTimeField(null&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;True)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;process&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;date_start_processing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;now()&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #75715e&#34;&gt;# process upload data, &lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Exception&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;e:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_mark_failed(unicode(e))&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_mark_processed(num_records)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_mark_processed&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;num_records,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;description&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;None):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PROCESSED&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;date_end_processing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;now()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;num_records&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;num_records&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;processing_description&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;description&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;save()&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_mark_failed&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;description):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FAILED&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;processing_description&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;description&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;save()&lt;/span&gt;

    &lt;span style=&#34;color: #a6e22e&#34;&gt;@property&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;basename(self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filename)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;was_processing_successful&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PROCESSED&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can go further and push the file creation into a manager method so
the filepath generation is removed from the view:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle_uploaded_file&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(f):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StockUpload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;create_from_stream(user,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;process()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code&gt;create_from_stream&lt;/code&gt; could be implemented as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;StockUploadManager&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Manager):&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;create_from_stream&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;generate_filename()&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(filepath,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;wb+&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dest:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chunk&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;chunks():&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;dest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(chunk)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;create(&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath,&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;uploaded_by&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and, if processing takes a while, push the work into Celery:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;@task&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;process_upload&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(upload_id):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StockUpload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;upload_id)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;process()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle_uploaded_file&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(user,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StockUpload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;create_from_stream(user,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;process_upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;delay(upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s a more complete implementation that uses a library of mine,
&lt;a href=&#34;https://github.com/codeinthehole/django-async-messages/&#34;&gt;django-async-messages&lt;/a&gt;,
to send a message back to the user who uploaded the file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# tasks.py&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;@task&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;process_upload&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(upload_id):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StockUpload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;upload_id)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;process()&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;was_processing_successful():&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;message_user(&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;uploaded_by,&lt;/span&gt; 
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Your upload %s was processed successfully, %d records imported&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filename,&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;num_records))&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;message_user(&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;uploaded_by,&lt;/span&gt; 
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Your upload %s could not be processed, error message: %s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filename,&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;processing_description,))&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# views.py&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle_upload&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;method&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;UploadFileForm(request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;POST,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FILES)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;is_valid():&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StockUpload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;create_from_stream(&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;user,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FILES[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;process_upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;delay(upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id)&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;HttpResponseRedirect(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/success/url/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;UploadFileForm()&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render_to_response(&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;upload.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;form},&lt;/span&gt; 
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;context_instance&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;RequestContext(request))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;The advantages of using a model are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It keeps your view simple - all processing logic is extracted away.&lt;/li&gt;
&lt;li&gt;The file processing logic is re-usable. You could use a management
command to process files specified at the commandline.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s easy to defer processing to a Celery worker.&lt;/li&gt;
&lt;li&gt;You can gather metrics on processing speed and keep audit
information on who is uploading what.&lt;/li&gt;
&lt;li&gt;You can write a simple &lt;code&gt;ListView&lt;/code&gt; to show the audit information of
uploaded files to admins.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above is just a toy example - there are lots of variations that can
be used. For instance, you may not want to keep the processing logic on
the model itself, it may make sense to have a separate function for
this. However the general notion of using a model to represent an
uploaded file and to track its state is a useful one.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A data migration for every Django project</title>
      <link>http://codeinthehole.com/tips/a-data-migration-for-every-django-project/</link>
      <pubDate>Sat, 16 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/a-data-migration-for-every-django-project/</guid>
      <description>

&lt;p&gt;How to use a South data migration to avoid accidentally sending emails
from example.com.&lt;/p&gt;

&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;Consider the following snippet from Django&amp;rsquo;s docs&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; for sending a
confirmation email:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.contrib.sites.models&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Site&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.core.mail&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;send_mail&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;register_for_newsletter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;current_site&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get_current()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;send_mail(&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Thanks for subscribing to %s alerts&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;current_site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name,&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Thanks for your subscription. We appreciate it.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;-The %s team.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;current_site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name,&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;editor@%s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;current_site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;domain,&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;[user&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;email]&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here the domain for the email sender is taken from the &amp;lsquo;current site&amp;rsquo;
instance, which is controlled by &lt;a href=&#34;https://docs.djangoproject.com/en/dev/ref/contrib/sites/?from=olddocs&#34;&gt;Django&amp;rsquo;s &amp;lsquo;Sites&amp;rsquo;
framework&lt;/a&gt;
and accessible by a custom method on the manager of the &lt;code&gt;Site&lt;/code&gt; model.&lt;/p&gt;

&lt;p&gt;By default, a &lt;code&gt;Site&lt;/code&gt; instance is created with domain and display name
&amp;lsquo;example.com&amp;rsquo; and you have to correct these values. This is often done
by hand using the admin suite.&lt;/p&gt;

&lt;p&gt;However, as with any manual change, it&amp;rsquo;s easy to forget and you&amp;rsquo;ll often
find Django projects sending email from &lt;code&gt;editor@example.com&lt;/code&gt;. Highly
embarassing.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Automation, of course! We can use a South data migration to set the
domain and display name correctly in each environment.&lt;/p&gt;

&lt;p&gt;First, ensure that each environment has settings for the domain and site
name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# conf/test.py&lt;/span&gt;
...
&lt;span style=&#34;color: #f8f8f2&#34;&gt;DOMAIN_NAME&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;test.project.client.tangentlabs.co.uk&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;SITE_NAME&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;project - client (test)&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# conf/stage.py&lt;/span&gt;
...
&lt;span style=&#34;color: #f8f8f2&#34;&gt;DOMAIN_NAME&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;stage.project.client.tangentlabs.co.uk&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;SITE_NAME&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;project - client (stage)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This snippet assumes you are using a set-up similar to that outlined by
&lt;a href=&#34;http://justcramer.com/2011/01/13/settings-in-django/&#34;&gt;David Cramer&lt;/a&gt;,
where an environmental variable specifies an additional settings file to
import. You don&amp;rsquo;t have to use this method; employing a
&lt;code&gt;settings_local.py&lt;/code&gt; file for each environment works just as well.&lt;/p&gt;

&lt;p&gt;Next, create a data migration to set the domain and display name
correctly in each environment. This migration sits most naturally in the
&lt;code&gt;django.contrib.sites&lt;/code&gt; app, but since that&amp;rsquo;s in Django&amp;rsquo;s core, it&amp;rsquo;s not
an option. You could use an existing app within your project to house
the migration or perhaps create a simple &amp;lsquo;core&amp;rsquo; or &amp;lsquo;data&amp;rsquo; app to house
data migrations that alter 3rd party apps.&lt;/p&gt;

&lt;p&gt;Since we&amp;rsquo;re not using the actual app where the &lt;code&gt;Site&lt;/code&gt; model is defined,
we must employ South&amp;rsquo;s &lt;code&gt;--freeze&lt;/code&gt; option to ensure the &lt;code&gt;Site&lt;/code&gt; model is
available to the migration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;python manage.py datamigration &amp;lt;appname&amp;gt; create_domains --freeze&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;sites
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally implement the &lt;code&gt;forwards&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;south.v2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DataMigration&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.conf&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;settings&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Migration&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(DataMigration):&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;forwards&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;orm):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;Site&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;orm[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;sites.Site&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;site&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;settings&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SITE_ID)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;domain&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;settings&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DOMAIN_NAME&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;settings&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SITE_NAME&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;save()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then your next deployment to each environment will perform the update.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;See
&lt;a href=&#34;https://docs.djangoproject.com/en/1.4/ref/contrib/sites/#getting-the-current-domain-for-display&#34;&gt;https://docs.djangoproject.com/en/1.4/ref/contrib/sites/#getting-the-current-domain-for-display&lt;/a&gt;&lt;/p&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>purl - immutable URL objects for Python</title>
      <link>http://codeinthehole.com/projects/purl-immutable-url-objects-for-python/</link>
      <pubDate>Thu, 19 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/projects/purl-immutable-url-objects-for-python/</guid>
      <description>

&lt;p&gt;Working with URLs in Python feels clunky when it should be pleasant. In
&lt;a href=&#34;http://docs.python.org/library/urlparse.html&#34;&gt;urlparse&lt;/a&gt; and
&lt;a href=&#34;http://docs.python.org/library/urllib.html&#34;&gt;urllib&lt;/a&gt;, the standard
library has all the functionality you need, but the code you have to
write is often cumbersome and unclear.&lt;/p&gt;

&lt;p&gt;For instance, here&amp;rsquo;s a typical test method that makes an assertion about
a query parameter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;urlparse&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_url_has_correct_query_parameter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;get_url_from_somewhere()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;parse_result&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;urlparse&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;parseurl(url)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;query_params&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;urlparse&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;parse_qs(parse_result&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;query)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;assertEqual(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;testing&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;query_params[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;][&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Not terrible, but could be more concise. I would prefer something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;somelibrary&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;URL&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_url_has_correct_query_parameter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;url&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;URL&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;from_string(get_url_from_somewhere())&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;assertEqual(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;testing&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;url&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;query_param(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Further, when working with webservices, you often need to build URLs
programmatically but it just isn&amp;rsquo;t easy enough in python. You often end
up using string formatting:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;urllib&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;URL_TEMPLATE&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;https://github.com/%s?w=%s&amp;#39;&lt;/span&gt; 
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;get_github_url&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(username):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;URL_TEMPLATE&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(urllib&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;quote(username),&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A preferable API might look something like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;somelibrary&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;URL&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;BASE_URL&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;URL&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;from_string(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;https://github.com/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; 
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;get_github_url&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(username):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BASE_URL&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path_segment(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;query_param(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;w&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a toy example, the problem is much worse when building more
complicated URLs.&lt;/p&gt;

&lt;h3 id=&#34;purl&#34;&gt;purl&lt;/h3&gt;

&lt;div class=&#34;admonition warning&#34;&gt;
    Warning - the code examples below are from version 0.2 of purl - please
    consult the &lt;a href=&#34;https://github.com/codeinthehole/purl&#34;&gt;Github documentation&lt;/a&gt; for the latest
    reference.
&lt;/div&gt;

&lt;p&gt;So I wrote a utility class to scratch this itch. It&amp;rsquo;s a simple immutable
&lt;code&gt;URL&lt;/code&gt; class that uses jQuery-style overloading of the attribute methods
to be both accessors and mutators.&lt;/p&gt;

&lt;p&gt;Install with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;pip&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;install&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;purl&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Construct URL instances as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;purl&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;URL&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Explicit constructor&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;URL(scheme&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;https&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;host&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;www.google.com&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/search&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;query&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;q=testing&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Use factory class-method&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;URL&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;from_string(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;https://www.google.com/search?q=testing&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Chain mutator methods (which each return a new instance)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;URL()&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;scheme(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;https&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;host(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;www.google.com&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;search&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;query_param(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;testing&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Combine to suit your use-case&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;URL&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;from_string(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;https://www.google.com&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;search&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; \
                                             &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;query_param(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;testing&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There&amp;rsquo;s a full range of inspection methods:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# Simple attributes&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;scheme()&lt;/span&gt;      &lt;span style=&#34;color: #75715e&#34;&gt;# &amp;#39;https&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;host()&lt;/span&gt;        &lt;span style=&#34;color: #75715e&#34;&gt;# &amp;#39;www.google.com&amp;#39; &lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;domain()&lt;/span&gt;      &lt;span style=&#34;color: #75715e&#34;&gt;# &amp;#39;www.google.com&amp;#39; - alias of host&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;port()&lt;/span&gt;        &lt;span style=&#34;color: #75715e&#34;&gt;# None (only returns something if explicitly set)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path()&lt;/span&gt;        &lt;span style=&#34;color: #75715e&#34;&gt;# &amp;#39;/search&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;query()&lt;/span&gt;       &lt;span style=&#34;color: #75715e&#34;&gt;# &amp;#39;q=testing&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fragment()&lt;/span&gt;    &lt;span style=&#34;color: #75715e&#34;&gt;# &amp;#39;&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Convenience methods for inspecing path, query and host&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path_segment(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;                   &lt;span style=&#34;color: #75715e&#34;&gt;# &amp;#39;search&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path_segments()&lt;/span&gt;                   &lt;span style=&#34;color: #75715e&#34;&gt;# (&amp;#39;search&amp;#39;,)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;query_param(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;                  &lt;span style=&#34;color: #75715e&#34;&gt;# &amp;#39;testing&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;query_param(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;as_list&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;True)&lt;/span&gt;    &lt;span style=&#34;color: #75715e&#34;&gt;# [&amp;#39;testing&amp;#39;]&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;query_param(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;lang&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;GB&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# &amp;#39;GB&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;query_params()&lt;/span&gt;                    &lt;span style=&#34;color: #75715e&#34;&gt;# {&amp;#39;q&amp;#39;: &amp;#39;testing&amp;#39;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;has_query_param(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;q&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;              &lt;span style=&#34;color: #75715e&#34;&gt;# True&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subdomains()&lt;/span&gt;                       &lt;span style=&#34;color: #75715e&#34;&gt;# [&amp;#39;www&amp;#39;, &amp;#39;google&amp;#39;, &amp;#39;com&amp;#39;]&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;subdomain(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;                       &lt;span style=&#34;color: #75715e&#34;&gt;# &amp;#39;www&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Each accessor method is overloaded to be a mutator method too, similar
to the jQuery API. Since the URL class is immutable, any mutation will
return a new URL instance.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;URL&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;from_string(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;https://github.com/codeinthehole&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Access&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path_segment(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# returns &amp;#39;codeinthehole&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Mutate (creates a new instance)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;new_url&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path_segment(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tangentlabs&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;# returns new URL object&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s a fancier example of building a URL:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;URL()&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;scheme(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;https&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;\
         &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;host(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;github.com&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;&lt;span style=&#34;color: #960050; background-color: #1e0010&#34;&gt;`&lt;/span&gt;\
         &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path_segment(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;codeinthehole&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;\
         &lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path_segment(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;purl&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;\
&lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;u&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;as_string()&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# returns &amp;#39;https://github.com/codeinthehole/purl&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/codeinthehole/purl&#34;&gt;Source and further details on
Github&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;alternatives&#34;&gt;Alternatives&lt;/h3&gt;

&lt;p&gt;There are a couple of URL classes already for python - however neither
had the exact API I was looking for.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.egenix.com/products/python/mxBase/mxURL/&#34;&gt;mxURL&lt;/a&gt; - Part
of the &amp;lsquo;eGenix.com mx Base Distribution&amp;rsquo;, this has quite a
comprehensie API. It comes bundles with other utility modules with
the &amp;lsquo;egenix-mx-base&amp;rsquo; package.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/zacharyvoase/urlobject/&#34;&gt;URLObject&lt;/a&gt; - There&amp;rsquo;s
nothing wrong with this implementation - it&amp;rsquo;s very similar to my one
above. The API&amp;rsquo;s not quite to my tastes but that&amp;rsquo;s purely subjective
thing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;There is a &lt;a href=&#34;http://www.reddit.com/r/Python/comments/sjkab/purl_an_immutable_url_class/&#34;&gt;discussion of this
post&lt;/a&gt;
on &lt;a href=&#34;http://www.reddit.com/r/Python/&#34;&gt;/r/Python&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Embedding HTML in Django messages</title>
      <link>http://codeinthehole.com/tips/embedding-html-in-django-messages/</link>
      <pubDate>Thu, 12 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/embedding-html-in-django-messages/</guid>
      <description>

&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;You want to embed HTML within a message using &lt;a href=&#34;https://docs.djangoproject.com/en/dev/ref/contrib/messages/&#34;&gt;Django&amp;rsquo;s messages
framework&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is a reasonably common requirement - for instance, it&amp;rsquo;s common to
want to include a link within the message, perhaps pointing the user
towards a sign-in or registration page.&lt;/p&gt;

&lt;p&gt;This problem exists as of Django 1.4 but may be solved within the
framework in later versions.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Use the &lt;code&gt;extra_tags&lt;/code&gt; &lt;a href=&#34;https://code.djangoproject.com/browser/django/branches/releases/1.4.X/django/contrib/messages/api.py#L15&#34;&gt;keyword
argument&lt;/a&gt;
to pass a flag indicating that the message is safe for rendering without
escaping. For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.contrib&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;messages&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;some_view&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request):&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;messages&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;success(request,&lt;/span&gt; 
                     &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Here is a &amp;lt;a href=&amp;quot;/&amp;quot;&amp;gt;link&amp;lt;/a&amp;gt;.&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
                     &lt;span style=&#34;color: #f8f8f2&#34;&gt;extra_tags&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;safe&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then use some simple template logic to determine whether to use the
&lt;code&gt;safe&lt;/code&gt; filter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;ul&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;{%&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;messages&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;%}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;message.tags&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;{%&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;safe&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;message.tags&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;%}&lt;/span&gt;
            &lt;span style=&#34;color: #75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;message&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;|&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;safe&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;}}&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;{%&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;%}&lt;/span&gt;
            &lt;span style=&#34;color: #75715e&#34;&gt;{{&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;}}&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;{%&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;endif&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;%}&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;li&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #75715e&#34;&gt;{%&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;endfor&lt;/span&gt; &lt;span style=&#34;color: #75715e&#34;&gt;%}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;ul&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s tempting to use the &lt;code&gt;safe&lt;/code&gt; filter for all messages but this opens
up a XSS security hole if you are not careful as it&amp;rsquo;s easy to include
user input verbatim in the message. For instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.contrib&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;messages&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;some_view&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;code&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;GET[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;code&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;messages&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;success(request,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;#39;%s&amp;#39; is not valid voucher code&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;code)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;leads to an XSS hole if the &lt;code&gt;safe&lt;/code&gt; filter is used on all messages as the
contents of &lt;code&gt;request.GET[&#39;code&#39;]&lt;/code&gt; cannot be trusted. It&amp;rsquo;s better to
explicitly indicate which messages can be safely rendered without
escaping.&lt;/p&gt;

&lt;p&gt;Taken from a &lt;a href=&#34;http://stackoverflow.com/questions/2053258/how-do-i-output-html-in-a-message-in-the-new-django-messages-framework&#34;&gt;Stack Overflow
answer&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>csvfilter - a Python command-line tool for manipulating CSV data</title>
      <link>http://codeinthehole.com/projects/csvfilter-a-python-command-line-tool-for-manipulating-csv-data/</link>
      <pubDate>Sun, 01 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/projects/csvfilter-a-python-command-line-tool-for-manipulating-csv-data/</guid>
      <description>

&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;You want a unix-like tool for manipulating CSV data from the
command-line.&lt;/p&gt;

&lt;p&gt;The standard tools &lt;code&gt;cut&lt;/code&gt; and &lt;code&gt;awk&lt;/code&gt; aren&amp;rsquo;t always suitable as they don&amp;rsquo;t
handle quoting and escaping which are common in CSVs.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Use the CSV manipulation function &lt;code&gt;csvfilter&lt;/code&gt;, a simple Python library
I&amp;rsquo;ve put together.&lt;/p&gt;

&lt;p&gt;Install with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;pip install csvfilter
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sample usage:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# Pluck columns 2, 5 and 6&lt;/span&gt;
cat in.csv &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; csvfilter -f &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;,5,6 &amp;gt; out.csv

&lt;span style=&#34;color: #75715e&#34;&gt;# Pluck all columns except 4&lt;/span&gt;
cat in.csv &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; csvfilter -f &lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt; -i &amp;gt; out.csv

&lt;span style=&#34;color: #75715e&#34;&gt;# Skip header row&lt;/span&gt;
cat in.csv &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; csvfilter -s &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &amp;gt; out.csv

&lt;span style=&#34;color: #75715e&#34;&gt;# Work with pipe-separated data&lt;/span&gt;
cat in.csv &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; csvfilter -s &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;,3 --delimiter&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;|&amp;quot;&lt;/span&gt; &amp;gt; out.csv
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above examples show &lt;code&gt;csvfilter&lt;/code&gt; processing &lt;code&gt;sys.STDIN&lt;/code&gt; but it can
also act directly on a file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;csvfilter -f &lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;,5,6 in.csv  &amp;gt; out.csv
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Help:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ csvfilter --help
Usage: csvfilter &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;options&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;

Options:
-h, --help            show this &lt;span style=&#34;color: #f8f8f2&#34;&gt;help&lt;/span&gt; message and &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt;
-f FIELDS, --fields&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;FIELDS
                        Specify which fields to pluck
-s SKIP, --skip&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;SKIP  Number of rows to skip
-d DELIMITER, --delimiter&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;DELIMITER
                        Delimiter of incoming CSV data
-i, --inverse         Invert the filter - ie drop the selected fields
--out-delimiter&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;OUT_DELIMITER
                        Delimiter to use &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; output
--out-quotechar&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;OUT_QUOTECHAR
                        Quote character to use &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; output
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is also a simple python API that allows you to add validators to
determine which rows are filtered out:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;csvfilter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Processor&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;contains_cheese&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(row):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;cheese&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;row&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;processor&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Processor(fields&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;processor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;add_validator(contains_cheese)&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;generator&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;processor&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;process(sys&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;stdin)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cheesy_row&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;generator:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;do_something(cheesy_row)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s possible to do basic CSV manipulation from the command-line using
&lt;code&gt;cut&lt;/code&gt; or &lt;code&gt;awk&lt;/code&gt; - for example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cat in.csv &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; cut -d &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;,&amp;quot;&lt;/span&gt; -f &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;,1,2 &amp;gt; out.csv
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or :&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cat in.csv &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;BEGIN {FS=&amp;quot;,&amp;quot;} {print $1,$2,$3}&amp;#39;&lt;/span&gt; &amp;gt; out.csv
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;However neither &lt;code&gt;cut&lt;/code&gt; or &lt;code&gt;awk&lt;/code&gt; make it easy to handle CSVs with escaped
characters - hence the motivation for this tool.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not the first to write such a utility - there are several others out
there (although none had quite the API I was looking for):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bitbucket.org/neilb/csvfix/src&#34;&gt;csvfix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://pypi.python.org/pypi/dropcols&#34;&gt;dropcols&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/onyxfish/csvkit&#34;&gt;csvkit&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;http://github.com/codeinthehole/csvfilter&#34;&gt;Source available on Github&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>