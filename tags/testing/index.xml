<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>testing on David Winterbottom</title>
    <link>https://codeinthehole.com/tags/testing/</link>
    <description>Recent content in testing on David Winterbottom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 26 Aug 2017 00:00:00 +0000</lastBuildDate><atom:link href="https://codeinthehole.com/tags/testing/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>A mnemonic for mock decorators</title>
      <link>https://codeinthehole.com/tips/a-mnemonic-for-mocks/</link>
      <pubDate>Sat, 26 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/a-mnemonic-for-mocks/</guid>
      <description>Using both @mock.patch decorators and py.test fixtures can be confusing as it&amp;rsquo;s not always clear what order arguments are being injected.
For instance, which of these is right? This:
@mock.patch.object(module, &amp;#39;collaborator_1&amp;#39;) @mock.patch.object(module, &amp;#39;collaborator_2&amp;#39;) def test_something_in_module(collaborator_1, collaborator_2, some_pytest_fixture): pass Or this?
@mock.patch.object(module, &amp;#39;collaborator_2&amp;#39;) @mock.patch.object(module, &amp;#39;collaborator_1&amp;#39;) def test_something_in_module(collaborator_1, collaborator_2, some_pytest_fixture): pass Or this?
@mock.patch.object(module, &amp;#39;collaborator_2&amp;#39;) @mock.patch.object(module, &amp;#39;collaborator_1&amp;#39;) def test_something_in_module(some_pytest_fixture, collaborator_1, collaborator_2): pass I&amp;rsquo;ve wasted considerable time using PDB to work out what is being injected where.</description>
    </item>
    
    <item>
      <title>Avoiding clashing Django migrations</title>
      <link>https://codeinthehole.com/tips/avoiding-clashing-django-migrations/</link>
      <pubDate>Sat, 31 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/avoiding-clashing-django-migrations/</guid>
      <description>Managing South migrations on a multi-developer Django project can be painful. Developers working on separate branches will often create migrations for the same app with the same migration number1. When merged into master, these clashing migrations can cause deployment hiccups as South will complain if migrations are applied out of order.
There are various techniques available for dealing with this2, but what we do at Yoyo is test for such clashes as part of our Travis continuous integration.</description>
    </item>
    
    <item>
      <title>purl, URI templates and generated tests</title>
      <link>https://codeinthehole.com/projects/purl-uri-templates-and-generated-tests/</link>
      <pubDate>Tue, 09 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/projects/purl-uri-templates-and-generated-tests/</guid>
      <description>TLDR: Parameterised tests are a useful testing technique. Both Nose and py.test support them.
URI templates in purl The newly released purl 0.8 (a URL library of mine) supports URI templates as per RFC 6570. These allow new URL instances to be created by passing bindings to a template instance.
&amp;gt;&amp;gt;&amp;gt; import purl &amp;gt;&amp;gt;&amp;gt; tpl = purl.Template(&amp;#39;http://www.google.com{path}&amp;#39;) &amp;gt;&amp;gt;&amp;gt; tpl.expand({&amp;#39;path&amp;#39;: [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]}).as_string() &amp;#39;http://www.google.com/a/b/c&amp;#39; Alternatively, you can expand template strings directly:</description>
    </item>
    
    <item>
      <title>Disable database access when writing unit tests in Django</title>
      <link>https://codeinthehole.com/tips/disable-database-access-when-writing-unit-tests-in-django/</link>
      <pubDate>Mon, 22 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/disable-database-access-when-writing-unit-tests-in-django/</guid>
      <description>Consider this curio:
import mock from django.utils.functional import curry no_database = curry( mock.patch, &amp;#39;django.db.backends.util.CursorWrapper&amp;#39;, Mock(side_effect=RuntimeError(&amp;#34;Using the database is not permitted&amp;#34;))) This snippet creates a decorator that can wrap a test case or method and raises an exception if the database is accessed. This can be useful if you&amp;rsquo;re a puritan about true unit tests.
Use by wrapping a TestCase subclass:
from django.test import TestCase @no_database() class UnitTestCase(TestCase): ... or method:</description>
    </item>
    
    <item>
      <title>Prefer WebTest to Django&#39;s test client for functional tests</title>
      <link>https://codeinthehole.com/tips/prefer-webtest-to-djangos-test-client-for-functional-tests/</link>
      <pubDate>Sun, 09 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/prefer-webtest-to-djangos-test-client-for-functional-tests/</guid>
      <description>Since watching Carl Meyer&amp;rsquo;s superb &amp;lsquo;Testing and Django&amp;rsquo; talk, I&amp;rsquo;ve been using Ian Bicking&amp;rsquo;s WebTest library for functional tests, via django-webtest. I&amp;rsquo;ve been really impressed and I&amp;rsquo;d like to stress one of Carl&amp;rsquo;s points - that using WebTest for functional tests is superior to using the Django client.
Why? Several reasons - here&amp;rsquo;s a few:
WebTest allows you to model a user&amp;rsquo;s experience much more closely as it is smart about mark-up.</description>
    </item>
    
    <item>
      <title>How to reload Django&#39;s URL config</title>
      <link>https://codeinthehole.com/tips/how-to-reload-djangos-url-config/</link>
      <pubDate>Wed, 21 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/how-to-reload-djangos-url-config/</guid>
      <description>Problem For some reason, you need to reload your Django URL config.
Normally, the root URL config will be imported and stored in memory when your server process starts up. Occasionally though, you may want to reload it. This can be the case if your URL configuration changes depending on certain parameters.
Solution You can reload the URL config using the following snippet:
import sys from django.conf import settings def reload_urlconf(urlconf=None): if urlconf is None: urlconf = settings.</description>
    </item>
    
    <item>
      <title>Testing HTTPS handling in Django</title>
      <link>https://codeinthehole.com/tips/testing-https-handling-in-django/</link>
      <pubDate>Thu, 01 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/testing-https-handling-in-django/</guid>
      <description>Problem You want to test how your application handles HTTPS requests.
Solution Use the following to simulate a HTTPS request using the Django test client:
from django.test.client import Client client = Client() response = client.get(url, **{&amp;#39;wsgi.url_scheme&amp;#39;: &amp;#39;https&amp;#39;}) Discussion The standard way to test for a HTTPS request is using the is_secure method of the django.http.HttpRequest class1 and its subclasses. As of Django 1.3, the implementation of this method checks whether an environmental variable HTTPS is equal to &amp;ldquo;on&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Introducing unittest-xml: testing XML in Python</title>
      <link>https://codeinthehole.com/projects/introducing-unittest-xml-testing-xml-in-python/</link>
      <pubDate>Fri, 13 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/projects/introducing-unittest-xml-testing-xml-in-python/</guid>
      <description>For some reason, I keep finding myself writing unit tests that need to make assertions about an XML document. To keep things DRY, I&amp;rsquo;ve packaged up my custom assertion methods as a PyPi module: unittest-xml. There&amp;rsquo;s a small chance it may be useful to others.
Sample Usage Enable the additional assert methods using a mixin:
import unittest from xmltest import XMLAssertions class SampleTestCase(unittest.TestCase, XMLAssertions): ... Now suppose that the expected XML from some SUT1 is:</description>
    </item>
    
    <item>
      <title>Coloured output while doing TDD with Django and Fabric</title>
      <link>https://codeinthehole.com/tips/coloured-output-while-doing-tdd-with-django-and-fabric/</link>
      <pubDate>Wed, 20 Apr 2011 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/coloured-output-while-doing-tdd-with-django-and-fabric/</guid>
      <description>I&amp;rsquo;m a big fan of using PHPUnit with console colours turned on (using the --colors option). Eg:
It helps gets into the natural &amp;ldquo;red, green, refactor&amp;rdquo; rhythm.
I&amp;rsquo;m currently totally immersed in Django, and greatly miss the lack of colour support within the &amp;ldquo;test&amp;rdquo; management command. A simple workaround for this is to use Fabric with a few modified color commands. Your fabric file should include the following:
from fabric.colors import _wrap_with green_bg = _wrap_with(&amp;#39;42&amp;#39;) red_bg = _wrap_with(&amp;#39;41&amp;#39;) # Set the list of apps to test env.</description>
    </item>
    
  </channel>
</rss>
