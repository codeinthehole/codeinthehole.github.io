<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>django on David Winterbottom</title>
    <link>https://codeinthehole.com/tags/django/</link>
    <description>Recent content in django on David Winterbottom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 13 Jun 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://codeinthehole.com/tags/django/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Vim text-objects for Python development</title>
      <link>https://codeinthehole.com/tips/vim-text-objects/</link>
      <pubDate>Thu, 13 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/vim-text-objects/</guid>
      <description>Text objects, as in the iw from ciw (&amp;ldquo;change inner word&amp;rdquo;), form an important part of your Vim mentalese1. This post details those that I find most useful for Python and Django development.
For brevity, the leading a (mnemonic: &amp;ldquo;a&amp;rdquo;n) or i (mnemonic: &amp;ldquo;inner&amp;rdquo;), that you combine with the following commands to form the full text-object, are omitted.
From core Vim:
 w → a word W → a WORD t → a HTML/XML tag s → a sentence p → a paragraph  From the (highly recommended) wellle/targets.</description>
    </item>
    
    <item>
      <title>Beware of changing the &#39;related name&#39; of a Django model field</title>
      <link>https://codeinthehole.com/news/oe-related-name-outage/</link>
      <pubDate>Mon, 18 Mar 2019 17:05:53 +0000</pubDate>
      
      <guid>https://codeinthehole.com/news/oe-related-name-outage/</guid>
      <description>I wrote up a lesson on the dangers of renaming the related_name of a Django model field  over on the Octopus Energy tech blog.</description>
    </item>
    
    <item>
      <title>Using a custom Sentry client</title>
      <link>https://codeinthehole.com/news/oe-tech-custom-sentry-client/</link>
      <pubDate>Mon, 16 Oct 2017 16:33:45 +0100</pubDate>
      
      <guid>https://codeinthehole.com/news/oe-tech-custom-sentry-client/</guid>
      <description>I wrote up a short tip on using a custom Sentry client.</description>
    </item>
    
    <item>
      <title>Why your Django models are fat</title>
      <link>https://codeinthehole.com/lists/why-your-models-are-fat/</link>
      <pubDate>Wed, 04 Oct 2017 10:30:02 +0000</pubDate>
      
      <guid>https://codeinthehole.com/lists/why-your-models-are-fat/</guid>
      <description>Because:
 You moved everything out of the views.py modules when you heard fat controllers were bad.
 And you&amp;rsquo;ve read that fat models are a good idea1.
 You need some extra functionality in a template and this is the easiest way to shoehorn it in. Eg:
&amp;lt;p&amp;gt;The current balance is {{ account.get_balance_via_three_network_calls_lol }}&amp;lt;/p&amp;gt; You can quickly solve your current problem by adding n more lines to that method (repeat ad infinitum)2.</description>
    </item>
    
    <item>
      <title>Django, ELB health checks and continuous delivery</title>
      <link>https://codeinthehole.com/news/oe-tech-elb-health-checks/</link>
      <pubDate>Thu, 05 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/news/oe-tech-elb-health-checks/</guid>
      <description>I wrote an article on Django, ELB health checks and continuous delivery.</description>
    </item>
    
    <item>
      <title>Testing for missing migrations in Django</title>
      <link>https://codeinthehole.com/news/oe-tech-missing-migrations/</link>
      <pubDate>Thu, 21 Jan 2016 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/news/oe-tech-missing-migrations/</guid>
      <description>Octopus Energy has a tech blog. I wrote an article on Testing for missing migrations in Django.</description>
    </item>
    
    <item>
      <title>Avoiding clashing Django migrations</title>
      <link>https://codeinthehole.com/tips/avoiding-clashing-django-migrations/</link>
      <pubDate>Sat, 31 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/avoiding-clashing-django-migrations/</guid>
      <description>Managing South migrations on a multi-developer Django project can be painful. Developers working on separate branches will often create migrations for the same app with the same migration number1. When merged into master, these clashing migrations can cause deployment hiccups as South will complain if migrations are applied out of order.
There are various techniques available for dealing with this2, but what we do at Yoyo is test for such clashes as part of our Travis continuous integration.</description>
    </item>
    
    <item>
      <title>Integrating Django application metrics into Zabbix</title>
      <link>https://codeinthehole.com/tips/integrating-django-application-metrics-into-zabbix/</link>
      <pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/integrating-django-application-metrics-into-zabbix/</guid>
      <description>At Tangent, we use Zabbix for monitoring and alerting. This is a note-to-self on how to configure application monitoring.
Management command You need a script that prints out a value to STDOUT. A simple management command suffices:
from django.core.management.base import BaseCommand, CommandError class Command(BaseCommand): def add_arguments(self, parser): parser.add_argument(&amp;#39;args&amp;#39;, nargs=&amp;#39;*&amp;#39;) def handle(self, *args, **options): if not args: print self.usage() return method_name = &amp;#39;fetch__%s&amp;#39; % args[0] if not hasattr(self, method_name): raise CommandError(&amp;#34;No method found with name &amp;#39;%s&amp;#39;&amp;#34; % method_name) print getattr(self, method_name)(*args[1:]) def usage(self): fetchers = [m for m in dir(self) if m.</description>
    </item>
    
    <item>
      <title>Continuously rebuild your project</title>
      <link>https://codeinthehole.com/tips/continuously-re-build-your-project/</link>
      <pubDate>Wed, 18 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/continuously-re-build-your-project/</guid>
      <description>New developers joining a project will often find that the project won&amp;rsquo;t build cleanly on their machine, and hours of time will be sunk into setting up the project so work can start. This is sad and expensive for all concerned.
This is a particular menace in agencies (or anywhere with lots of small projects) where a large team of developers need to jump between projects. Tools like Vagrant and Docker can help but aren&amp;rsquo;t the panacea they first seem to be1.</description>
    </item>
    
    <item>
      <title>The road to Oscar 1.0</title>
      <link>https://codeinthehole.com/projects/the-road-to-oscar-10/</link>
      <pubDate>Thu, 01 May 2014 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/projects/the-road-to-oscar-10/</guid>
      <description>Oscar 0.7 was released this week, a comparatively minor house-keeping release that allowed us to reduce our pull-request and issue backlogs. We have a plan for Oscar through 2014 and this article outlines the roadmap.
v1.0 We&amp;rsquo;re aiming to be v1.0 before the end of the year1. Oscar has been beta for nearly two years and its APIs are stabilising. We&amp;rsquo;re ready to commit to the backward compatibility responsibilities associated with coming out of beta.</description>
    </item>
    
    <item>
      <title>Command-line tips for effective release announcements</title>
      <link>https://codeinthehole.com/tips/command-line-tips-for-effective-release-announcements/</link>
      <pubDate>Thu, 16 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/command-line-tips-for-effective-release-announcements/</guid>
      <description>We finally released Oscar 0.6 last week. The process brought home the importance of writing your release notes as you go rather than at the end. It&amp;rsquo;s a real pain to extract the key changes from 1200 commits spread over the last 8 months. Lesson learnt.
This article is largely a note-to-self in case I have to repeat the process. However, if you do find yourself in a similar position, here are a few command-line tricks for analysing your git history.</description>
    </item>
    
    <item>
      <title>How to install PostGIS and GeoDjango on Ubuntu</title>
      <link>https://codeinthehole.com/tips/how-to-install-postgis-and-geodjango-on-ubuntu/</link>
      <pubDate>Fri, 04 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/how-to-install-postgis-and-geodjango-on-ubuntu/</guid>
      <description>Despite its extensive documentation, getting GeoDjango installed and configured can be a pain. Here are my notes for future reference:
Installation on Ubuntu 12.04 First, ensure your system locale is UTF8 as PostgreSQL uses it to determine its default encoding during installation:
$ export LANGUAGE=&amp;#34;en_US.UTF-8&amp;#34; $ export LANG=&amp;#34;en_US.UTF-8&amp;#34; $ export LC_ALL=&amp;#34;en_US.UTF-8&amp;#34; Now install dependencies:
$ sudo apt-get update $ sudo apt-get install postgresql-server-dev-9.1 postgresql-9.1-postgis  PostgreSQL should now be installed and running with UTF8 encodings.</description>
    </item>
    
    <item>
      <title>A deferred logging file handler for Django</title>
      <link>https://codeinthehole.com/tips/a-deferred-logging-file-handler-for-django/</link>
      <pubDate>Wed, 12 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/a-deferred-logging-file-handler-for-django/</guid>
      <description>At Tangent we handle environment-specific configuration of Django projects using the method outlined by David Cramer. This involves distinguishing between core settings (which we keep in core/default.py) and environment specific settings (eg core/stage.py, core/test.py). The standard settings.py module imports all defaults and then uses a enviromental shell variable to determine which environment settings module to import.
A problem One tricky issue with this arrangement is logging to file. Ideally, we want to define a single LOGGING dict in the default settings but have file logging use an environment-specific folder.</description>
    </item>
    
    <item>
      <title>Conditional logic in Django forms</title>
      <link>https://codeinthehole.com/tips/conditional-logic-in-django-forms/</link>
      <pubDate>Sat, 01 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/conditional-logic-in-django-forms/</guid>
      <description>The problem It&amp;rsquo;s common for UX professionals to design forms like the following:
where radio buttons are employed to split the form into sections, each of which can have it&amp;rsquo;s own fields which are only mandatory if the parent radio button is checked. Thus the validation logic is conditional on the submitted form data.
Such requirements are slightly tricky to capture in Django as they tread slightly outside the normal path of form validation.</description>
    </item>
    
    <item>
      <title>Disable database access when writing unit tests in Django</title>
      <link>https://codeinthehole.com/tips/disable-database-access-when-writing-unit-tests-in-django/</link>
      <pubDate>Mon, 22 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/disable-database-access-when-writing-unit-tests-in-django/</guid>
      <description>Consider this curio:
import mock from django.utils.functional import curry no_database = curry( mock.patch, &amp;#39;django.db.backends.util.CursorWrapper&amp;#39;, Mock(side_effect=RuntimeError(&amp;#34;Using the database is not permitted&amp;#34;))) This snippet creates a decorator that can wrap a test case or method and raises an exception if the database is accessed. This can be useful if you&amp;rsquo;re a puritan about true unit tests.
Use by wrapping a TestCase subclass:
from django.test import TestCase @no_database() class UnitTestCase(TestCase): ... or method:</description>
    </item>
    
    <item>
      <title>Altering Postgres table columns with South</title>
      <link>https://codeinthehole.com/tips/altering-postgres-table-columns-with-south/</link>
      <pubDate>Tue, 19 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/altering-postgres-table-columns-with-south/</guid>
      <description>Problem You&amp;rsquo;re using Postgres with Django.
You change a field type of one of your models, generate an --auto South migration and attempt to run it. However, South chokes on the new migration complaining that the data in the column cannot be cast to the new type.
For instance, I recently changed a CharField to a TimeField but the corresponding migration lead to:
Running migrations for stores: - Migrating forwards to 0009_auto__chg_field_openingperiod_start__chg_field_openingperiod_end.</description>
    </item>
    
    <item>
      <title>Prefer WebTest to Django&#39;s test client for functional tests</title>
      <link>https://codeinthehole.com/tips/prefer-webtest-to-djangos-test-client-for-functional-tests/</link>
      <pubDate>Sun, 09 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/prefer-webtest-to-djangos-test-client-for-functional-tests/</guid>
      <description>Since watching Carl Meyer&amp;rsquo;s superb &amp;lsquo;Testing and Django&amp;rsquo; talk, I&amp;rsquo;ve been using Ian Bicking&amp;rsquo;s WebTest library for functional tests, via django-webtest. I&amp;rsquo;ve been really impressed and I&amp;rsquo;d like to stress one of Carl&amp;rsquo;s points - that using WebTest for functional tests is superior to using the Django client.
Why? Several reasons - here&amp;rsquo;s a few:
 WebTest allows you to model a user&amp;rsquo;s experience much more closely as it is smart about mark-up.</description>
    </item>
    
    <item>
      <title>Cacheback - asynchronous cache refreshing for Django</title>
      <link>https://codeinthehole.com/projects/cacheback-asynchronous-cache-refreshing-for-django/</link>
      <pubDate>Sun, 02 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/projects/cacheback-asynchronous-cache-refreshing-for-django/</guid>
      <description>Inspired by Jacob Kaplan-Moss&amp;rsquo;s excellent talk &amp;ldquo;Django doesn&amp;rsquo;t scale&amp;rdquo; at this year&amp;rsquo;s OSCon, I&amp;rsquo;ve put together a Django package for re-populating caches asynchronously.
It provides a simple API for wrapping expensive read operations that caches results and uses Celery to repopulate items when they become stale. It can be used as a decorator for simple cases but provides an extensible class for more fine-grained control. It also provides helper classes for working with querysets.</description>
    </item>
    
    <item>
      <title>Use models for uploads</title>
      <link>https://codeinthehole.com/tips/use-models-for-uploads/</link>
      <pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/use-models-for-uploads/</guid>
      <description>All Django developers will deal with file uploads at some point. I contend that it&amp;rsquo;s a good practice to use models to capture the upload metadata and to track processing status. This article explains how and why.
An e-commerce example Suppose your e-commerce application allows admins to upload CSV files to update product stock levels (a common requirement). A typical file may comprise a SKU and a stock level:</description>
    </item>
    
    <item>
      <title>Vim macros for adding i18n support to Django templates</title>
      <link>https://codeinthehole.com/tips/vim-macros-for-adding-i18n-support-to-django-templates/</link>
      <pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/vim-macros-for-adding-i18n-support-to-django-templates/</guid>
      <description>Problem You want to add i18n support to an existing project. One part of this is modifying all templates to use the {% trans &amp;quot;...&amp;quot; %} block around all hard-coded strings.
When you have a lot of templates, this gets pretty tedious.
Solution Use Vim macros!
Macro 1 - Convert tag text To convert
&amp;lt;h1&amp;gt;Welcome to my site&amp;lt;/h1&amp;gt; to
&amp;lt;h1&amp;gt;{% trans &amp;#34;Welcome to my site&amp;#34; %}&amp;lt;/h1&amp;gt; use the macro</description>
    </item>
    
    <item>
      <title>A data migration for every Django project</title>
      <link>https://codeinthehole.com/tips/a-data-migration-for-every-django-project/</link>
      <pubDate>Sat, 16 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/a-data-migration-for-every-django-project/</guid>
      <description>How to use a South data migration to avoid accidentally sending emails from example.com.
Problem Consider the following snippet from Django&amp;rsquo;s docs1 for sending a confirmation email:
from django.contrib.sites.models import Site from django.core.mail import send_mail def register_for_newsletter(request): current_site = Site.objects.get_current() send_mail( &amp;#39;Thanks for subscribing to %salerts&amp;#39; % current_site.name, &amp;#39;Thanks for your subscription. We appreciate it.\n\n-The %steam.&amp;#39; % current_site.name, &amp;#39;editor@%s&amp;#39; % current_site.domain, [user.email] ) Here the domain for the email sender is taken from the &amp;lsquo;current site&amp;rsquo; instance, which is controlled by Django&amp;rsquo;s &amp;lsquo;Sites&amp;rsquo; framework and accessible by a custom method on the manager of the Site model.</description>
    </item>
    
    <item>
      <title>Django, Nginx, WSGI and encoded slashes</title>
      <link>https://codeinthehole.com/tips/django-nginx-wsgi-and-encoded-slashes/</link>
      <pubDate>Sat, 05 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/django-nginx-wsgi-and-encoded-slashes/</guid>
      <description>Problem You are serving a Django application using Nginx to proxy to an Apache server running mod_wsgi and you want to allow slashes in your URL keywords.
For example, you may want to edit some attribute of the page at URL /; hence, you want to use a URL regex of the form:
url(r&amp;#39;/edit/page/(?P&amp;lt;page_url&amp;gt;.*)/$&amp;#39;, ...) and use the URL /edit/page/%2F/ to edit this page, where the third path segment is URL-encoded.</description>
    </item>
    
    <item>
      <title>Embedding HTML in Django messages</title>
      <link>https://codeinthehole.com/tips/embedding-html-in-django-messages/</link>
      <pubDate>Thu, 12 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/embedding-html-in-django-messages/</guid>
      <description>Problem You want to embed HTML within a message using Django&amp;rsquo;s messages framework.
This is a reasonably common requirement - for instance, it&amp;rsquo;s common to want to include a link within the message, perhaps pointing the user towards a sign-in or registration page.
This problem exists as of Django 1.4 but may be solved within the framework in later versions.
Solution Use the extra_tags keyword argument to pass a flag indicating that the message is safe for rendering without escaping.</description>
    </item>
    
    <item>
      <title>How to reload Django&#39;s URL config</title>
      <link>https://codeinthehole.com/tips/how-to-reload-djangos-url-config/</link>
      <pubDate>Wed, 21 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/how-to-reload-djangos-url-config/</guid>
      <description>Problem For some reason, you need to reload your Django URL config.
Normally, the root URL config will be imported and stored in memory when your server process starts up. Occasionally though, you may want to reload it. This can be the case if your URL configuration changes depending on certain parameters.
Solution You can reload the URL config using the following snippet:
import sys from django.conf import settings def reload_urlconf(urlconf=None): if urlconf is None: urlconf = settings.</description>
    </item>
    
    <item>
      <title>Validating international postcodes in Django</title>
      <link>https://codeinthehole.com/tips/validating-international-postcodes-in-django/</link>
      <pubDate>Tue, 13 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/validating-international-postcodes-in-django/</guid>
      <description>Problem You want to validate a post/zip-code when you only know the country at runtime.
Solution Use this snippet to dynamically fetch a validation method from Django&amp;rsquo;s suite of &amp;ldquo;localflavor&amp;rdquo; form fields using the ISO 3166-1 two character country code.
def get_postcode_validator(country_code): # Django 1.3 uses &amp;#39;UK&amp;#39; instead of GB - this changes in 1.4 if country_code == &amp;#39;GB&amp;#39;: country_code = &amp;#39;UK&amp;#39; module_path = &amp;#39;django.contrib.localflavor.%s&amp;#39; % country_code.lower() try: module = __import__(module_path, fromlist=[&amp;#39;forms&amp;#39;]) except ImportError: # No forms module for this country return lambda x: x fieldname_variants = [&amp;#39;%sPostcodeField&amp;#39;, &amp;#39;%sPostCodeField&amp;#39;, &amp;#39;%sPostalCodeField&amp;#39;, &amp;#39;%sZipCodeField&amp;#39;,] for variant in fieldname_variants: fieldname = variant % country_code.</description>
    </item>
    
    <item>
      <title>Confoo 2012 presentations</title>
      <link>https://codeinthehole.com/talks/confoo-2012-presentations/</link>
      <pubDate>Sat, 03 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/talks/confoo-2012-presentations/</guid>
      <description>I gave two presentations at Confoo 2012 - below are the abstracts and slides.
Migrating from PHP to Python and Django Abstract:
 Many programmers cut their teeth with PHP before getting interested in Python. However, while the languages seem similar at first, there are many new concepts to grasp and a rich ecosystem of tools to master. This isn&amp;rsquo;t easy, but with the right advice, a strong PHP developer can become an excellent Python developer very quickly.</description>
    </item>
    
    <item>
      <title>Testing HTTPS handling in Django</title>
      <link>https://codeinthehole.com/tips/testing-https-handling-in-django/</link>
      <pubDate>Thu, 01 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/testing-https-handling-in-django/</guid>
      <description>Problem You want to test how your application handles HTTPS requests.
Solution Use the following to simulate a HTTPS request using the Django test client:
from django.test.client import Client client = Client() response = client.get(url, **{&amp;#39;wsgi.url_scheme&amp;#39;: &amp;#39;https&amp;#39;}) Discussion The standard way to test for a HTTPS request is using the is_secure method of the django.http.HttpRequest class1 and its subclasses. As of Django 1.3, the implementation of this method checks whether an environmental variable HTTPS is equal to &amp;ldquo;on&amp;rdquo;:</description>
    </item>
    
    <item>
      <title>Prefer data migrations to initial data</title>
      <link>https://codeinthehole.com/tips/prefer-data-migrations-to-initial-data/</link>
      <pubDate>Sat, 25 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/prefer-data-migrations-to-initial-data/</guid>
      <description>Django provides several mechanisms for loading initial data for models, such as leveraging JSON fixtures or files of raw SQL - James Bennett offers a good overview.
Each documented method involves initialising data as part of the syncdb event, either by loading a fixture file or by hooking into the syncdb signal. However, there is a serious pitfall with these techniques, as described in the Django docs:
 This is extremely convenient, but be careful: remember that the data will be refreshed every time you run syncdb.</description>
    </item>
    
    <item>
      <title>Rewriting codeinthehole.com</title>
      <link>https://codeinthehole.com/news/rewriting-codeintheholecom/</link>
      <pubDate>Fri, 06 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/news/rewriting-codeintheholecom/</guid>
      <description>I rewrote this blog recently with the following aims:
 to make it as easy as possible to create a new article, using reStructuredText (RST); to clean up and simplify the design, focussing on the readability of articles that include code snippets.  I knew that there were various static blogs out there, with many supporting RST, but I still fancied the challenge of crafting something specific to my needs.</description>
    </item>
    
    <item>
      <title>Console logging to STDOUT in Django</title>
      <link>https://codeinthehole.com/tips/console-logging-to-stdout-in-django/</link>
      <pubDate>Tue, 16 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/console-logging-to-stdout-in-django/</guid>
      <description>Problem By default in Python (and Django), the documented console handler emits to STDERR, but you want it to use STDOUT instead. This is often desired for management commands that run as cronjobs.
Solution For Python 2.6, use the following LOGGING config in your settings to specify a different output stream:
import sys LOGGING = { &amp;#39;handlers&amp;#39;: { &amp;#39;console&amp;#39;:{ &amp;#39;level&amp;#39;:&amp;#39;INFO&amp;#39;, &amp;#39;class&amp;#39;:&amp;#39;logging.StreamHandler&amp;#39;, &amp;#39;strm&amp;#39;: sys.stdout }, ... } } For Python 2.</description>
    </item>
    
    <item>
      <title>Running django cronjobs within a virtualenv</title>
      <link>https://codeinthehole.com/tips/running-django-cronjobs-within-a-virtualenv/</link>
      <pubDate>Thu, 11 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>https://codeinthehole.com/tips/running-django-cronjobs-within-a-virtualenv/</guid>
      <description>If you use virtual environments on your django servers, then getting manage.py commands to run from cron is a little tricky. You need to activate the virtualenv before running the command and so you might think that the following would work:
*/10 * * * * root source /var/www/mysite/virtualenvs/dev/bin/activate &amp;amp;&amp;amp; /var/www/mysite/build/dev/manage.py some_custom_command &amp;gt; /dev/null It doesn&amp;rsquo;t, although it&amp;rsquo;s tricky to spot why as /var/log/syslog doesn&amp;rsquo;t give much away (Debian-specific of course).</description>
    </item>
    
  </channel>
</rss>
