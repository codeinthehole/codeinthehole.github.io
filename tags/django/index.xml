<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Django on David Winterbottom</title>
    <link>http://codeinthehole.com/tags/django/index.xml</link>
    <description>Recent content in Django on David Winterbottom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <atom:link href="http://codeinthehole.com/tags/django/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Avoiding clashing Django migrations</title>
      <link>http://codeinthehole.com/tips/avoiding-clashing-django-migrations/</link>
      <pubDate>Sat, 31 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/avoiding-clashing-django-migrations/</guid>
      <description>&lt;p&gt;Managing South migrations on a multi-developer Django project can be
painful. Developers working on separate branches will often create
migrations for the same app with the same migration number&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. When
merged into master, these clashing migrations can cause deployment
hiccups as South will complain if migrations are applied out of order.&lt;/p&gt;

&lt;p&gt;There are various techniques available for dealing with this&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, but
what we do at &lt;a href=&#34;http://justyoyo.com/&#34;&gt;Yoyo&lt;/a&gt; is test for such clashes as
part of our Travis continuous integration.&lt;/p&gt;

&lt;p&gt;This is done by calling a &lt;code&gt;makefile&lt;/code&gt; target from &lt;code&gt;.travis.yml&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# .travis.yml&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;language&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;python&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;python&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2.7&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;install&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;make virtualenv&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;script&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;- make test&lt;/span&gt;
    &lt;span style=&#34;color: #ae81ff&#34;&gt;- make migration_test&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where the &lt;code&gt;migration_test&lt;/code&gt; target is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# makefile&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;MIGRATION_CLASHES&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;shell find . -type f -name &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;*.py&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep -o &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.*/migrations/[0-9]\+&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; uniq -c &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;$$1 &amp;gt; 1 {print $$0}&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;migration_test&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt; -n &lt;span style=&#34;color: #66d9ef&#34;&gt;$(&lt;/span&gt;MIGRATION_CLASHES&lt;span style=&#34;color: #66d9ef&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;||&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here the &lt;code&gt;$(shell ...)&lt;/code&gt; call extracts the app name and migration number
from all migration files then uses &lt;code&gt;awk&lt;/code&gt; to look for clashes. If any are
found, the Travis build will fail and the console output should reveal
which apps have clashes.&lt;/p&gt;

&lt;p&gt;This works best if you only allow fast-forward commits into master
(something we do at &lt;a href=&#34;http://justyoyo.com/&#34;&gt;Yoyo&lt;/a&gt;). Doing this forces you
to merge master back into your pull request branch and allows Travis to
catch migration clashes before it is merged. Then any conflicts can be
resolved by renumbering or recreating any migrations not yet merged to
master.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;I&amp;rsquo;m only talking about Django versions less than 1.7 - I&amp;rsquo;m not
sure if this is still an issue in more modern Django versions.&lt;/p&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li id=&#34;fn:2&#34;&gt;&lt;p&gt;As noted by the &lt;a href=&#34;http://south.readthedocs.org/en/latest/tutorial/part5.html&#34;&gt;South
docs&lt;/a&gt;,
you can run the migrations with the &lt;code&gt;--merge&lt;/code&gt; option although this
generally means a manual intervention in your deployment process
which isn&amp;rsquo;t ideal.&lt;/p&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Integrating Django application metrics into Zabbix</title>
      <link>http://codeinthehole.com/tips/integrating-django-application-metrics-into-zabbix/</link>
      <pubDate>Wed, 22 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/integrating-django-application-metrics-into-zabbix/</guid>
      <description>

&lt;p&gt;At &lt;a href=&#34;http://www.tangentsnowball.com&#34;&gt;Tangent&lt;/a&gt;, we use
&lt;a href=&#34;http://www.zabbix.com/&#34;&gt;Zabbix&lt;/a&gt; for monitoring and alerting. This is a
note-to-self on how to configure application monitoring.&lt;/p&gt;

&lt;h3 id=&#34;management-command&#34;&gt;Management command&lt;/h3&gt;

&lt;p&gt;You need a script that prints out a value to STDOUT. A simple management
command suffices:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.core.management.base&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseCommand,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CommandError&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Command&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(BaseCommand):&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;options):&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;usage()&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;method_name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;fetch_%s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;args[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;not&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;hasattr(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;method_name):&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;CommandError(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;No method found with name &amp;#39;%s&amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;method_name)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getattr(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;method_name)(&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:])&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;usage&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetchers&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[m&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;m&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dir(self)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;m&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;startswith(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;fetch&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)]&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;descriptions&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[]&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetcher&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetchers:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;method&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;getattr(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetcher)&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;docstring&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;__doc__&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;strip()&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;__doc__&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;lt;no description&amp;gt;&amp;quot;&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;descriptions&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;append(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; - %s : %s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetcher&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;split(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;_&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)[&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;docstring))&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Available fetchers:&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;%s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(descriptions)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This uses dynamic dispatch to call &amp;ldquo;fetcher&amp;rdquo; methods with name
&lt;code&gt;fetch_%s&lt;/code&gt; where the first argument defines the format variable. Eg, a
method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;fetch_num_users&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    Fetch number of users&lt;/span&gt;
&lt;span style=&#34;color: #e6db74&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;User&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;all()&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;count()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;is called via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py application_metric num_users
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Without arguments, a list of fetchers is shown:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py application_metric
Available fetchers:
 - num_users : Fetch number of users
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s trivial to add more &lt;code&gt;fetch_*&lt;/code&gt; methods to emit additional metrics.&lt;/p&gt;

&lt;h3 id=&#34;zabbix-plugin&#34;&gt;Zabbix plugin&lt;/h3&gt;

&lt;p&gt;Hook this up to Zabbix by first creating a plugin script which calls the
management command, passing on an arg:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ cat /etc/zabbix/plugins/application
&lt;span style=&#34;color: #75715e&#34;&gt;#!/bin/bash&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;source&lt;/span&gt; /path/to/virtualenv/bin/activate &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; /path/to/project/manage.py application_metric &lt;span style=&#34;color: #f8f8f2&#34;&gt;$1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;then create the Zabbix &amp;ldquo;UserParameter&amp;rdquo; declaration which calls the
plugin script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ cat /etc/zabbix/zabbix_agentd.conf.d/application.conf
&lt;span style=&#34;color: #f8f8f2&#34;&gt;UserParameter&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;application&lt;span style=&#34;color: #f92672&#34;&gt;[&lt;/span&gt;*&lt;span style=&#34;color: #f92672&#34;&gt;]&lt;/span&gt;,/etc/zabbix/plugins/application &lt;span style=&#34;color: #f8f8f2&#34;&gt;$1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;application[*]&lt;/code&gt; syntax means that you can configure various &amp;ldquo;Items&amp;rdquo;
in Zabbix like &lt;code&gt;application[num_orders]&lt;/code&gt; and &lt;code&gt;application[num_users]&lt;/code&gt;
and the bracketed string will get passed all the way through to the
management command.&lt;/p&gt;

&lt;p&gt;Now restart Zabbix to pick up the new conf file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ /etc/init.d/zabbix-agent restart
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;zabbix-dashboard&#34;&gt;Zabbix dashboard&lt;/h3&gt;

&lt;p&gt;In the Zabbix web dashboard add new &amp;ldquo;Items&amp;rdquo; that use this new
&amp;ldquo;UserParameter&amp;rdquo;. Add a new &amp;ldquo;Item&amp;rdquo; by navigating through
&lt;code&gt;Configuration &amp;gt; Hosts &amp;gt; Items &amp;gt; Create item&lt;/code&gt;. In the resulting form,
set the &amp;ldquo;Key&amp;rdquo; to, say, &lt;code&gt;application[num_users]&lt;/code&gt; to pass &lt;code&gt;num_users&lt;/code&gt; as
the first argument through to the management command.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s it: this metric will now be collected by Zabbix and can be
used for graphing and alerting.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Continuously rebuild your project</title>
      <link>http://codeinthehole.com/tips/continuously-re-build-your-project/</link>
      <pubDate>Wed, 18 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/continuously-re-build-your-project/</guid>
      <description>

&lt;p&gt;New developers joining a project will often find that the project won&amp;rsquo;t
build cleanly on their machine, and hours of time will be sunk into
setting up the project so work can start. This is sad and expensive for
all concerned.&lt;/p&gt;

&lt;p&gt;This is a particular menace in agencies (or anywhere with lots of small
projects) where a large team of developers need to jump between
projects. Tools like &lt;a href=&#34;http://www.vagrantup.com&#34;&gt;Vagrant&lt;/a&gt; and
&lt;a href=&#34;http://www.docker.com/&#34;&gt;Docker&lt;/a&gt; can help but aren&amp;rsquo;t the panacea they
first seem to be&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;Counter this by using continuous integration to build your project from
scratch. Then any changes that break the build process (such as database
schema changes not applying correctly) will be spotted early. New team
members will be dishing out high-fives when their development
environment is built and primed with sample data sixty seconds after
cloning the repo.&lt;/p&gt;

&lt;h3 id=&#34;tips&#34;&gt;Tips&lt;/h3&gt;

&lt;p&gt;It should be trivial to get a project working locally. At
&lt;a href=&#34;http://www.tangentsnowball.com/&#34;&gt;Tangent&lt;/a&gt;, projects use a &lt;code&gt;makefile&lt;/code&gt;
for common tasks. Setting up a working version of the project is as
simple as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ make 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It&amp;rsquo;s helpful if you can template new projects to embed good practices
like this. We frequently use Django and maintain a &lt;a href=&#34;https://github.com/tangentlabs/tangent-django-boilerplate/&#34;&gt;boilerplate Django
project&lt;/a&gt; for
this purpose. It includes a
&lt;a href=&#34;https://github.com/tangentlabs/tangent-django-boilerplate/blob/master/makefile&#34;&gt;makefile&lt;/a&gt;
along these lines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# Build a working version of the project&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;clean&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;virtualenv&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;database&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Delete all temporary or untracked files&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;clean&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; 
    -find . -type f -name &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;*.pyc&amp;quot;&lt;/span&gt; -delete
    -rm -rf www/public/media/*

&lt;span style=&#34;color: #75715e&#34;&gt;# Update the virtualenv&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;virtualenv&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; 
    pip install -r www/deploy/requirements.txt

&lt;span style=&#34;color: #75715e&#34;&gt;# Create a database populated with data&lt;/span&gt;
&lt;span style=&#34;color: #a6e22e&#34;&gt;database&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; 
    python www/manage.py reset_db --router&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;default --noinput
    python www/manage.py syncdb --noinput
    python www/manage.py migrate
&lt;span style=&#34;color: #75715e&#34;&gt;    # Load any project fixtures to pre-populate the initial database&lt;/span&gt;
    python www/manage.py loaddata fixtures/*.json

&lt;span style=&#34;color: #a6e22e&#34;&gt;test&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; www &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; py.test

&lt;span style=&#34;color: #a6e22e&#34;&gt;ci&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;test&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;database&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Witness the &lt;code&gt;ci&lt;/code&gt; target which runs the test suite &lt;em&gt;and&lt;/em&gt; builds the
database, effectively smoke-testing that the migrations apply correctly
and the fixtures load (which is where we&amp;rsquo;ve historically had pain).&lt;/p&gt;

&lt;p&gt;We use &lt;a href=&#34;https://travis-ci.com/&#34;&gt;Travis&lt;/a&gt; for CI and our template
&lt;code&gt;.travis.yml&lt;/code&gt; looks a little like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;language&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;python&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;python&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;2.7&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;install&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;make virtualenv&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# Use the same database as used in production&lt;/span&gt;
&lt;span style=&#34;color: #ae81ff&#34;&gt;before_script&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;psql -c &amp;#39;CREATE ROLE test_role login createdb superuser;&amp;#39; -U postgres&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;psql -c &amp;#39;CREATE DATABASE test_db OWNER test_role;&amp;#39; -U postgres&lt;/span&gt;

&lt;span style=&#34;color: #ae81ff&#34;&gt;script&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
  &lt;span style=&#34;color: #f8f8f2&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;make ci&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which means that, &lt;em&gt;by default&lt;/em&gt;, all new projects will be built from
scratch as part of continuous integration. You should do this.&lt;/p&gt;

&lt;h3 id=&#34;django-specific-issues&#34;&gt;Django-specific issues&lt;/h3&gt;

&lt;p&gt;For the record, here&amp;rsquo;s some of the build issues we&amp;rsquo;ve encountered in
Django projects (both internal and external) Most stem from South
migrations, which worked fine when applied piecemeal by the incumbent
team but fail when run on a blank database. For instance:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Migrations fail to apply as there are dependencies between
migrations which haven&amp;rsquo;t been captured. This is easily solved by
employing South&amp;rsquo;s support for dependent migrations (eg adding
&lt;code&gt;depends_on&lt;/code&gt; to the relevant migration class).&lt;/li&gt;
&lt;li&gt;Migrations fail as they import models directly rather than using the
reconstituted models that South provides. This is a beginner mistake
really but still quite common. Fortunately, it&amp;rsquo;s trivial to fix.&lt;/li&gt;
&lt;li&gt;Migrations import and call functions that are no longer defined (but
did exist when the migration was originally written).&lt;/li&gt;
&lt;li&gt;Migrations create instances of models from &lt;em&gt;other&lt;/em&gt; apps where
South&amp;rsquo;s serialised version is out of sync with the database schema.
This can be tricky to fix as you can get circular dependencies
between migrations. Often you&amp;rsquo;ll need to rewrite migrations to
create models in the migrations of their own apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&#34;https://twitter.com/andrewingram&#34;&gt;Andrew Ingram&lt;/a&gt; has written up an
excellent summary of &lt;a href=&#34;http://andrewingram.net/2012/dec/common-pitfalls-django-south/#check-your-migrations-run-from-scratch&#34;&gt;common South
pitfalls&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;For instance, it&amp;rsquo;s not trivial to share folders with a Docker
container on OSX. See
&lt;a href=&#34;https://gist.github.com/codeinthehole/7ea69f8a21c67cc07293&#34;&gt;https://gist.github.com/codeinthehole/7ea69f8a21c67cc07293&lt;/a&gt;&lt;/p&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>The road to Oscar 1.0</title>
      <link>http://codeinthehole.com/projects/the-road-to-oscar-10/</link>
      <pubDate>Thu, 01 May 2014 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/projects/the-road-to-oscar-10/</guid>
      <description>

&lt;p&gt;&lt;img src=&#34;http://codeinthehole.com/images/oscar.png&#34; class=&#34;noborder align-right&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Oscar 0.7 was &lt;a href=&#34;http://django-oscar.readthedocs.org/en/latest/releases/v0.7.html&#34;&gt;released this
week&lt;/a&gt;,
a comparatively minor house-keeping release that allowed us to reduce
our pull-request and issue backlogs. We have a plan for Oscar through
2014 and this article outlines the roadmap.&lt;/p&gt;

&lt;h3 id=&#34;v1-0&#34;&gt;v1.0&lt;/h3&gt;

&lt;p&gt;We&amp;rsquo;re aiming to be v1.0 before the end of the year&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. Oscar has been
beta for nearly two years and its APIs are stabilising. We&amp;rsquo;re ready to
commit to the backward compatibility responsibilities associated with
coming out of beta.&lt;/p&gt;

&lt;p&gt;Plus, this will help &lt;a href=&#34;http://www.tangentsnowball.com/&#34;&gt;Tangent Snowball&lt;/a&gt;
(who sponsor Oscar&amp;rsquo;s development) promote Oscar to blue-chip or
&amp;ldquo;enterprise&amp;rdquo; clients, who feel nervous enough using open-source
e-commerce software, let alone &lt;em&gt;beta&lt;/em&gt; open-source software.&lt;/p&gt;

&lt;p&gt;There isn&amp;rsquo;t a lot to do before this milestone. Oscar&amp;rsquo;s philosophy is to
keep the core package lean and flexible, hence we don&amp;rsquo;t have a large
shopping list of features we want to add. Rather, there are a few areas
that need careful review to ensure they are flexible enough. Also, there
are a few topics that we want to research thoroughly in case they have
design implications.&lt;/p&gt;

&lt;p&gt;These are detailed here:&lt;/p&gt;

&lt;h4 id=&#34;product-dashboard&#34;&gt;Product dashboard&lt;/h4&gt;

&lt;p&gt;The current version uses a one-size-fits-all approach which is now
stretched to breaking point trying to handle a wide range of scenarios.
In particular, it&amp;rsquo;s not easy to administer group and variant products
using the current implementation&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;A new, carefully considered version will be built that provides separate
views and forms for the different work-flows. The new implementation
will be simpler than the current, provide a superior user experience and
be easier to customise and extend.&lt;/p&gt;

&lt;p&gt;This piece of work is scheduled to be looked at by Tangent&amp;rsquo;s UX team
shortly and should land in master over the summer.&lt;/p&gt;

&lt;h4 id=&#34;multi-tenancy&#34;&gt;Multi-tenancy&lt;/h4&gt;

&lt;p&gt;We&amp;rsquo;re aiming to provide better support for multi-tenanted sites where a
single dashboard is used to manage a product catalogue that can be used
across several sites. Several people on the mailing list have requested
this, and Tangent have a forthcoming project that will require a form of
this.&lt;/p&gt;

&lt;p&gt;This poses some tricky design questions around how products, categories
and offers are linked to sites. It&amp;rsquo;s tempting to slap a new many-to-many
relationship onto every core model that links them to sites, but this
may not be the right approach as it will add extra joins to SQL queries.
Some careful research is required: we don&amp;rsquo;t want to impair performance
for the many to satisfy the requirements of the few.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll be talking to several people at DjangoCon EU 2014 about how
Tangent can partner with other Oscar implementors to first design the
appropriate handling, and later drive forward an implementation.&lt;/p&gt;

&lt;h4 id=&#34;faceted-browsing-everywhere&#34;&gt;Faceted browsing everywhere&lt;/h4&gt;

&lt;p&gt;Oscar uses &lt;a href=&#34;http://haystacksearch.org/&#34;&gt;Haystack&lt;/a&gt; for search (with a
preference for &lt;a href=&#34;https://lucene.apache.org/solr/&#34;&gt;Solr&lt;/a&gt;) and has some
&lt;a href=&#34;https://github.com/tangentlabs/django-oscar/blob/master/oscar/apps/search/facets.py&#34;&gt;custom
helpers&lt;/a&gt;
to make working with facets easier. Facets are great for customers
whenever they&amp;rsquo;re browsing a list of products and it&amp;rsquo;s desirable to allow
faceting on all product browsing views. This would require using the
search back-end to drive all browsing views.&lt;/p&gt;

&lt;p&gt;Some &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!topicsearchin/django-oscar/haystack%7Csort:date%7Cspell:true/django-oscar/7cykIQSS7lw&#34;&gt;initial
work&lt;/a&gt;
has been done on this already. We intend to review and merge this into
master soon.&lt;/p&gt;

&lt;h4 id=&#34;research-topics&#34;&gt;Research topics&lt;/h4&gt;

&lt;p&gt;Some things to look into:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Oscar ships with a set of translation message files but doesn&amp;rsquo;t
currently provide built-in support for translating model content
into multiple languages. There are &lt;a href=&#34;https://www.djangopackages.com/grids/g/model-translation/&#34;&gt;various Django
libraries&lt;/a&gt;
that address this issue already. We need to research the best
approach (or approaches) and document how to use them with Oscar.&lt;/li&gt;
&lt;li&gt;Since Oscar is just a set of apps, it works with all existing
&lt;a href=&#34;https://www.djangopackages.com/grids/g/model-translation://www.djangopackages.com/grids/g/cms/&#34;&gt;Django CMS
packages&lt;/a&gt;.
However, more research is required to find the right way to
integrate content management. With its &amp;ldquo;promotions&amp;rdquo; app, Oscar
already provides some limited forms of merchandising but it might be
better to drop this app and provide better hooks for CMS packages to
manage all content. We&amp;rsquo;ll see.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;thanks&#34;&gt;Thanks&lt;/h3&gt;

&lt;p&gt;As ever, we&amp;rsquo;re hugely grateful to the work of the community: submitting
pull requests, adding translations, reporting bugs.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;d like to get involved, please see our &lt;a href=&#34;http://django-oscar.readthedocs.org/en/latest/internals/contributing/index.html&#34;&gt;contributing
guidelines&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;We&amp;rsquo;re using &lt;a href=&#34;http://semver.org/&#34;&gt;semantic versioning&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li id=&#34;fn:2&#34;&gt;&lt;p&gt;This is driven in part by the fact that Tangent haven&amp;rsquo;t had to
build a large-scale clothing site yet.&lt;/p&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Command-line tips for effective release announcements</title>
      <link>http://codeinthehole.com/tips/command-line-tips-for-effective-release-announcements/</link>
      <pubDate>Thu, 16 Jan 2014 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/command-line-tips-for-effective-release-announcements/</guid>
      <description>

&lt;p&gt;We finally &lt;a href=&#34;http://django-oscar.readthedocs.org/en/latest/releases/v0.6.html&#34;&gt;released Oscar
0.6&lt;/a&gt;
last week. The process brought home the importance of writing your
release notes as you go rather than at the end. It&amp;rsquo;s a real pain to
extract the key changes from 1200 commits spread over the last 8 months.
Lesson learnt.&lt;/p&gt;

&lt;p&gt;This article is largely a note-to-self in case I have to repeat the
process. However, if you do find yourself in a similar position, here
are a few command-line tricks for analysing your git history.&lt;/p&gt;

&lt;h3 id=&#34;analysing-codebase-changes-since-a-tag&#34;&gt;Analysing codebase changes since a tag&lt;/h3&gt;

&lt;p&gt;Basics: browse commits since the last tagged release&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git log &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;--name-status&lt;/code&gt; option for &lt;code&gt;git diff&lt;/code&gt; is useful for analysing
codebase changes between two commits. For instance, you can view changes
to a particular directory:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git diff --name-status &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 oscar/apps/address
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which can be useful if thousands of files have changed and you want to
review each package individually.&lt;/p&gt;

&lt;p&gt;Extensions include finding deleted files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git diff --name-status &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;^D&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or all new migration files:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git diff --name-status &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; grep &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;^A.*migrations/[0-9]&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which is important for projects like Oscar which ship with database
migrations.&lt;/p&gt;

&lt;h3 id=&#34;determine-changes-template-block-names&#34;&gt;Determine changes template block names&lt;/h3&gt;

&lt;p&gt;Since Oscar allows customisation of templates and overriding template
blocks, we try and document any changes to template block names. The
process here is more involved and requires two temporary files generated
with this command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ grep -or &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{% block .* %}&amp;quot;&lt;/span&gt; oscar/templates/oscar &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;BEGIN {FS=&amp;quot;:&amp;quot;} {split($2, parts, &amp;quot; &amp;quot;); print $1, parts[3]}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This writes out each pairs of filename and template block name:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;oscar/templates/oscar/403.html title
oscar/templates/oscar/403.html error_heading
oscar/templates/oscar/403.html error_message
oscar/templates/oscar/404.html title
oscar/templates/oscar/404.html error_heading
oscar/templates/oscar/404.html error_message
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To compare the template blocks from each release, we create two
temporary files and analyse the diff:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git checkout &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5
$ grep -or &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{% block .* %}&amp;quot;&lt;/span&gt; oscar/templates/oscar &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;BEGIN {FS=&amp;quot;:&amp;quot;} {split($2, parts, &amp;quot; &amp;quot;); print $1, parts[3]}&amp;#39;&lt;/span&gt; &amp;gt;
    /tmp/templates-0.5.txt
$ git checkout &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.6
$ grep -or &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;{% block .* %}&amp;quot;&lt;/span&gt; oscar/templates/oscar &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;BEGIN {FS=&amp;quot;:&amp;quot;} {split($2, parts, &amp;quot; &amp;quot;); print $1, parts[3]}&amp;#39;&lt;/span&gt; &amp;gt;
    /tmp/templates-0.6.txt
$ vimdiff /tmp/templates-0.&lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt;,6&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;.txt
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I imagine there&amp;rsquo;s a better way to do this but I couldn&amp;rsquo;t find one.&lt;/p&gt;

&lt;div class=&#34;admonition note&#34;&gt;
    This is a Django specific technique, but the general approach is quite
    useful for analysing changes between two codebases.
&lt;/div&gt;

&lt;h3 id=&#34;updating-an-authors-files&#34;&gt;Updating an &lt;code&gt;AUTHORS&lt;/code&gt; files&lt;/h3&gt;

&lt;p&gt;Oscar&amp;rsquo;s &lt;code&gt;AUTHORS&lt;/code&gt; file contains all contributors with 15 or more commits
in the master branch. We generate this file automatically.&lt;/p&gt;

&lt;p&gt;You can sort authors by number of commits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git shortlog -sn master &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; head
  &lt;span style=&#34;color: #ae81ff&#34;&gt;2992&lt;/span&gt;  David Winterbottom
   &lt;span style=&#34;color: #ae81ff&#34;&gt;355&lt;/span&gt;  Maik Hoepfel
   &lt;span style=&#34;color: #ae81ff&#34;&gt;167&lt;/span&gt;  Sebastian Vetter
   &lt;span style=&#34;color: #ae81ff&#34;&gt;166&lt;/span&gt;  Jon Price
   &lt;span style=&#34;color: #ae81ff&#34;&gt;120&lt;/span&gt;  Andrew Ingram
    &lt;span style=&#34;color: #ae81ff&#34;&gt;73&lt;/span&gt;  Asia Biega
    &lt;span style=&#34;color: #ae81ff&#34;&gt;65&lt;/span&gt;  Oliver Randell
    &lt;span style=&#34;color: #ae81ff&#34;&gt;49&lt;/span&gt;  Eleni Lixourioti
  ...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and extend this to find authors with more than a certain number of
commits&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;THRESHOLD&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;
$ git shortlog -sn master &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;$1 &amp;gt;= $THRESHOLD {$1=&amp;quot;&amp;quot;;print $0}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; cut -d&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; -f2-
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note, &lt;code&gt;git shortlog&lt;/code&gt; uses a &lt;code&gt;.mailmap&lt;/code&gt; file to aggregate commits from
the same committer where their name or email were different in the
commit history.&lt;/p&gt;

&lt;p&gt;Using this command, we can create a new &lt;code&gt;AUTHORS&lt;/code&gt; file containing all
contributors with greater than 15 commits on the master branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git shortlog -ns master &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;$1 &amp;gt;= $THRESHOLD {$1=&amp;quot;&amp;quot;;print $0}&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    cut -d&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot; &amp;quot;&lt;/span&gt; -f2- &amp;gt; AUTHORS
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;notifying-contributors&#34;&gt;Notifying contributors&lt;/h3&gt;

&lt;p&gt;If you have a patch accepted into a project, it&amp;rsquo;s useful to know when a
formal release has been cut that includes said patch. Before then, you
might be linking your project to a fork and maintaining a work-around
within your codebase.&lt;/p&gt;

&lt;p&gt;As the project maintainer, you might assume that such people are already
subscribed to your project mailing list, or following your project
Twitter stream. However, there&amp;rsquo;s a more thorough way to notify
contributors that their patch is in a release: you can email them.&lt;/p&gt;

&lt;p&gt;To do this, extract the email addresses of committers whose patches are
in the new release:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git log &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 --format&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;%aE&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; uniq
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and CC these addresses in your mailing list release announcement.&lt;/p&gt;

&lt;p&gt;Even better, you can only grab the addresses of &lt;em&gt;new&lt;/em&gt; contributors to
the project, where the release is the first to contain one of their
commits. We do this by extracting two lists of email addresses and
employing the lovely but neglected &lt;code&gt;comm&lt;/code&gt; command to pluck the email
addresses that only exist in the latest release:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ comm -13 &amp;lt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;git log &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5 --format&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;%aE&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; uniq&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;\&lt;/span&gt;
    &amp;lt;&lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;git log &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 --format&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;%aE&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; sort &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; uniq&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the first input is all contributors up to release 0.5, while the
second is contibutors to the 0.6 release only.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;comm&lt;/code&gt; is an extremely useful command for selecting lines common between
two files, or exclusive to one. The &lt;code&gt;-13&lt;/code&gt; options indicate to exclude
lines exclusive to the first file (&lt;code&gt;-1&lt;/code&gt;) and lines common to both
(&lt;code&gt;-3&lt;/code&gt;).&lt;/p&gt;

&lt;h3 id=&#34;summarising-changes&#34;&gt;Summarising changes&lt;/h3&gt;

&lt;p&gt;If your release isn&amp;rsquo;t large, your release notes could include a summary
of the contained commits; this is useful for minor point releases. You
can use &lt;code&gt;git shortlog&lt;/code&gt; to do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git shortlog &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.5..0.6 --no-merges
David Winterbottom &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;661&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;:
      Add defaults to the counts on the product summary dashboard page
      Tidy up urls.py and settings.py
      Use mirrors when pip installing the demo site
      Install django-oscar-stores
      Add link to stores page in footer
...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can even use &lt;code&gt;--format&lt;/code&gt; to provide links to Github commits:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ git shortlog &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.3.4..0.4 --no-merges --format&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;%s (https://github.com/tangentlabs/django-oscar-stores/commit/%h)&amp;quot;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This won&amp;rsquo;t always be appropriate if your release if there are thousands
of commits.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to install PostGIS and GeoDjango on Ubuntu</title>
      <link>http://codeinthehole.com/tips/how-to-install-postgis-and-geodjango-on-ubuntu/</link>
      <pubDate>Fri, 04 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/how-to-install-postgis-and-geodjango-on-ubuntu/</guid>
      <description>

&lt;p&gt;Despite its &lt;a href=&#34;https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/&#34;&gt;extensive
documentation&lt;/a&gt;,
getting GeoDjango installed and configured can be a pain. Here are my
notes for future reference:&lt;/p&gt;

&lt;h3 id=&#34;installation-on-ubuntu-12-04&#34;&gt;Installation on Ubuntu 12.04&lt;/h3&gt;

&lt;p&gt;First, ensure your system locale is UTF8 as PostgreSQL uses it to
determine its default encoding during installation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LANGUAGE&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LANG&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
$ &lt;span style=&#34;color: #f8f8f2&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LC_ALL&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;en_US.UTF-8&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now install dependencies:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get update
$ sudo apt-get install postgresql-server-dev-9.1 postgresql-9.1-postgis 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;PostgreSQL should now be installed and running with UTF8 encodings.
Verify this with:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo -u postgres psql -l    
                                     List of databases
       Name       &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;  Owner   &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; Encoding &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;   Collate   &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;    Ctype    &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
------------------+----------+----------+-------------+-------------+-...
 postgres         &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; postgres &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; UTF8     &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; en_US.UTF-8 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; en_US.UTF-8 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
 template0        &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; postgres &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; UTF8     &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; en_US.UTF-8 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; en_US.UTF-8 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;          &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;          &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
 template1        &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; postgres &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; UTF8     &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; en_US.UTF-8 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; en_US.UTF-8 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;          &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;          &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now create a spatial database. The above commands will have installed
PostGIS 1.5.3 hence, &lt;a href=&#34;https://docs.djangoproject.com/en/dev/ref/contrib/gis/install/postgis/#creating-a-spatial-database-template-for-earlier-versions&#34;&gt;according to Django&amp;rsquo;s
docs&lt;/a&gt;,
we need to download and install a shell script that executes the
appropriate commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ wget https://docs.djangoproject.com/en/dev/_downloads/create_template_postgis-1.5.sh
$ chmod +x create_template_postgis-1.5.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and run it as a privileged user:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo -u postgres ./create_template_postgis-1.5.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If this is successful, a deluge of SQL output will echo to the console.
This is normal. PostGIS is now correctly installed and we have a
template database we can use to create a database for our GeoDjango
project.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo -u postgres psql
psql &lt;span style=&#34;color: #f92672&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;9&lt;/span&gt;.1.9&lt;span style=&#34;color: #f92672&#34;&gt;)&lt;/span&gt;
Type &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;help&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; help.

&lt;span style=&#34;color: #f8f8f2&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# CREATE ROLE sample_role WITH PASSWORD &amp;#39;sample_password&amp;#39; LOGIN;&lt;/span&gt;
CREATE ROLE
&lt;span style=&#34;color: #f8f8f2&#34;&gt;postgres&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# CREATE DATABASE sample_db OWNER sample_role TEMPLATE template_postgis;&lt;/span&gt;
CREATE DATABASE
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is the tricky bit over: you can now &lt;code&gt;pip install psycopg2&lt;/code&gt; and
you&amp;rsquo;re basically done. Remember to use the PostGIS database engine in
your &lt;code&gt;DATABASES&lt;/code&gt; setting:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DATABASES&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color: #f92672&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;django.contrib.gis.db.backends.postgis&amp;#39;&lt;/span&gt;,
        ...
    &lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;,
&lt;span style=&#34;color: #f92672&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&#34;common-errors&#34;&gt;Common errors&lt;/h4&gt;

&lt;p&gt;If your system locale is not UTF8 when attempting to create a spatial
database, you&amp;rsquo;ll see something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo -u postgres ./create_template_postgis-debian.sh
createdb: database creation failed: ERROR: encoding UTF8 does not match locale en_US
DETAIL:  The chosen LC_CTYPE setting requires encoding LATIN1 
FATAL:  database &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;template_postgis&amp;quot;&lt;/span&gt; does not exist
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If PostgreSQL is not installed when trying to install psycopg2, you see
something that ends with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;warning: manifest_maker: standard file &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt; not found

Error: pg_config executable not found.

Please add the directory containing pg_config to the PATH
or specify the full executable path with the option:

    python setup.py build_ext --pg-config /path/to/pg_config build ...

or with the pg_config option in &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;setup.cfg&amp;#39;&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I&amp;rsquo;ll add more error symptoms when I see them in the wild.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A deferred logging file handler for Django</title>
      <link>http://codeinthehole.com/tips/a-deferred-logging-file-handler-for-django/</link>
      <pubDate>Wed, 12 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/a-deferred-logging-file-handler-for-django/</guid>
      <description>

&lt;p&gt;At Tangent we handle environment-specific configuration of Django
projects using &lt;a href=&#34;http://justcramer.com/2011/01/13/settings-in-django/&#34;&gt;the method outlined by David
Cramer&lt;/a&gt;. This
involves distinguishing between core settings (which we keep in
&lt;code&gt;core/default.py&lt;/code&gt;) and environment specific settings (eg
&lt;code&gt;core/stage.py&lt;/code&gt;, &lt;code&gt;core/test.py&lt;/code&gt;). The standard &lt;code&gt;settings.py&lt;/code&gt; module
imports all defaults and then uses a enviromental shell variable to
determine which environment settings module to import.&lt;/p&gt;

&lt;h3 id=&#34;a-problem&#34;&gt;A problem&lt;/h3&gt;

&lt;p&gt;One tricky issue with this arrangement is logging to file. Ideally, we
want to define a single &lt;code&gt;LOGGING&lt;/code&gt; dict in the default settings but have
file logging use an environment-specific folder. For example, logging to
file in the test environment goes to &lt;code&gt;/var/log/project/test/&lt;/code&gt; while
stage goes to a file in &lt;code&gt;/var/log/project/stage&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;one-solution&#34;&gt;One solution&lt;/h3&gt;

&lt;p&gt;This can be solved by using a string template for the &lt;code&gt;filename&lt;/code&gt;
argument to each &lt;code&gt;FileHandler&lt;/code&gt; in the &lt;code&gt;LOGGING&lt;/code&gt; setting:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# conf/default.py&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;LOGGING&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;error_file&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;INFO&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;logging.FileHandler&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;{log_root}errors.log&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;formatter&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;verbose&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;loggers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;django.request&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;error_file&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ERROR&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;propagate&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;False,&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;then importing the default &lt;code&gt;LOGGING&lt;/code&gt; dict into your environment-specific
settings and formatting each filename with the correct path:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# conf/test.py&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;conf.default&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LOGGING&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;LOG_ROOT&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/var/log/project/test/&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;handler&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LOGGING[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;values():&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;handler[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;logging.FileHandler&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;handler[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;handler[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;format(log_root&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;LOG_ROOT)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This works but is rather clunky. For instance, the default &lt;code&gt;LOGGING&lt;/code&gt;
setting (without an environmental override) will lead to an error .&lt;/p&gt;

&lt;h3 id=&#34;another-solution&#34;&gt;Another solution&lt;/h3&gt;

&lt;p&gt;Another, possibly more elegant, solution is to use a specialisd logging
handler that defers evaluation of the filepath until it tries to log a
record.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;logging&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FileHandler&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseFileHandler&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;DeferredFileHandler&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(BaseFileHandler):&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;filename,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;kwargs):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filename&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;filename&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;kwargs[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;delay&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseFileHandler&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/dev/null&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;kwargs)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_open&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# We import settings here to avoid a circular reference as this module&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# will be imported when settings.py is executed.&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.conf&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;settings&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;baseFilename&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;join(settings&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;LOG_ROOT,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filename)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;BaseFileHandler&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_open(self)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, all we need to do is use the new handler in our &lt;code&gt;LOGGING&lt;/code&gt; dict:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# conf/default.py&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;LOGGING&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;version&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;error_file&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;INFO&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;class&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;deferred_filelogger.DeferredFilehandler&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;filename&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;errors.log&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;formatter&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;verbose&amp;#39;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;loggers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;django.request&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;handlers&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;error_file&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;],&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;level&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ERROR&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;propagate&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;False,&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;},&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and specify a &lt;code&gt;LOG_ROOT&lt;/code&gt; setting for each environment:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# conf/test.py&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;LOG_ROOT&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/var/log/project/test/&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Such a logger is part of
&lt;a href=&#34;https://github.com/tangentlabs/django-oscar/blob/master/oscar/core/logging/handlers.py&#34;&gt;django-oscar&lt;/a&gt;,
but I&amp;rsquo;ve packaged it up separately so it can be used in non-Oscar
projects. The package is called
&lt;a href=&#34;https://github.com/codeinthehole/django-deferred-filelogger&#34;&gt;django-deferred-filelogger&lt;/a&gt;
and can be installed from PyPI using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ pip install django-deferred-filelogger
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Conditional logic in Django forms</title>
      <link>http://codeinthehole.com/tips/conditional-logic-in-django-forms/</link>
      <pubDate>Sat, 01 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/conditional-logic-in-django-forms/</guid>
      <description>

&lt;h3 id=&#34;the-problem&#34;&gt;The problem&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s common for UX professionals to design forms like the following:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://codeinthehole.com/images/screenshots/radio-form-wire.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;

&lt;p&gt;where radio buttons are employed to split the form into sections, each
of which can have it&amp;rsquo;s own fields which are only mandatory if the parent
radio button is checked. Thus the validation logic is conditional on the
submitted form data.&lt;/p&gt;

&lt;p&gt;Such requirements are slightly tricky to capture in Django as they tread
slightly outside the normal path of form validation. Specifically:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It&amp;rsquo;s not documented how to render radio buttons separately. The
default behaviour is to render an unordered list. The &lt;a href=&#34;https://docs.djangoproject.com/en/dev/ref/forms/widgets/#radioselect&#34;&gt;guidance on
fine-grained template
control&lt;/a&gt;
only covers looping over the choices.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s not obvious how to change the validation properties of a form
field dynamically, depending on the submitted data.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;a-solution&#34;&gt;A solution&lt;/h3&gt;

&lt;p&gt;Start with this form class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ScheduleForm&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Form):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;NOW,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LATER&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;now&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;later&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;SCHEDULE_CHOICES&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(NOW,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Send immediately&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(LATER,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Send later&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;schedule&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ChoiceField(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;choices&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SCHEDULE_CHOICES,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;widget&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;RadioSelect)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;send_date&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DateTimeField(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;label&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;required&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;False)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note the &lt;code&gt;send_date&lt;/code&gt; field has &lt;code&gt;required=False&lt;/code&gt; as it is only mandatory
if the &amp;lsquo;Send later&amp;rsquo; radio button is selected. For simplicity, we are are
only using a single datetime field for the send date rather than the
split-widget field of the wire.&lt;/p&gt;

&lt;p&gt;We can render this as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;action&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;.&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;post&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    {% csrf_token %}
    {{ form.non_field_errors }}

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;Send schedule&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h3&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    {{ form.schedule.errors }}

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;span4&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
        {{ form.schedule.0 }}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;br&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;help-text&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;(Once you&amp;#39;ve checked out)&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;span&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;span4&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
        {{ form.schedule.1 }}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;br&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt;
        {{ form.send_date }}
        {{ form.send_date.errors }}
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;

    &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;button&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;Save&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;button&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Observe that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the radio buttons are rendered individually individually by
referring to the index of each option (this works in Django 1.4+).&lt;/li&gt;
&lt;li&gt;we don&amp;rsquo;t render the errors for the &lt;code&gt;schedule&lt;/code&gt; next to one particular
radio button, but above the container elements.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Next we add conditional validation to the form class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;ScheduleForm&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Form):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;NOW,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;LATER&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;now&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;later&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;SCHEDULE_CHOICES&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(NOW,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Send immediately&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(LATER,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Send later&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;schedule&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ChoiceField(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;choices&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SCHEDULE_CHOICES,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;widget&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;RadioSelect)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;send_date&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;forms&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DateTimeField(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;label&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;required&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;False)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;None,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;kwargs):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;super(ScheduleForm,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;__init__&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(data,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;args,&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;**&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;kwargs)&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;# If &amp;#39;later&amp;#39; is chosen, set send_date as required&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;and&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;data&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;schedule&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None)&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;LATER:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;fields[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;send_date&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;required&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here, we override &lt;code&gt;__init__&lt;/code&gt; and inspect the raw submitted data so that
we can set &lt;code&gt;required=True&lt;/code&gt; on the &lt;code&gt;send_date&lt;/code&gt; field appropriately. This
is the conventional way of adding conditional logic to form validation,
although it&amp;rsquo;s more common to use an additional argument to &lt;code&gt;__init__&lt;/code&gt;
to determine the field adjustments.&lt;/p&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;This solution is not perfect. It&amp;rsquo;s a little odd to use the raw form data
to change validation rules. However, I&amp;rsquo;m not aware of a cleaner
alternative.&lt;/p&gt;

&lt;p&gt;Related links:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/pydanny/advanced-django-forms-usage&#34;&gt;Advanced Django Form
Usage&lt;/a&gt; -
A decent overview of various issues around forms from
DjangoCon 2011.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Disable database access when writing unit tests in Django</title>
      <link>http://codeinthehole.com/tips/disable-database-access-when-writing-unit-tests-in-django/</link>
      <pubDate>Mon, 22 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/disable-database-access-when-writing-unit-tests-in-django/</guid>
      <description>&lt;p&gt;Consider this curio:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;mock&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.utils.functional&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;curry&lt;/span&gt;

&lt;span style=&#34;color: #f8f8f2&#34;&gt;no_database&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;curry(&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;mock&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;patch,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;django.db.backends.util.CursorWrapper&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;Mock(side_effect&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;RuntimeError&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Using the database is not permitted&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This snippet creates a decorator that can wrap a test case or method and
raises an exception if the database is accessed. This can be useful if
you&amp;rsquo;re a puritan about &lt;em&gt;true&lt;/em&gt; unit tests.&lt;/p&gt;

&lt;p&gt;Use by wrapping a &lt;code&gt;TestCase&lt;/code&gt; subclass:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.test&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TestCase&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;@no_database&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;UnitTestCase&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(TestCase):&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;or method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.test&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;TestCase&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;UnitTestCase&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(TestCase):&lt;/span&gt;

    &lt;span style=&#34;color: #a6e22e&#34;&gt;@no_database&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_something&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
        &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This snippet is a reformulation of one from Carl Meyer&amp;rsquo;s excellent
&lt;a href=&#34;http://pyvideo.org/video/699/testing-and-django&#34;&gt;&amp;lsquo;Testing and Django&amp;rsquo;&lt;/a&gt;
(about 24 minutes in).&lt;/p&gt;

&lt;p&gt;Challenge: create a similar decorator that prevents all file-system
access in a test method.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Altering Postgres table columns with South</title>
      <link>http://codeinthehole.com/tips/altering-postgres-table-columns-with-south/</link>
      <pubDate>Tue, 19 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/altering-postgres-table-columns-with-south/</guid>
      <description>

&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;re using Postgres with Django.&lt;/p&gt;

&lt;p&gt;You change a field type of one of your models, generate an &lt;code&gt;--auto&lt;/code&gt;
South migration and attempt to run it. However, South chokes on the new
migration complaining that the data in the column cannot be cast to the
new type.&lt;/p&gt;

&lt;p&gt;For instance, I recently changed a &lt;code&gt;CharField&lt;/code&gt; to a &lt;code&gt;TimeField&lt;/code&gt; but the
corresponding migration lead to:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Running migrations for stores:
- Migrating forwards to 0009_auto__chg_field_openingperiod_start__chg_field_openingperiod_end.
&amp;gt; stores:0008_auto__del_unique_store_slug
&amp;gt; stores:0009_auto__chg_field_openingperiod_start__chg_field_openingperiod_end
FATAL ERROR - The following SQL query failed: ALTER TABLE &amp;quot;stores_openingperiod&amp;quot; ALTER COLUMN &amp;quot;start&amp;quot; TYPE time, ALTER COLUMN &amp;quot;start&amp;quot; DROP NOT NULL, ALTER COLUMN &amp;quot;start&amp;quot; DROP DEFAULT;
The error was: column &amp;quot;start&amp;quot; cannot be cast to type time without time zone
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Postgres did not know how to convert my text data to times.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Write the &lt;code&gt;ALTER TABLE&lt;/code&gt; SQL by hand, making use of the &lt;code&gt;USING&lt;/code&gt; clause to
specify how to compute the new value from the old.&lt;/p&gt;

&lt;p&gt;For the above example, the correct SQL to use is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;TABLE&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;stores_openingperiod&amp;quot;&lt;/span&gt; 
    &lt;span style=&#34;color: #66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;COLUMN&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;end&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; 
    &lt;span style=&#34;color: #66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;COLUMN&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;end&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;DROP&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;NULL&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; 
    &lt;span style=&#34;color: #66d9ef&#34;&gt;ALTER&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;COLUMN&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;end&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;TYPE&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;time&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;USING&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;to_timestamp(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;end&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;HHam&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We need to modify the migration file to execute raw SQL with
&lt;code&gt;db.execute&lt;/code&gt; instead of using &lt;code&gt;db.alter_table&lt;/code&gt; to generate the SQL. So
we change:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;db&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;alter_column(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;stores_openingperiod&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;gf(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;django.db.models.fields.TimeField&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)(null&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;True))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;db&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;execute(&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ALTER TABLE &amp;quot;stores_openingperiod&amp;quot; &amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ALTER COLUMN &amp;quot;end&amp;quot; DROP DEFAULT, &amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ALTER COLUMN &amp;quot;end&amp;quot; DROP NOT NULL, &amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;ALTER COLUMN &amp;quot;end&amp;quot; TYPE time USING to_timestamp(&amp;quot;end&amp;quot;, &lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;HHam&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;)&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and all is well.&lt;/p&gt;

&lt;p&gt;A similar technique can be used wherever Postgres refuses to run a
migration due to casting issues. See the &lt;a href=&#34;http://www.postgresql.org/docs/9.1/static/sql-altertable.html&#34;&gt;Postgres
documentation&lt;/a&gt;
for more examples of the &lt;code&gt;USING&lt;/code&gt; clause.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Prefer WebTest to Django&#39;s test client for functional tests</title>
      <link>http://codeinthehole.com/tips/prefer-webtest-to-djangos-test-client-for-functional-tests/</link>
      <pubDate>Sun, 09 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/prefer-webtest-to-djangos-test-client-for-functional-tests/</guid>
      <description>

&lt;p&gt;Since watching Carl Meyer&amp;rsquo;s superb &amp;lsquo;&lt;a href=&#34;http://pyvideo.org/video/699/testing-and-django&#34;&gt;Testing and
Django&lt;/a&gt;&amp;rsquo; talk, I&amp;rsquo;ve
been using Ian Bicking&amp;rsquo;s
&lt;a href=&#34;http://webtest.pythonpaste.org/en/latest/index.html&#34;&gt;WebTest&lt;/a&gt; library
for functional tests, via
&lt;a href=&#34;http://pypi.python.org/pypi/django-webtest&#34;&gt;django-webtest&lt;/a&gt;. I&amp;rsquo;ve been
really impressed and I&amp;rsquo;d like to stress one of Carl&amp;rsquo;s points - that
using WebTest for functional tests is superior to using the Django
client.&lt;/p&gt;

&lt;h3 id=&#34;why&#34;&gt;Why?&lt;/h3&gt;

&lt;p&gt;Several reasons - here&amp;rsquo;s a few:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WebTest allows you to model a user&amp;rsquo;s experience much more closely as
it is smart about mark-up. Instead of hand-crafting GET and POST
requests, you can use the WebTest API to follow links and submit
forms - this is what users actually do. As a result, your tests
accurately capture user stories.&lt;/li&gt;
&lt;li&gt;A corollary to the last point is that writing functional tests with
WebTest is both easier and quicker than using Django&amp;rsquo;s test client.
It&amp;rsquo;s much simpler to fill in forms that construct complicated arrays
of POST data - this is particularly noticable with formsets.&lt;/li&gt;
&lt;li&gt;The WebTest response object supports &lt;a href=&#34;http://webtest.pythonpaste.org/en/latest/index.html#parsing-the-body&#34;&gt;several ways of parsing the
response
HTML&lt;/a&gt;,
making it easy to make complicated assertions about the response.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Watch from 29:48 in Carl&amp;rsquo;s talk for further details.&lt;/p&gt;

&lt;h3 id=&#34;example-functional-test&#34;&gt;Example functional test&lt;/h3&gt;

&lt;p&gt;Consider this story from a functional spec:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A staff member can upload a CSV to create new credit allocations for
customers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Here&amp;rsquo;s a WebTest for this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django_webtest&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;WebTest&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.core.urlresolvers&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;reverse&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.contrib.auth.models&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;User&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django_dynamic_fixture&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;G&lt;/span&gt;

&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myproject.credits&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;api&lt;/span&gt;


&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;TestAnAdmin&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(WebTest):&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;setUp&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;staff&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;G(User,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;is_staff&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;True)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;customer&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;G(User,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;10000&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;is_staff&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;False)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;test_can_upload_a_csv_to_create_allocations&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;index&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;app&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(reverse(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;credits-index&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;),&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;staff)&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;# Specify the file content to upload and submit the form&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;index&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;forms[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;upload_form&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# CSV content should be: username, credits, start_date, end_date&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;content&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;10000,250,2012-01-01,2013-01-01&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;form[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;credits.csv&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;content&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;submit()&lt;/span&gt;

        &lt;span style=&#34;color: #75715e&#34;&gt;# Check that an allocation has been created&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;assertEqual(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;250&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;balance(customer))&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;assertEqual(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;api&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;allocations(customer)&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;count())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, using WebTest allows the story to be captured in a
simple and readable test. This is based on a real functional test from a
current project of mine. Writing the above test took about 2 minutes.&lt;/p&gt;

&lt;h4 id=&#34;other-useful-testing-libraries&#34;&gt;Other useful testing libraries&lt;/h4&gt;

&lt;p&gt;The example test uses
&lt;a href=&#34;http://paulocheque.github.com/django-dynamic-fixture/&#34;&gt;django_dynamic_fixture&lt;/a&gt;
to create users, specifying only the attributes relevant to the test.&lt;/p&gt;

&lt;p&gt;Note also the mildly unusual naming convention of the example TestCase
and method are because I use
&lt;a href=&#34;https://github.com/jbalogh/django-nose&#34;&gt;django_nose&lt;/a&gt; with the &amp;lsquo;spec&amp;rsquo;
plugin from the
&lt;a href=&#34;http://darcs.idyll.org/~t/projects/pinocchio/doc/&#34;&gt;pinocchio&lt;/a&gt; library.
This causes the nose output to read like the stories from your
functional spec:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ ./manage.py &lt;span style=&#34;color: #f8f8f2&#34;&gt;test&lt;/span&gt; tests/functional/eshop/credits_tests.py

nosetests --verbosity &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; tests/functional/eshop/credits_tests.py --with-spec -x -s

An admin
- can upload a csv to create allocations

----------------------------------------------------------------------
Ran &lt;span style=&#34;color: #ae81ff&#34;&gt;1&lt;/span&gt; tests in &lt;span style=&#34;color: #ae81ff&#34;&gt;0&lt;/span&gt;.269s
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a useful way of running functional tests. It also pushes you
towards splitting your tests suites into more carefully named,
tightly-focussed test cases - rather than bundling disparate tests into
the same test case.&lt;/p&gt;

&lt;h3 id=&#34;summary&#34;&gt;Summary&lt;/h3&gt;

&lt;p&gt;Use WebTest for your functional tests - you won&amp;rsquo;t regret it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Cacheback - asynchronous cache refreshing for Django</title>
      <link>http://codeinthehole.com/projects/cacheback-asynchronous-cache-refreshing-for-django/</link>
      <pubDate>Sun, 02 Sep 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/projects/cacheback-asynchronous-cache-refreshing-for-django/</guid>
      <description>

&lt;p&gt;Inspired by &lt;a href=&#34;http://jacobian.org/&#34;&gt;Jacob Kaplan-Moss&lt;/a&gt;&amp;rsquo;s excellent talk
&amp;ldquo;&lt;a href=&#34;http://www.oscon.com/oscon2012/public/schedule/detail/24030&#34;&gt;Django doesn&amp;rsquo;t scale&lt;/a&gt;&amp;rdquo; at
this year&amp;rsquo;s OSCon, I&amp;rsquo;ve put together a Django package for re-populating
caches asynchronously.&lt;/p&gt;

&lt;p&gt;It provides a simple API for wrapping expensive read operations that
caches results and uses &lt;a href=&#34;http://celeryproject.org/&#34;&gt;Celery&lt;/a&gt; to
repopulate items when they become stale. It can be used as a decorator
for simple cases but provides an extensible class for more fine-grained
control. It also provides helper classes for working with querysets.&lt;/p&gt;

&lt;p&gt;The package is MIT-licensed, published to
&lt;a href=&#34;http://pypi.python.org/pypi/django-cacheback&#34;&gt;PyPI&lt;/a&gt; and the source is
available on
&lt;a href=&#34;https://github.com/codeinthehole/django-cacheback&#34;&gt;Github&lt;/a&gt;. It&amp;rsquo;s best
explained with an &amp;hellip;&lt;/p&gt;

&lt;h3 id=&#34;example&#34;&gt;Example&lt;/h3&gt;

&lt;p&gt;Consider a view that renders a user&amp;rsquo;s tweets:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.shortcuts&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myproject.twitter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;show_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render(request,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; 
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets(username)})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This works fine but the &lt;code&gt;fetch_tweets&lt;/code&gt; function involves a HTTP
round-trip and is slow. Enter caching.&lt;/p&gt;

&lt;h4 id=&#34;basic-caching&#34;&gt;Basic caching&lt;/h4&gt;

&lt;p&gt;Performance can be improved using Django&amp;rsquo;s &lt;a href=&#34;https://docs.djangoproject.com/en/dev/topics/cache/?from=olddocs#the-low-level-cache-api&#34;&gt;low-level cache
API&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.shortcuts&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.cache&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myproject.twitter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;show_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render(request,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; 
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_cached_tweets(username)})&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;fetch_cached_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(username):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(username)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets(username)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;set(username,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets,&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now tweets are cached for 15 minutes after they are first fetched, using
the twitter username as a key. This is obviously a performance
improvement but the shortcomings of this approach are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;For a cache miss, the tweets are fetched synchronously, blocking
code execution and leading to a slow response time.&lt;/li&gt;
&lt;li&gt;This in turn exposes exposes the view to a &amp;lsquo;&lt;a href=&#34;http://en.wikipedia.org/wiki/Cache_stampede&#34;&gt;cache
stampede&lt;/a&gt;&amp;rsquo; where
multiple expensive reads run simultaneously when the cached item
expires. Under heavy load, this can bring your site down.&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;procrastinate-instead&#34;&gt;Procrastinate instead&lt;/h4&gt;

&lt;p&gt;For most applications, it&amp;rsquo;s not actually essential that the cache is
refreshed immediately - it&amp;rsquo;s acceptable to return stale results and
update the cache asynchronously (so-called &lt;a href=&#34;http://en.wikipedia.org/wiki/Eventual_consistency&#34;&gt;&amp;lsquo;Eventual
Consistency&amp;rsquo;&lt;/a&gt;). This
is desirable as it means all reads are fast and prevents cache
stampedes.&lt;/p&gt;

&lt;h4 id=&#34;using-celery&#34;&gt;Using Celery&lt;/h4&gt;

&lt;p&gt;Consider an alternative implementation that uses a Celery task to
repopulate the cache.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.shortcuts&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.cache&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myproject.tasks&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;update_tweets&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;show_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render(request,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; 
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_cached_tweets(username)})&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;fetch_cached_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(username,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lifetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(username)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None:&lt;/span&gt;
        &lt;span style=&#34;color: #75715e&#34;&gt;# Scenario 1: Cache miss - return empty result set and trigger a refresh&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;update_tweets&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;delay(username,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lifetime)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;None&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;expiry&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;item&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;expiry&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;now():&lt;/span&gt;
            &lt;span style=&#34;color: #75715e&#34;&gt;# Scenario 2: Cached item is stale - return it but trigger a refresh&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;update_tweets&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;delay(username,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;lifetime)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where the &lt;code&gt;myproject.tasks.update_tweets&lt;/code&gt; task is implemented as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;celery&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;task&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.cache&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myproject.twitter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;@task&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;update_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(username,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ttl):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;tweets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets(username)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;now&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;now()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;set(username,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(tweets,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ttl),&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;2592000&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Some things to note:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Items are stored in the cache as tuples &lt;code&gt;(data, expiry_timestamp)&lt;/code&gt;
using Memcache&amp;rsquo;s maximum expiry setting (2592000 seconds). By using
this value, we are effectively bypassing memcache&amp;rsquo;s replacement
policy in favour of our own.&lt;/li&gt;
&lt;li&gt;As the comments indicate, there are two replacements scenarios to
consider:

&lt;ol&gt;
&lt;li&gt;Cache miss. In this case, we don&amp;rsquo;t have any data (stale or
otherwise) to return. In the example above, we trigger an
asynchronous refresh and return an empty result set. In other
scenarios, it may make sense to perform a synchronous refresh.&lt;/li&gt;
&lt;li&gt;Cache hit but with stale data. Here we return the stale data but
trigger a Celery task to refresh the cached item.&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This pattern of re-populating the cache asynchronously works well.
Indeed it is the basic of the Cacheback package.&lt;/p&gt;

&lt;h4 id=&#34;using-cacheback&#34;&gt;Using Cacheback&lt;/h4&gt;

&lt;p&gt;Here&amp;rsquo;s the same functionality implemented using the &lt;code&gt;cacheback&lt;/code&gt;
function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.shortcuts&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.cache&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myproject.twitter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cacheback.decorators&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cacheback&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;show_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_cached_tweets&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cacheback(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_on_miss&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;False)(fetch_tweets)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render(request,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; 
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_cached_tweets(username)})&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;cacheback&lt;/code&gt; function provides a wrapper function for the
&lt;code&gt;fetch_tweets&lt;/code&gt; function. When called, the wrapper will generate a cache
key based on the module path of the wrapped function and the passed args
and kwargs. It then checks the cache and if there isn&amp;rsquo;t a valid result
it will serialise the function and its args so it can be executed
asynchronously by a Celery task.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;cacheback&lt;/code&gt; function can also be used as a decorator:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cacheback.decorators&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cacheback&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;@cacheback&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;60&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;fetch_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(username):&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or for more fine-grained control: using a subclass of
&lt;code&gt;cacheback.base.Job&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.shortcuts&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.cache&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cache&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;myproject.twitter&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;cacheback.base&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Job&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;show_tweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render(request,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; 
                  &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;tweets&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FetchTweets()&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(username)})&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;FetchTweets&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(Job):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;expiry&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;60&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;*&lt;/span&gt; &lt;span style=&#34;color: #ae81ff&#34;&gt;15&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;fetch&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;username):&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;fetch_tweets(username)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While only the &lt;code&gt;fetch&lt;/code&gt; method must be implemented, the &lt;code&gt;cacheback.Job&lt;/code&gt;
class provides several other overridable methods that provide
fine-grained control of the caching process.&lt;/p&gt;

&lt;h3 id=&#34;interested&#34;&gt;Interested?&lt;/h3&gt;

&lt;p&gt;Check-out the
&lt;a href=&#34;http://django-cacheback.readthedocs.org/en/latest/&#34;&gt;documentation&lt;/a&gt; for
more information. Comments and feedback welcome.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Use models for uploads</title>
      <link>http://codeinthehole.com/tips/use-models-for-uploads/</link>
      <pubDate>Thu, 19 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/use-models-for-uploads/</guid>
      <description>

&lt;p&gt;All Django developers will deal with file uploads at some point. I
contend that it&amp;rsquo;s a good practice to use models to capture the upload
metadata and to track processing status. This article explains how and
why.&lt;/p&gt;

&lt;h3 id=&#34;an-e-commerce-example&#34;&gt;An e-commerce example&lt;/h3&gt;

&lt;p&gt;Suppose your e-commerce application allows admins to upload CSV files to
update product stock levels (a common requirement). A typical file may
comprise a SKU and a stock level:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;9781231231999,0
9781231231999,4
9781231231999,2
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.djangoproject.com/en/dev/topics/http/file-uploads/?from=olddocs&#34;&gt;Django&amp;rsquo;s
docs&lt;/a&gt;
detail a common pattern for dealing with file uploads such as this. The
steps are generally:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Validate the form submission;&lt;/li&gt;
&lt;li&gt;Write upload data to permanent storage;&lt;/li&gt;
&lt;li&gt;Process the file;&lt;/li&gt;
&lt;li&gt;Delete the file (optional)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle_upload&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;method&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;UploadFileForm(request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;POST,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FILES)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;is_valid():&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;handle_uploaded_file(request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FILES[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;HttpResponseRedirect(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/success/url/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;UploadFileForm()&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render_to_response(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;upload.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;form})&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle_uploaded_file&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(f):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/tmp/somefile.txt&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(filepath,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;wb+&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dest:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chunk&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;chunks():&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;dest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(chunk)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;process_file(filepath)&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;process_file&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(filepath):&lt;/span&gt;
    &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This works fine.&lt;/p&gt;

&lt;p&gt;However, it&amp;rsquo;s often desirable to collect audit information about which
files have been processed, how long processing took and who uploaded
them. Of course, this can be addressed by logging but a more elegant
solution to use a simple audit model as well. Consider an alternative
implementation of &lt;code&gt;handle_uploaded_file&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle_uploaded_file&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(user,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/tmp/somefile.txt&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(filepath,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;wb+&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dest:&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chunk&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;chunks():&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;dest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(chunk)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StockUpload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;create(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath,&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;uploaded_by&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;process()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where we&amp;rsquo;re now passing the logged-in user too.&lt;/p&gt;

&lt;p&gt;The model definition for &lt;code&gt;StockUpload&lt;/code&gt; may look like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.db&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.utils.translation&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;ugettext_lazy&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;StockUpload&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Model):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;CharField(max_length&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;255&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# Upload audit information&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;uploaded_by&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;ForeignKey(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;auth.User&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;date_uploaded&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DateTimeField(auto_now_add&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;True)&lt;/span&gt;

    &lt;span style=&#34;color: #75715e&#34;&gt;# Processing audit information&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;PENDING,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;PROCESSED,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;FAILED&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Pending&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Processed&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Failed&amp;#39;&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;STATUSES&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(PENDING,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_(PENDING)),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(PROCESSED,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_(PROCESSED)),&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;(FAILED,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;_(FAILED)),&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;CharField(max_length&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;64&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;choices&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;STATUSES,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;default&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PENDING)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;processing_description&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;TextField(blank&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;True,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;True)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;num_records&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PositiveIntegerField()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;date_start_processing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DateTimeField(null&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;True)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;date_end_processing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DateTimeField(null&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;True)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;process&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;date_start_processing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;now()&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;try&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #75715e&#34;&gt;# process upload data, &lt;/span&gt;
            &lt;span style=&#34;color: #f92672&#34;&gt;...&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Exception&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;e:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_mark_failed(unicode(e))&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;_mark_processed(num_records)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_mark_processed&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;num_records,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;description&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;None):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PROCESSED&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;date_end_processing&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;datetime&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;now()&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;num_records&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;num_records&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;processing_description&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;description&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;save()&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;_mark_failed&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;description):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FAILED&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;processing_description&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;description&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;save()&lt;/span&gt;

    &lt;span style=&#34;color: #a6e22e&#34;&gt;@property&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;filename&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;os&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;path&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;basename(self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filename)&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;was_processing_successful&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self):&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;status&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;PROCESSED&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can go further and push the file creation into a manager method so
the filepath generation is removed from the view:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle_uploaded_file&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(f):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StockUpload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;create_from_stream(user,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;process()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;where &lt;code&gt;create_from_stream&lt;/code&gt; could be implemented as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;StockUploadManager&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(models&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;Manager):&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;create_from_stream&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;user,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;generate_filename()&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;open(filepath,&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;wb+&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #66d9ef&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;dest:&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;chunk&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;chunks():&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;dest&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;write(chunk)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;create(&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filepath,&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;uploaded_by&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;user&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and, if processing takes a while, push the work into Celery:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #a6e22e&#34;&gt;@task&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;process_upload&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(upload_id):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StockUpload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;upload_id)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;process()&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle_uploaded_file&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(user,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StockUpload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;create_from_stream(user,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;f)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;process_upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;delay(upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here&amp;rsquo;s a more complete implementation that uses a library of mine,
&lt;a href=&#34;https://github.com/codeinthehole/django-async-messages/&#34;&gt;django-async-messages&lt;/a&gt;,
to send a message back to the user who uploaded the file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# tasks.py&lt;/span&gt;

&lt;span style=&#34;color: #a6e22e&#34;&gt;@task&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;()&lt;/span&gt;
&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;process_upload&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(upload_id):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StockUpload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;upload_id)&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;process()&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;was_processing_successful():&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;message_user(&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;uploaded_by,&lt;/span&gt; 
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Your upload %s was processed successfully, %d records imported&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filename,&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;num_records))&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;message_user(&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;uploaded_by,&lt;/span&gt; 
            &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Your upload %s could not be processed, error message: %s&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;(&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;filename,&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;processing_description,))&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# views.py&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;handle_upload&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request):&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;method&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;UploadFileForm(request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;POST,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FILES)&lt;/span&gt;
        &lt;span style=&#34;color: #66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;form&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;is_valid():&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;upload&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;StockUpload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;create_from_stream(&lt;/span&gt;
                &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;user,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;request&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;FILES[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;])&lt;/span&gt;
            &lt;span style=&#34;color: #f8f8f2&#34;&gt;process_upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;delay(upload&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;id)&lt;/span&gt;
            &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;HttpResponseRedirect(&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/success/url/&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;else&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;form&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;UploadFileForm()&lt;/span&gt;
    &lt;span style=&#34;color: #66d9ef&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;render_to_response(&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;upload.html&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;form&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;form},&lt;/span&gt; 
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;context_instance&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;RequestContext(request))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;discussion&#34;&gt;Discussion&lt;/h3&gt;

&lt;p&gt;The advantages of using a model are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;It keeps your view simple - all processing logic is extracted away.&lt;/li&gt;
&lt;li&gt;The file processing logic is re-usable. You could use a management
command to process files specified at the commandline.&lt;/li&gt;
&lt;li&gt;It&amp;rsquo;s easy to defer processing to a Celery worker.&lt;/li&gt;
&lt;li&gt;You can gather metrics on processing speed and keep audit
information on who is uploading what.&lt;/li&gt;
&lt;li&gt;You can write a simple &lt;code&gt;ListView&lt;/code&gt; to show the audit information of
uploaded files to admins.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The above is just a toy example - there are lots of variations that can
be used. For instance, you may not want to keep the processing logic on
the model itself, it may make sense to have a separate function for
this. However the general notion of using a model to represent an
uploaded file and to track its state is a useful one.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vim macros for adding i18n support to Django templates</title>
      <link>http://codeinthehole.com/tips/vim-macros-for-adding-i18n-support-to-django-templates/</link>
      <pubDate>Fri, 06 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/vim-macros-for-adding-i18n-support-to-django-templates/</guid>
      <description>

&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;You want to add i18n support to an existing project. One part of this is
modifying all templates to use the &lt;code&gt;{% trans &amp;quot;...&amp;quot; %}&lt;/code&gt; block around all
hard-coded strings.&lt;/p&gt;

&lt;p&gt;When you have a lot of templates, this gets pretty tedious.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Use Vim macros!&lt;/p&gt;

&lt;h4 id=&#34;macro-1-convert-tag-text&#34;&gt;Macro 1 - Convert tag text&lt;/h4&gt;

&lt;p&gt;To convert&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;Welcome to my site&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;{% trans &amp;quot;Welcome to my site&amp;quot; %}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;h1&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;use the macro&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;vitc{% trans &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; %}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;ESC&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;hp
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which breaks down as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;vit&lt;/code&gt; - select content inside the tag;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;c{% trans &amp;quot;&amp;quot; %}&lt;/code&gt; - change tag content to be &lt;code&gt;{% trans &amp;quot;&amp;quot; %}&lt;/code&gt; while
saving the original tag content to the anonymous register;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;ESC&amp;gt;4hp&lt;/code&gt; - move the cursor to the first speech mark and paste the
original tag contents. Note that &lt;code&gt;&amp;lt;ESC&amp;gt;&lt;/code&gt; is one key-stroke, not
five.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To record the macro, locate the cursor over a tag that you want to
convert then start recording by pressing &lt;code&gt;q&lt;/code&gt; twice (to record the macro
to the named register &lt;code&gt;q&lt;/code&gt;). Then type the characters detailed above and
press &lt;code&gt;q&lt;/code&gt; again to stop recording.&lt;/p&gt;

&lt;p&gt;To apply the macro, again locate the cursor over a tag, or the text it
contains, and type &lt;code&gt;@q&lt;/code&gt;. This will save you a lot of key-strokes.&lt;/p&gt;

&lt;h4 id=&#34;macro-2-convert-selected-text&#34;&gt;Macro 2 - Convert selected text&lt;/h4&gt;

&lt;p&gt;To convert&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;See this image: &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/images/1.jpg&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;{% trans &amp;quot;See this image:&amp;quot; %} &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;img&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;/images/1.jpg&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;/&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;p&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;enter visual mode and select the text to convert (eg &amp;ldquo;See this image:&amp;ldquo;)
then use the macro&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #66d9ef&#34;&gt;c&lt;/span&gt;{% trans &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt; %}&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;lt;&lt;/span&gt;ESC&lt;span style=&#34;color: #f8f8f2&#34;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;4&lt;/span&gt;hp
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which is the same as the one above but without the tag text selection.&lt;/p&gt;

&lt;p&gt;To summarise: Vim&amp;rsquo;s macros are great - learn how to use them.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A data migration for every Django project</title>
      <link>http://codeinthehole.com/tips/a-data-migration-for-every-django-project/</link>
      <pubDate>Sat, 16 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://codeinthehole.com/tips/a-data-migration-for-every-django-project/</guid>
      <description>

&lt;p&gt;How to use a South data migration to avoid accidentally sending emails
from example.com.&lt;/p&gt;

&lt;h3 id=&#34;problem&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;Consider the following snippet from Django&amp;rsquo;s docs&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; for sending a
confirmation email:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.contrib.sites.models&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Site&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.core.mail&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;send_mail&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;register_for_newsletter&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(request):&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;current_site&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get_current()&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;send_mail(&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Thanks for subscribing to %s alerts&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;current_site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name,&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;Thanks for your subscription. We appreciate it.&lt;/span&gt;&lt;span style=&#34;color: #ae81ff&#34;&gt;\n\n&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;-The %s team.&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;current_site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name,&lt;/span&gt;
        &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;editor@%s&amp;#39;&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;%&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;current_site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;domain,&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;[user&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;email]&lt;/span&gt;
    &lt;span style=&#34;color: #f8f8f2&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here the domain for the email sender is taken from the &amp;lsquo;current site&amp;rsquo;
instance, which is controlled by &lt;a href=&#34;https://docs.djangoproject.com/en/dev/ref/contrib/sites/?from=olddocs&#34;&gt;Django&amp;rsquo;s &amp;lsquo;Sites&amp;rsquo;
framework&lt;/a&gt;
and accessible by a custom method on the manager of the &lt;code&gt;Site&lt;/code&gt; model.&lt;/p&gt;

&lt;p&gt;By default, a &lt;code&gt;Site&lt;/code&gt; instance is created with domain and display name
&amp;lsquo;example.com&amp;rsquo; and you have to correct these values. This is often done
by hand using the admin suite.&lt;/p&gt;

&lt;p&gt;However, as with any manual change, it&amp;rsquo;s easy to forget and you&amp;rsquo;ll often
find Django projects sending email from &lt;code&gt;editor@example.com&lt;/code&gt;. Highly
embarassing.&lt;/p&gt;

&lt;h3 id=&#34;solution&#34;&gt;Solution&lt;/h3&gt;

&lt;p&gt;Automation, of course! We can use a South data migration to set the
domain and display name correctly in each environment.&lt;/p&gt;

&lt;p&gt;First, ensure that each environment has settings for the domain and site
name.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #75715e&#34;&gt;# conf/test.py&lt;/span&gt;
...
&lt;span style=&#34;color: #f8f8f2&#34;&gt;DOMAIN_NAME&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;test.project.client.tangentlabs.co.uk&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;SITE_NAME&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;project - client (test)&amp;#39;&lt;/span&gt;

&lt;span style=&#34;color: #75715e&#34;&gt;# conf/stage.py&lt;/span&gt;
...
&lt;span style=&#34;color: #f8f8f2&#34;&gt;DOMAIN_NAME&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;stage.project.client.tangentlabs.co.uk&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #f8f8f2&#34;&gt;SITE_NAME&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;project - client (stage)&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This snippet assumes you are using a set-up similar to that outlined by
&lt;a href=&#34;http://justcramer.com/2011/01/13/settings-in-django/&#34;&gt;David Cramer&lt;/a&gt;,
where an environmental variable specifies an additional settings file to
import. You don&amp;rsquo;t have to use this method; employing a
&lt;code&gt;settings_local.py&lt;/code&gt; file for each environment works just as well.&lt;/p&gt;

&lt;p&gt;Next, create a data migration to set the domain and display name
correctly in each environment. This migration sits most naturally in the
&lt;code&gt;django.contrib.sites&lt;/code&gt; app, but since that&amp;rsquo;s in Django&amp;rsquo;s core, it&amp;rsquo;s not
an option. You could use an existing app within your project to house
the migration or perhaps create a simple &amp;lsquo;core&amp;rsquo; or &amp;lsquo;data&amp;rsquo; app to house
data migrations that alter 3rd party apps.&lt;/p&gt;

&lt;p&gt;Since we&amp;rsquo;re not using the actual app where the &lt;code&gt;Site&lt;/code&gt; model is defined,
we must employ South&amp;rsquo;s &lt;code&gt;--freeze&lt;/code&gt; option to ensure the &lt;code&gt;Site&lt;/code&gt; model is
available to the migration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;python manage.py datamigration &amp;lt;appname&amp;gt; create_domains --freeze&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;sites
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally implement the &lt;code&gt;forwards&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;south.v2&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;DataMigration&lt;/span&gt;
&lt;span style=&#34;color: #f92672&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;django.conf&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;settings&lt;/span&gt;

&lt;span style=&#34;color: #66d9ef&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;Migration&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(DataMigration):&lt;/span&gt;

    &lt;span style=&#34;color: #66d9ef&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #a6e22e&#34;&gt;forwards&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;(self,&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;orm):&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;Site&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;orm[&lt;/span&gt;&lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;sites.Site&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;]&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;site&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;Site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;objects&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;get(id&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;settings&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SITE_ID)&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;domain&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;settings&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;DOMAIN_NAME&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;settings&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;SITE_NAME&lt;/span&gt;
        &lt;span style=&#34;color: #f8f8f2&#34;&gt;site&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;save()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then your next deployment to each environment will perform the update.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;p&gt;See
&lt;a href=&#34;https://docs.djangoproject.com/en/1.4/ref/contrib/sites/#getting-the-current-domain-for-display&#34;&gt;https://docs.djangoproject.com/en/1.4/ref/contrib/sites/#getting-the-current-domain-for-display&lt;/a&gt;&lt;/p&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>