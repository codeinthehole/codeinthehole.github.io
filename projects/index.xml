<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Projects on David Winterbottom</title>
    <link>https://codeinthehole.com/projects/</link>
    <description>Recent content in Projects on David Winterbottom</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 22 Dec 2022 21:42:35 +0000</lastBuildDate>
    <atom:link href="https://codeinthehole.com/projects/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating pull requests with GPT3 and random artwork</title>
      <link>https://codeinthehole.com/projects/pull-requests-with-gpt3-and-random-artwork/</link>
      <pubDate>Thu, 22 Dec 2022 21:42:35 +0000</pubDate>
      <guid>https://codeinthehole.com/projects/pull-requests-with-gpt3-and-random-artwork/</guid>
      <description>A friend of mine has been retweeting great paintings from Twitter accounts like @HenryRothwell, which I&amp;rsquo;ve greatly enjoyed. E.g.
Good morning - I hope you slept like a caddis-fly larvae-stuffed miller&amp;#39;s thumb. I&amp;#39;m starting with &amp;#39;Winter Landscape&amp;#39;, Valerius de Saedeleer, oil on canvas, 1930s. pic.twitter.com/hk6RUFh794
&amp;mdash; Henry Rothwell (@HenryRothwell) December 18, 2022 In a similar vein, I&amp;rsquo;ve started embedding painting images in the description of every pull request I open.</description>
    </item>
    <item>
      <title>New project: Food price scraper</title>
      <link>https://codeinthehole.com/projects/food-scraper/</link>
      <pubDate>Sat, 12 Nov 2022 17:51:38 +0000</pubDate>
      <guid>https://codeinthehole.com/projects/food-scraper/</guid>
      <description>I&amp;rsquo;ve created a deeply middle-class Git scraper project which tracks the prices of a basket of goods sold by the British online supermarket, Ocado.
For example, Lurpak butter:
I&amp;rsquo;ve been looked for an excuse to use Git scraping for ages, and this idea came up as my wife and I were commiserating over how much food prices are increasing at the moment.
The project is the codeinthehole/food-scraper repo â€” see, in particular, the product overview file.</description>
    </item>
    <item>
      <title>The road to Oscar 1.0</title>
      <link>https://codeinthehole.com/projects/the-road-to-oscar-10/</link>
      <pubDate>Thu, 01 May 2014 00:00:00 +0000</pubDate>
      <guid>https://codeinthehole.com/projects/the-road-to-oscar-10/</guid>
      <description>Oscar 0.7 was released this week, a comparatively minor house-keeping release that allowed us to reduce our pull-request and issue backlogs. We have a plan for Oscar through 2014 and this article outlines the roadmap.
v1.0 We&amp;rsquo;re aiming to be v1.0 before the end of the year1. Oscar has been beta for nearly two years and its APIs are stabilising. We&amp;rsquo;re ready to commit to the backward compatibility responsibilities associated with coming out of beta.</description>
    </item>
    <item>
      <title>purl, URI templates and generated tests</title>
      <link>https://codeinthehole.com/projects/purl-uri-templates-and-generated-tests/</link>
      <pubDate>Tue, 09 Jul 2013 00:00:00 +0000</pubDate>
      <guid>https://codeinthehole.com/projects/purl-uri-templates-and-generated-tests/</guid>
      <description>TLDR: Parameterised tests are a useful testing technique. Both Nose and py.test support them.
URI templates in purl The newly released purl 0.8 (a URL library of mine) supports URI templates as per RFC 6570. These allow new URL instances to be created by passing bindings to a template instance.
&amp;gt;&amp;gt;&amp;gt; import purl &amp;gt;&amp;gt;&amp;gt; tpl = purl.Template(&amp;#39;http://www.google.com{path}&amp;#39;) &amp;gt;&amp;gt;&amp;gt; tpl.expand({&amp;#39;path&amp;#39;: [&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]}).as_string() &amp;#39;http://www.google.com/a/b/c&amp;#39; Alternatively, you can expand template strings directly:</description>
    </item>
    <item>
      <title>Cacheback - asynchronous cache refreshing for Django</title>
      <link>https://codeinthehole.com/projects/cacheback-asynchronous-cache-refreshing-for-django/</link>
      <pubDate>Sun, 02 Sep 2012 00:00:00 +0000</pubDate>
      <guid>https://codeinthehole.com/projects/cacheback-asynchronous-cache-refreshing-for-django/</guid>
      <description>Inspired by Jacob Kaplan-Moss&amp;rsquo;s excellent talk &amp;ldquo;Django doesn&amp;rsquo;t scale&amp;rdquo; at this year&amp;rsquo;s OSCon, I&amp;rsquo;ve put together a Django package for re-populating caches asynchronously.
It provides a simple API for wrapping expensive read operations that caches results and uses Celery to repopulate items when they become stale. It can be used as a decorator for simple cases but provides an extensible class for more fine-grained control. It also provides helper classes for working with querysets.</description>
    </item>
    <item>
      <title>purl - immutable URL objects for Python</title>
      <link>https://codeinthehole.com/projects/purl-immutable-url-objects-for-python/</link>
      <pubDate>Thu, 19 Apr 2012 00:00:00 +0000</pubDate>
      <guid>https://codeinthehole.com/projects/purl-immutable-url-objects-for-python/</guid>
      <description>Working with URLs in Python feels clunky when it should be pleasant. In urlparse and urllib, the standard library has all the functionality you need, but the code you have to write is often cumbersome and unclear.
For instance, here&amp;rsquo;s a typical test method that makes an assertion about a query parameter:
import urlparse def test_url_has_correct_query_parameter(self): url = get_url_from_somewhere() parse_result = urlparse.parseurl(url) query_params = urlparse.parse_qs(parse_result.query) self.assertEqual(&amp;#39;testing&amp;#39;, query_params[&amp;#39;q&amp;#39;][0]) Not terrible, but could be more concise.</description>
    </item>
    <item>
      <title>csvfilter - a Python command-line tool for manipulating CSV data</title>
      <link>https://codeinthehole.com/projects/csvfilter-a-python-command-line-tool-for-manipulating-csv-data/</link>
      <pubDate>Sun, 01 Apr 2012 00:00:00 +0000</pubDate>
      <guid>https://codeinthehole.com/projects/csvfilter-a-python-command-line-tool-for-manipulating-csv-data/</guid>
      <description>Problem You want a unix-like tool for manipulating CSV data from the command-line.
The standard tools cut and awk aren&amp;rsquo;t always suitable as they don&amp;rsquo;t handle quoting and escaping which are common in CSVs.
Solution Use the CSV manipulation function csvfilter, a simple Python library I&amp;rsquo;ve put together.
Install with:
pip install csvfilter Sample usage:
# Pluck columns 2, 5 and 6 cat in.csv | csvfilter -f 2,5,6 &amp;gt; out.csv # Pluck all columns except 4 cat in.</description>
    </item>
    <item>
      <title>Introducing unittest-xml: testing XML in Python</title>
      <link>https://codeinthehole.com/projects/introducing-unittest-xml-testing-xml-in-python/</link>
      <pubDate>Fri, 13 Jan 2012 00:00:00 +0000</pubDate>
      <guid>https://codeinthehole.com/projects/introducing-unittest-xml-testing-xml-in-python/</guid>
      <description>For some reason, I keep finding myself writing unit tests that need to make assertions about an XML document. To keep things DRY, I&amp;rsquo;ve packaged up my custom assertion methods as a PyPi module: unittest-xml. There&amp;rsquo;s a small chance it may be useful to others.
Sample Usage Enable the additional assert methods using a mixin:
import unittest from xmltest import XMLAssertions class SampleTestCase(unittest.TestCase, XMLAssertions): ... Now suppose that the expected XML from some SUT1 is:</description>
    </item>
    <item>
      <title>Multi-scp: copying a file to all hosts in your SSH config</title>
      <link>https://codeinthehole.com/projects/multi-scp-copying-a-file-to-all-hosts-in-your-ssh-config/</link>
      <pubDate>Sun, 22 May 2011 00:00:00 +0000</pubDate>
      <guid>https://codeinthehole.com/projects/multi-scp-copying-a-file-to-all-hosts-in-your-ssh-config/</guid>
      <description>I am totally reliant on my bash aliases and readline configuration. When working on a new server, the first thing I do is copy over my local Bash (~/.bashrc) and Readline (~/.inputrc) configuration files.
One mildly annoying issue is when you update a config file, it&amp;rsquo;s a pain to copy it onto all your remote hosts. To scratch this itch, I wrote a simple node.js executable for copying a file to all the defined hosts in your ~/.</description>
    </item>
    <item>
      <title>Domain-model-mapper - A PHP Data Mapper implementation</title>
      <link>https://codeinthehole.com/projects/domain-model-mapper-a-php-data-mapper-implementation/</link>
      <pubDate>Sun, 13 Mar 2011 00:00:00 +0000</pubDate>
      <guid>https://codeinthehole.com/projects/domain-model-mapper-a-php-data-mapper-implementation/</guid>
      <description>At various PHP conferences and meetups over the last few weeks, I&amp;rsquo;ve seen attention drawn to the Data Mapper design pattern. This is an elegant pattern that splits the responsibilities of business logic and persistence. In the words of pattern supremo Martin Fowler:
The Data Mapper is a layer of software that separates the in-memory objects from the database. Its responsibility is to transfer data between the two and also to isolate them from each other.</description>
    </item>
    <item>
      <title>nurl - an immutable URL object for node.js</title>
      <link>https://codeinthehole.com/projects/nurl-an-immutable-url-object-for-nodejs/</link>
      <pubDate>Wed, 10 Nov 2010 00:00:00 +0000</pubDate>
      <guid>https://codeinthehole.com/projects/nurl-an-immutable-url-object-for-nodejs/</guid>
      <description>I&amp;rsquo;m a big fan of Value Objects - some of the most useful classes I&amp;rsquo;ve ever written have been lightweight wrappers around strings.
For my first contribution to the node.js ecosystem, I&amp;rsquo;ve published a simple, immutable URL object to the Node package manager (npm) directory. It provides a light-weight, immutable URL object that encapsulates the functionality of the existing &amp;lsquo;url&amp;rsquo; and &amp;lsquo;querystring&amp;rsquo; modules in a single object as well as offering various extension methods that make working with URLs easy.</description>
    </item>
    <item>
      <title>Current pet project: Command-Line-Fu</title>
      <link>https://codeinthehole.com/projects/current-pet-project-command-line-fu/</link>
      <pubDate>Thu, 22 Jan 2009 00:00:00 +0000</pubDate>
      <guid>https://codeinthehole.com/projects/current-pet-project-command-line-fu/</guid>
      <description>If you&amp;rsquo;re anything like me, you spend a lot of time at the UNIX command-line manipulating the filesystem, configuring Linux, playing with services and so forth. As any UNIX user knows, tremendous power can be wielded through judicious function selection, piping and output redirection. It&amp;rsquo;s often quite staggering what can be achieved in a single line given a rudimentary knowledge of sed, grep, awk, cutâ€¦
Indeed, when I stumble upon a line of particular elegance or usefulness, I generally log them to a Tomboy note (fired up in a flash using Gnome-do).</description>
    </item>
    <item>
      <title>Tutorial: the complex Ginzburg-Landau equation</title>
      <link>https://codeinthehole.com/projects/ginzburg-landau-tutorial/</link>
      <pubDate>Tue, 01 Feb 2005 00:00:00 +0000</pubDate>
      <guid>https://codeinthehole.com/projects/ginzburg-landau-tutorial/</guid>
      <description>I wrote a tutorial on the complex Ginzburg-Landau equation as a set of simple HTML pages.</description>
    </item>
  </channel>
</rss>
